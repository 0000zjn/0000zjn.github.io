{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"source/assets/img/alipay.jpg","path":"assets/img/alipay.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/favicon.ico","path":"assets/img/favicon.ico","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"source/assets/img/weixin.jpg","path":"assets/img/weixin.jpg","modified":0,"renderable":0},{"_id":"source/assets/img/avatar.jpg","path":"assets/img/avatar.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1510675760000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1510675760000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1510675760000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1510675760000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1510675760000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1510675760000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1510675760000},{"_id":"themes/yilia/_config.yml","hash":"1b9d6206104af43d69ed2d6fab9ef7e15df00621","modified":1548059328098},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1510675760000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1510675760000},{"_id":"source/_posts/CentOS下的SS-SSR-BBR配置.md","hash":"003f251568d3409eccd7c7caea5f2060e54fb562","modified":1548052045619},{"_id":"source/_posts/ES6.md","hash":"386524106d2dcf7ed3e0a6be8ad20f265649fec5","modified":1548052045611},{"_id":"source/_posts/JSP基础.md","hash":"991c6806d39e0b5db29811ecf75448a9028c2fe7","modified":1548052180195},{"_id":"source/_posts/JS基础.md","hash":"3899db9b21bd2f508b42fc39ab0a3bbee1b14481","modified":1548052045688},{"_id":"source/_posts/Node.js.md","hash":"6c2754a9b1a0d7cbf29bf225606dfdaf407511fa","modified":1548052045638},{"_id":"source/_posts/PHP语法与基础.md","hash":"7906b876e65c958ece13682f0472cd364a308e93","modified":1548052543153},{"_id":"source/_posts/React.md","hash":"a3364ca52ca61cfef70454741d8e3a064f244310","modified":1548052045627},{"_id":"source/_posts/Yii基础.md","hash":"27ddf34e51edfdb1e33fac8d77632eed8ce3c65c","modified":1548052617769},{"_id":"source/_posts/Yii拓展性.md","hash":"13b35af40dbcd4d7964dd5042d71817e404f1825","modified":1548052444325},{"_id":"source/_posts/Yii高效篇.md","hash":"e2a9632141b5ee2189f4038aeb5bcbe1aa046289","modified":1548052444292},{"_id":"source/_posts/hello-world.md","hash":"ee220ee3a9ba93bf327ea08b004192f738af2c4d","modified":1548052045669},{"_id":"source/_posts/博客系统实战.md","hash":"cf8de434a396915396e9376aed5ca518cdfa2355","modified":1548052444348},{"_id":"source/_posts/反射.md","hash":"cee013d03305c5f36f5e4c0f1571c6c59aa23261","modified":1548052045602},{"_id":"source/_posts/实战的思路、技术整理.md","hash":"b8fab3d9fcb7fe312f86a1deb141257de10a12e5","modified":1548052675538},{"_id":"source/_posts/概率.md","hash":"d14af1fc6e104b52eebceca49906e91972e00bb8","modified":1548052045744},{"_id":"source/_posts/线性代数.md","hash":"5ba8691e2c8098f6af87feebf6632341e5ffde87","modified":1548061329046},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1510675760000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1510675760000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1510675760000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1510675760000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1510675760000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1510675760000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1510675760000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1510675760000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1510675760000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1510675760000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1510675760000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1510675760000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1510675760000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1510675760000},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"9be6f5c1edbbe961b6589f47842b31b17d6e9d55","modified":1548053240297},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1510675760000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1510675760000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1510675760000},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1510675760000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1510675760000},{"_id":"source/assets/img/alipay.jpg","hash":"ab899e5ea3113705ab57f8ffd66205f524e918d6","modified":1548055526193},{"_id":"source/assets/img/favicon.ico","hash":"e6db9ef8527dc5782402d15e43207356485f9644","modified":1548059259192},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"f6793ac2ed78a07d093071e9894b095e0683d2b2","modified":1548060399845},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1510675760000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1510675760000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1510675760000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1510675760000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1510675760000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1510675760000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1510675760000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1510675760000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1510675760000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1510675760000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1510675760000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1510675760000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1510675760000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f3899dd5e60c5b17e461d167f2138f4bb99d9a12","modified":1548053037971},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1510675760000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1510675760000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1510675760000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"9cf5d3bddfb121d9af7246950a32596a04112946","modified":1548053037979},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1510675760000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1510675760000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1510675760000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1510675760000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1510675760000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1510675760000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1510675760000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1510675760000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1510675760000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1510675760000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1510675760000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1510675760000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1510675760000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1510675760000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1510675760000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1510675760000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1510675760000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"8f9490df20431cf93e7235de0a09ca46d91a1617","modified":1547188291204},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1510675760000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1510675760000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1510675760000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1510675760000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1510675760000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1510675760000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1510675760000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1510675760000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1510675760000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1510675760000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1510675760000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1510675760000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1510675760000},{"_id":"source/assets/img/weixin.jpg","hash":"23eee68cfcabf48f22a8202f6c9ac0c74f065065","modified":1548055616074},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1510675760000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1510675760000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1510675760000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1510675760000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1510675760000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1510675760000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1510675760000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1510675760000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1510675760000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1510675760000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1510675760000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1510675760000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1510675760000},{"_id":"source/assets/img/avatar.jpg","hash":"565109127f86c4af9355cd5808c1c24bfb80df83","modified":1548059218319},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1510675760000},{"_id":"public/content.json","hash":"66e6027c61319dc4483d2ce1586faa6c06cdc1bb","modified":1548061884226},{"_id":"public/2019/01/21/线性代数/index.html","hash":"7ce60b68d09ff2ed4cbbaa40e0b4326c9aa57088","modified":1548061884951},{"_id":"public/2019/01/21/CentOS下的SS-SSR-BBR配置/index.html","hash":"39ea7748ef34c2ac521e5f3fedcf1f634b4a8e67","modified":1548061884951},{"_id":"public/2019/01/21/JSP基础/index.html","hash":"6abee8853f653815749dbec1b8f40de60df4498d","modified":1548061884952},{"_id":"public/2019/01/21/Yii拓展性/index.html","hash":"35b04d99f65c6ceb7f2dbc629309682112cc3510","modified":1548061884952},{"_id":"public/2019/01/21/Yii高效篇/index.html","hash":"1ea535fbffb7a8f7d1216695e8cadf4d40a9aac9","modified":1548061884952},{"_id":"public/2019/01/21/博客系统实战/index.html","hash":"a7b38ef86c26dcc7f923a3d0d38b67e935a37209","modified":1548061884952},{"_id":"public/2019/01/21/反射/index.html","hash":"a20b1d474a434831fc939d8e5ddf7b504103b525","modified":1548061884952},{"_id":"public/2019/01/21/概率/index.html","hash":"835a355a919279aa3cbafd0e1ef20e4d075e9dc6","modified":1548061884953},{"_id":"public/2019/01/21/ES6/index.html","hash":"7ed6a4f4c119f9746e80e73528a396c53849a1a2","modified":1548061884954},{"_id":"public/2019/01/21/JS基础/index.html","hash":"5149de4f7c9b2142baee507fd52118ea998609e3","modified":1548061884954},{"_id":"public/2019/01/21/Node.js/index.html","hash":"3352969519480896576c5284cb4e810a44fae9cb","modified":1548061884954},{"_id":"public/2019/01/21/PHP语法与基础/index.html","hash":"239a18b7508ebc43b24f199f45dd6afd49c46ece","modified":1548061884954},{"_id":"public/2019/01/21/Yii基础/index.html","hash":"077283fea23f0f81a51f0e33d7908403389fe4c4","modified":1548061884954},{"_id":"public/2019/01/21/React/index.html","hash":"be39cb3e965f8a617eb5ae71be620257c640f5a9","modified":1548061884954},{"_id":"public/2019/01/21/实战的思路、技术整理/index.html","hash":"1eae5e55d2a1ab9c4aa27ac4122868e0f01431d3","modified":1548061884955},{"_id":"public/2019/01/11/hello-world/index.html","hash":"d5978babec93a539bd6a65bc0d1fdeb9f8ba4f1f","modified":1548061884955},{"_id":"public/archives/index.html","hash":"1489df282d8fd55d14419cfc32789cea28303f79","modified":1548061884955},{"_id":"public/archives/page/2/index.html","hash":"8b39c8977d1d4db6bbfc5cec47813fd3b7b833c2","modified":1548061884955},{"_id":"public/archives/2019/index.html","hash":"ddda898f09b2ff3637d52cd81e81dcdfeff9efa3","modified":1548061884956},{"_id":"public/archives/2019/page/2/index.html","hash":"c8acea624200efdf693c8cddbf29e8af83ae8d50","modified":1548061884956},{"_id":"public/archives/2019/01/index.html","hash":"84b8c5f52907f7de13e7fc28ad5eb1eba481ff69","modified":1548061884956},{"_id":"public/archives/2019/01/page/2/index.html","hash":"bebc80d2b7c26aa459940b607e90f0491c421209","modified":1548061884956},{"_id":"public/index.html","hash":"74cb6e10fcae6f66f428b3a53b2a65476b402e88","modified":1548061884956},{"_id":"public/page/2/index.html","hash":"b9ca676a403466661a2cf4abc604a090460f94de","modified":1548061884956},{"_id":"public/tags/翻墙/index.html","hash":"1c2dafbcbf94fba7d85583147d6f491a426e2b9e","modified":1548061884957},{"_id":"public/tags/JS/index.html","hash":"bb9163eff3ee9cf7916219697837dc1bacf807fc","modified":1548061884957},{"_id":"public/tags/JAVA-Web/index.html","hash":"c14fac3a1c5591b5af625861d01345b8bf12d1c3","modified":1548061884957},{"_id":"public/tags/Yii/index.html","hash":"0157813cb879b1f1b82cac68fef2299fb95c6634","modified":1548061884957},{"_id":"public/tags/JAVA/index.html","hash":"0100f4e4209b712e4b0d8d16b796205d0370a787","modified":1548061884957},{"_id":"public/tags/数学/index.html","hash":"63bac646ab7769774628e8e37b56535db4527947","modified":1548061884957},{"_id":"public/tags/PHP/index.html","hash":"b19f1af0db7eb83997e8036ed43b9ef0b727a8fb","modified":1548061884957},{"_id":"public/assets/img/favicon.ico","hash":"e6db9ef8527dc5782402d15e43207356485f9644","modified":1548061884963},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1548061884963},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1548061884964},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1548061884964},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1548061884964},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1548061884964},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1548061884964},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1548061884964},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1548061884964},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1548061884964},{"_id":"public/assets/img/alipay.jpg","hash":"ab899e5ea3113705ab57f8ffd66205f524e918d6","modified":1548061884966},{"_id":"public/assets/img/weixin.jpg","hash":"23eee68cfcabf48f22a8202f6c9ac0c74f065065","modified":1548061884966},{"_id":"public/assets/img/avatar.jpg","hash":"565109127f86c4af9355cd5808c1c24bfb80df83","modified":1548061884970},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1548061884985},{"_id":"public/main.0cf68a.css","hash":"9be6f5c1edbbe961b6589f47842b31b17d6e9d55","modified":1548061884993},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1548061884994},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1548061885007}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"CentOS下的SS/SSR/BBR配置","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n## 1. [SS配置][1]\n### 1.1 一键安装：\n```\nwget –no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/yigeni/Shadowsocks/master/shadowsocks-all.sh\n \nchmod +x shadowsocks-all.sh\n \n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n如出现错误提示“bash: wget: command not found”。可以请在先执行`yum -y install wget`命令\n接着按照提醒输入你的密码，端口和加密方式（aes-256-cfb）。\n\n<!-- more -->\n## 2. [SSR配置][2]\n### 2.1 一键部署ssr\n```\nyum -y install wget\n\nwget -N --no-check-certificate https://softs.fun/Bash/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n```\n调出界面：\n```\nbash ssr.sh\n```\n## 3. BBR配置\n### 3.1 [OpenVZ 以外的，比如 KVM、Xen、VMware等][3]\n- 使用root用户登录，运行以下命令：\n```\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && chmod +x bbr.sh && ./bbr.sh\n```\n---\n- 安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。\n重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：\n```\nuname -r\n```\n---\n- 查看内核版本，显示为最新版就表示 OK 了\n```\nsysctl net.ipv4.tcp_available_congestion_control\n```\n返回值一般为：\nnet.ipv4.tcp_available_congestion_control = bbr cubic reno\n或者为：\nnet.ipv4.tcp_available_congestion_control = reno cubic bbr\n\n---\n```\nsysctl net.ipv4.tcp_congestion_control\n```\n返回值一般为：\nnet.ipv4.tcp_congestion_control = bbr\n\n---\n```\nsysctl net.core.default_qdisc\n```\n返回值一般为：\nnet.core.default_qdisc = fq\n\n---\n\n```\nlsmod | grep bbr\n```\n返回值有 tcp_bbr 模块即说明 bbr 已启动。注意：并不是所有的 VPS 都会有此返回值，若没有也属正常。\n\n---\n### 3.2 [搬瓦工OpenVZ 平台 Google BBR 一键安装脚本][4]\n```\nwget https://raw.githubusercontent.com/kuoruan/shell-scripts/master/ovz-bbr/ovz-bbr-installer.sh\nchmod +x ovz-bbr-installer.sh\n./ovz-bbr-installer.sh\n```\n---\n## 4. Shadowsocks 一键安装脚本（四合一）\n- 安装：\n```\nwget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\nchmod +x shadowsocks-all.sh\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n- 安装完成后，脚本提示如下\n```\nCongratulations, your_shadowsocks_version install completed!\nYour Server IP        :your_server_ip\nYour Server Port      :your_server_port\nYour Password         :your_password\nYour Encryption Method:your_encryption_method\n\nYour QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)\n ss://your_encryption_method:your_password@your_server_ip:your_server_port\nYour QR Code has been saved as a PNG file path:\n your_path.png\n\nWelcome to visit:https://teddysun.com/486.html\nEnjoy it!\n```\n- 卸载方法\n若已安装多个版本，则卸载时也需多次运行（每次卸载一种）\n使用root用户登录，运行以下命令：\n```\n./shadowsocks-all.sh uninstall\n```\n\n- 启动脚本\n启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。\n```\nShadowsocks-Python 版：\n/etc/init.d/shadowsocks-python start | stop | restart | status\n\nShadowsocksR 版：\n/etc/init.d/shadowsocks-r start | stop | restart | status\n\nShadowsocks-Go 版：\n/etc/init.d/shadowsocks-go start | stop | restart | status\n\nShadowsocks-libev 版：\n/etc/init.d/shadowsocks-libev start | stop | restart | status\n```\n- 各版本默认配置文件\n```\nShadowsocks-Python 版：\n/etc/shadowsocks-python/config.json\n\nShadowsocksR 版：\n/etc/shadowsocks-r/config.json\n\nShadowsocks-Go 版：\n/etc/shadowsocks-go/config.json\n\nShadowsocks-libev 版：\n/etc/shadowsocks-libev/config.json\n```\n\n\n  [1]: https://blog.csdn.net/weixin_42288676/article/details/80607837\n  [2]: https://blog.csdn.net/weixin_42288676/article/details/80517662\n  [3]: https://teddysun.com/489.html\n  [4]: https://www.bawagon.com/openvz-google-bbr/","source":"_posts/CentOS下的SS-SSR-BBR配置.md","raw":"---\ntitle: CentOS下的SS/SSR/BBR配置\ndate: 2019-01-21 10:26:49\ntags: 翻墙\n---\n\n---\n## 1. [SS配置][1]\n### 1.1 一键安装：\n```\nwget –no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/yigeni/Shadowsocks/master/shadowsocks-all.sh\n \nchmod +x shadowsocks-all.sh\n \n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n如出现错误提示“bash: wget: command not found”。可以请在先执行`yum -y install wget`命令\n接着按照提醒输入你的密码，端口和加密方式（aes-256-cfb）。\n\n<!-- more -->\n## 2. [SSR配置][2]\n### 2.1 一键部署ssr\n```\nyum -y install wget\n\nwget -N --no-check-certificate https://softs.fun/Bash/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n```\n调出界面：\n```\nbash ssr.sh\n```\n## 3. BBR配置\n### 3.1 [OpenVZ 以外的，比如 KVM、Xen、VMware等][3]\n- 使用root用户登录，运行以下命令：\n```\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && chmod +x bbr.sh && ./bbr.sh\n```\n---\n- 安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。\n重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：\n```\nuname -r\n```\n---\n- 查看内核版本，显示为最新版就表示 OK 了\n```\nsysctl net.ipv4.tcp_available_congestion_control\n```\n返回值一般为：\nnet.ipv4.tcp_available_congestion_control = bbr cubic reno\n或者为：\nnet.ipv4.tcp_available_congestion_control = reno cubic bbr\n\n---\n```\nsysctl net.ipv4.tcp_congestion_control\n```\n返回值一般为：\nnet.ipv4.tcp_congestion_control = bbr\n\n---\n```\nsysctl net.core.default_qdisc\n```\n返回值一般为：\nnet.core.default_qdisc = fq\n\n---\n\n```\nlsmod | grep bbr\n```\n返回值有 tcp_bbr 模块即说明 bbr 已启动。注意：并不是所有的 VPS 都会有此返回值，若没有也属正常。\n\n---\n### 3.2 [搬瓦工OpenVZ 平台 Google BBR 一键安装脚本][4]\n```\nwget https://raw.githubusercontent.com/kuoruan/shell-scripts/master/ovz-bbr/ovz-bbr-installer.sh\nchmod +x ovz-bbr-installer.sh\n./ovz-bbr-installer.sh\n```\n---\n## 4. Shadowsocks 一键安装脚本（四合一）\n- 安装：\n```\nwget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\nchmod +x shadowsocks-all.sh\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n- 安装完成后，脚本提示如下\n```\nCongratulations, your_shadowsocks_version install completed!\nYour Server IP        :your_server_ip\nYour Server Port      :your_server_port\nYour Password         :your_password\nYour Encryption Method:your_encryption_method\n\nYour QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)\n ss://your_encryption_method:your_password@your_server_ip:your_server_port\nYour QR Code has been saved as a PNG file path:\n your_path.png\n\nWelcome to visit:https://teddysun.com/486.html\nEnjoy it!\n```\n- 卸载方法\n若已安装多个版本，则卸载时也需多次运行（每次卸载一种）\n使用root用户登录，运行以下命令：\n```\n./shadowsocks-all.sh uninstall\n```\n\n- 启动脚本\n启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。\n```\nShadowsocks-Python 版：\n/etc/init.d/shadowsocks-python start | stop | restart | status\n\nShadowsocksR 版：\n/etc/init.d/shadowsocks-r start | stop | restart | status\n\nShadowsocks-Go 版：\n/etc/init.d/shadowsocks-go start | stop | restart | status\n\nShadowsocks-libev 版：\n/etc/init.d/shadowsocks-libev start | stop | restart | status\n```\n- 各版本默认配置文件\n```\nShadowsocks-Python 版：\n/etc/shadowsocks-python/config.json\n\nShadowsocksR 版：\n/etc/shadowsocks-r/config.json\n\nShadowsocks-Go 版：\n/etc/shadowsocks-go/config.json\n\nShadowsocks-libev 版：\n/etc/shadowsocks-libev/config.json\n```\n\n\n  [1]: https://blog.csdn.net/weixin_42288676/article/details/80607837\n  [2]: https://blog.csdn.net/weixin_42288676/article/details/80517662\n  [3]: https://teddysun.com/489.html\n  [4]: https://www.bawagon.com/openvz-google-bbr/","slug":"CentOS下的SS-SSR-BBR配置","published":1,"updated":"2019-01-21T06:27:25.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642pxf0000y0oou3wpj8jw","content":"<hr>\n<h2 id=\"1-SS配置\"><a href=\"#1-SS配置\" class=\"headerlink\" title=\"1. SS配置\"></a>1. <a href=\"https://blog.csdn.net/weixin_42288676/article/details/80607837\" target=\"_blank\" rel=\"noopener\">SS配置</a></h2><h3 id=\"1-1-一键安装：\"><a href=\"#1-1-一键安装：\" class=\"headerlink\" title=\"1.1 一键安装：\"></a>1.1 一键安装：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget –no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/yigeni/Shadowsocks/master/shadowsocks-all.sh</span><br><span class=\"line\"> </span><br><span class=\"line\">chmod +x shadowsocks-all.sh</span><br><span class=\"line\"> </span><br><span class=\"line\">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>\n<p>如出现错误提示“bash: wget: command not found”。可以请在先执行<code>yum -y install wget</code>命令<br>接着按照提醒输入你的密码，端口和加密方式（aes-256-cfb）。</p>\n<a id=\"more\"></a>\n<h2 id=\"2-SSR配置\"><a href=\"#2-SSR配置\" class=\"headerlink\" title=\"2. SSR配置\"></a>2. <a href=\"https://blog.csdn.net/weixin_42288676/article/details/80517662\" target=\"_blank\" rel=\"noopener\">SSR配置</a></h2><h3 id=\"2-1-一键部署ssr\"><a href=\"#2-1-一键部署ssr\" class=\"headerlink\" title=\"2.1 一键部署ssr\"></a>2.1 一键部署ssr</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget</span><br><span class=\"line\"></span><br><span class=\"line\">wget -N --no-check-certificate https://softs.fun/Bash/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure>\n<p>调出界面：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash ssr.sh</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-BBR配置\"><a href=\"#3-BBR配置\" class=\"headerlink\" title=\"3. BBR配置\"></a>3. BBR配置</h2><h3 id=\"3-1-OpenVZ-以外的，比如-KVM、Xen、VMware等\"><a href=\"#3-1-OpenVZ-以外的，比如-KVM、Xen、VMware等\" class=\"headerlink\" title=\"3.1 OpenVZ 以外的，比如 KVM、Xen、VMware等\"></a>3.1 <a href=\"https://teddysun.com/489.html\" target=\"_blank\" rel=\"noopener\">OpenVZ 以外的，比如 KVM、Xen、VMware等</a></h3><ul>\n<li>使用root用户登录，运行以下命令：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。<br>重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>查看内核版本，显示为最新版就表示 OK 了<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>返回值一般为：<br>net.ipv4.tcp_available_congestion_control = bbr cubic reno<br>或者为：<br>net.ipv4.tcp_available_congestion_control = reno cubic bbr</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure>\n<p>返回值一般为：<br>net.ipv4.tcp_congestion_control = bbr</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.core.default_qdisc</span><br></pre></td></tr></table></figure>\n<p>返回值一般为：<br>net.core.default_qdisc = fq</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep bbr</span><br></pre></td></tr></table></figure>\n<p>返回值有 tcp_bbr 模块即说明 bbr 已启动。注意：并不是所有的 VPS 都会有此返回值，若没有也属正常。</p>\n<hr>\n<h3 id=\"3-2-搬瓦工OpenVZ-平台-Google-BBR-一键安装脚本\"><a href=\"#3-2-搬瓦工OpenVZ-平台-Google-BBR-一键安装脚本\" class=\"headerlink\" title=\"3.2 搬瓦工OpenVZ 平台 Google BBR 一键安装脚本\"></a>3.2 <a href=\"https://www.bawagon.com/openvz-google-bbr/\" target=\"_blank\" rel=\"noopener\">搬瓦工OpenVZ 平台 Google BBR 一键安装脚本</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/kuoruan/shell-scripts/master/ovz-bbr/ovz-bbr-installer.sh</span><br><span class=\"line\">chmod +x ovz-bbr-installer.sh</span><br><span class=\"line\">./ovz-bbr-installer.sh</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-Shadowsocks-一键安装脚本（四合一）\"><a href=\"#4-Shadowsocks-一键安装脚本（四合一）\" class=\"headerlink\" title=\"4. Shadowsocks 一键安装脚本（四合一）\"></a>4. Shadowsocks 一键安装脚本（四合一）</h2><ul>\n<li><p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class=\"line\">chmod +x shadowsocks-all.sh</span><br><span class=\"line\">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装完成后，脚本提示如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations, your_shadowsocks_version install completed!</span><br><span class=\"line\">Your Server IP        :your_server_ip</span><br><span class=\"line\">Your Server Port      :your_server_port</span><br><span class=\"line\">Your Password         :your_password</span><br><span class=\"line\">Your Encryption Method:your_encryption_method</span><br><span class=\"line\"></span><br><span class=\"line\">Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)</span><br><span class=\"line\"> ss://your_encryption_method:your_password@your_server_ip:your_server_port</span><br><span class=\"line\">Your QR Code has been saved as a PNG file path:</span><br><span class=\"line\"> your_path.png</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to visit:https://teddysun.com/486.html</span><br><span class=\"line\">Enjoy it!</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卸载方法<br>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）<br>使用root用户登录，运行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocks-all.sh uninstall</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动脚本<br>启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shadowsocks-Python 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-python start | stop | restart | status</span><br><span class=\"line\"></span><br><span class=\"line\">ShadowsocksR 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-r start | stop | restart | status</span><br><span class=\"line\"></span><br><span class=\"line\">Shadowsocks-Go 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-go start | stop | restart | status</span><br><span class=\"line\"></span><br><span class=\"line\">Shadowsocks-libev 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-libev start | stop | restart | status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>各版本默认配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shadowsocks-Python 版：</span><br><span class=\"line\">/etc/shadowsocks-python/config.json</span><br><span class=\"line\"></span><br><span class=\"line\">ShadowsocksR 版：</span><br><span class=\"line\">/etc/shadowsocks-r/config.json</span><br><span class=\"line\"></span><br><span class=\"line\">Shadowsocks-Go 版：</span><br><span class=\"line\">/etc/shadowsocks-go/config.json</span><br><span class=\"line\"></span><br><span class=\"line\">Shadowsocks-libev 版：</span><br><span class=\"line\">/etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"1-SS配置\"><a href=\"#1-SS配置\" class=\"headerlink\" title=\"1. SS配置\"></a>1. <a href=\"https://blog.csdn.net/weixin_42288676/article/details/80607837\" target=\"_blank\" rel=\"noopener\">SS配置</a></h2><h3 id=\"1-1-一键安装：\"><a href=\"#1-1-一键安装：\" class=\"headerlink\" title=\"1.1 一键安装：\"></a>1.1 一键安装：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget –no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/yigeni/Shadowsocks/master/shadowsocks-all.sh</span><br><span class=\"line\"> </span><br><span class=\"line\">chmod +x shadowsocks-all.sh</span><br><span class=\"line\"> </span><br><span class=\"line\">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>\n<p>如出现错误提示“bash: wget: command not found”。可以请在先执行<code>yum -y install wget</code>命令<br>接着按照提醒输入你的密码，端口和加密方式（aes-256-cfb）。</p>","more":"<h2 id=\"2-SSR配置\"><a href=\"#2-SSR配置\" class=\"headerlink\" title=\"2. SSR配置\"></a>2. <a href=\"https://blog.csdn.net/weixin_42288676/article/details/80517662\" target=\"_blank\" rel=\"noopener\">SSR配置</a></h2><h3 id=\"2-1-一键部署ssr\"><a href=\"#2-1-一键部署ssr\" class=\"headerlink\" title=\"2.1 一键部署ssr\"></a>2.1 一键部署ssr</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget</span><br><span class=\"line\"></span><br><span class=\"line\">wget -N --no-check-certificate https://softs.fun/Bash/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure>\n<p>调出界面：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash ssr.sh</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-BBR配置\"><a href=\"#3-BBR配置\" class=\"headerlink\" title=\"3. BBR配置\"></a>3. BBR配置</h2><h3 id=\"3-1-OpenVZ-以外的，比如-KVM、Xen、VMware等\"><a href=\"#3-1-OpenVZ-以外的，比如-KVM、Xen、VMware等\" class=\"headerlink\" title=\"3.1 OpenVZ 以外的，比如 KVM、Xen、VMware等\"></a>3.1 <a href=\"https://teddysun.com/489.html\" target=\"_blank\" rel=\"noopener\">OpenVZ 以外的，比如 KVM、Xen、VMware等</a></h3><ul>\n<li>使用root用户登录，运行以下命令：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。<br>重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li>查看内核版本，显示为最新版就表示 OK 了<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>返回值一般为：<br>net.ipv4.tcp_available_congestion_control = bbr cubic reno<br>或者为：<br>net.ipv4.tcp_available_congestion_control = reno cubic bbr</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure>\n<p>返回值一般为：<br>net.ipv4.tcp_congestion_control = bbr</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.core.default_qdisc</span><br></pre></td></tr></table></figure>\n<p>返回值一般为：<br>net.core.default_qdisc = fq</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep bbr</span><br></pre></td></tr></table></figure>\n<p>返回值有 tcp_bbr 模块即说明 bbr 已启动。注意：并不是所有的 VPS 都会有此返回值，若没有也属正常。</p>\n<hr>\n<h3 id=\"3-2-搬瓦工OpenVZ-平台-Google-BBR-一键安装脚本\"><a href=\"#3-2-搬瓦工OpenVZ-平台-Google-BBR-一键安装脚本\" class=\"headerlink\" title=\"3.2 搬瓦工OpenVZ 平台 Google BBR 一键安装脚本\"></a>3.2 <a href=\"https://www.bawagon.com/openvz-google-bbr/\" target=\"_blank\" rel=\"noopener\">搬瓦工OpenVZ 平台 Google BBR 一键安装脚本</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/kuoruan/shell-scripts/master/ovz-bbr/ovz-bbr-installer.sh</span><br><span class=\"line\">chmod +x ovz-bbr-installer.sh</span><br><span class=\"line\">./ovz-bbr-installer.sh</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-Shadowsocks-一键安装脚本（四合一）\"><a href=\"#4-Shadowsocks-一键安装脚本（四合一）\" class=\"headerlink\" title=\"4. Shadowsocks 一键安装脚本（四合一）\"></a>4. Shadowsocks 一键安装脚本（四合一）</h2><ul>\n<li><p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class=\"line\">chmod +x shadowsocks-all.sh</span><br><span class=\"line\">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装完成后，脚本提示如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Congratulations, your_shadowsocks_version install completed!</span><br><span class=\"line\">Your Server IP        :your_server_ip</span><br><span class=\"line\">Your Server Port      :your_server_port</span><br><span class=\"line\">Your Password         :your_password</span><br><span class=\"line\">Your Encryption Method:your_encryption_method</span><br><span class=\"line\"></span><br><span class=\"line\">Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)</span><br><span class=\"line\"> ss://your_encryption_method:your_password@your_server_ip:your_server_port</span><br><span class=\"line\">Your QR Code has been saved as a PNG file path:</span><br><span class=\"line\"> your_path.png</span><br><span class=\"line\"></span><br><span class=\"line\">Welcome to visit:https://teddysun.com/486.html</span><br><span class=\"line\">Enjoy it!</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卸载方法<br>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）<br>使用root用户登录，运行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocks-all.sh uninstall</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动脚本<br>启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shadowsocks-Python 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-python start | stop | restart | status</span><br><span class=\"line\"></span><br><span class=\"line\">ShadowsocksR 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-r start | stop | restart | status</span><br><span class=\"line\"></span><br><span class=\"line\">Shadowsocks-Go 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-go start | stop | restart | status</span><br><span class=\"line\"></span><br><span class=\"line\">Shadowsocks-libev 版：</span><br><span class=\"line\">/etc/init.d/shadowsocks-libev start | stop | restart | status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>各版本默认配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shadowsocks-Python 版：</span><br><span class=\"line\">/etc/shadowsocks-python/config.json</span><br><span class=\"line\"></span><br><span class=\"line\">ShadowsocksR 版：</span><br><span class=\"line\">/etc/shadowsocks-r/config.json</span><br><span class=\"line\"></span><br><span class=\"line\">Shadowsocks-Go 版：</span><br><span class=\"line\">/etc/shadowsocks-go/config.json</span><br><span class=\"line\"></span><br><span class=\"line\">Shadowsocks-libev 版：</span><br><span class=\"line\">/etc/shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"ES6","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n## 1. 常量：let和const\n- 暂时性死区\n    如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n\n    ```\n    var tmp = 123;\n    if (true) {\n        tmp = 'abc'; // ReferenceError\n        let tmp;\n    }\n    //上面代码中，存在全局变量tmp，但是块级作用域内\n    //let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，\n    //所以在let声明变量前，对tmp赋值会报错。\n    ```\n    总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。\n\n<!-- more -->\n\n\n\n","source":"_posts/ES6.md","raw":"---\ntitle: ES6\ndate: 2019-01-21 10:26:49\ntags: JS\n---\n\n---\n## 1. 常量：let和const\n- 暂时性死区\n    如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n\n    ```\n    var tmp = 123;\n    if (true) {\n        tmp = 'abc'; // ReferenceError\n        let tmp;\n    }\n    //上面代码中，存在全局变量tmp，但是块级作用域内\n    //let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，\n    //所以在let声明变量前，对tmp赋值会报错。\n    ```\n    总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。\n\n<!-- more -->\n\n\n\n","slug":"ES6","published":1,"updated":"2019-01-21T06:27:25.611Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642pxk0001y0ooyexkkhr1","content":"<hr>\n<h2 id=\"1-常量：let和const\"><a href=\"#1-常量：let和const\" class=\"headerlink\" title=\"1. 常量：let和const\"></a>1. 常量：let和const</h2><ul>\n<li><p>暂时性死区<br>  如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var tmp = 123;</span><br><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">    tmp = &apos;abc&apos;; // ReferenceError</span><br><span class=\"line\">    let tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//上面代码中，存在全局变量tmp，但是块级作用域内</span><br><span class=\"line\">//let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，</span><br><span class=\"line\">//所以在let声明变量前，对tmp赋值会报错。</span><br></pre></td></tr></table></figure>\n<p>  总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"1-常量：let和const\"><a href=\"#1-常量：let和const\" class=\"headerlink\" title=\"1. 常量：let和const\"></a>1. 常量：let和const</h2><ul>\n<li><p>暂时性死区<br>  如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var tmp = 123;</span><br><span class=\"line\">if (true) &#123;</span><br><span class=\"line\">    tmp = &apos;abc&apos;; // ReferenceError</span><br><span class=\"line\">    let tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//上面代码中，存在全局变量tmp，但是块级作用域内</span><br><span class=\"line\">//let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，</span><br><span class=\"line\">//所以在let声明变量前，对tmp赋值会报错。</span><br></pre></td></tr></table></figure>\n<p>  总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。</p>\n</li>\n</ul>","more":""},{"title":"JSP基础","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n\n## 1. JSP基础语法\n---\n### 1.1 JSP指令\n- page：页面顶端，可有多个\n- include：将外部文件嵌入当前jsp文件并解析\n- taglib：使用标签库自定义的标签\n\n<!-- more -->\n---\n### 1.2 JSP脚本、声明、表达式\n```\n<% java脚本代码%>\n<%! Java代码%>//定义方法和变量，写入到\n<%=表达式 %>//表达式不以分号结束\n```\n\n---\n### 1.3 JSP页面生命周期\n```flow\n1=>start: 用户第一次发出请求index.jsp\n2=>condition: 是否第一次请求\n3=>operation: JSP引擎把该JSP文件转换成一个servlet，\n生成字节码文件并执行jspInit()\n4=>operation: 访问生成的字节码文件\n5=>end: 解析执行，jspService()\n\n1->2->3->5\n2(yes)->3\n2(no)->4->5\n```\njspService()方法被调用来处理客户端请求。一请求一线程。\n\n---\n### 1.4 JSP四种范围对象的作用域\n作用域范围从小到大顺序：\npageContext--request--session--application\n \n其中：\n**pageContext：**\n作用域仅限于当前页面对象，可以近似于理解为java的this对象，离开当前JSP页面（无论是redirect还是forward），则pageContext中的所有属性值就会丢失。\n**request：**\n作用域是同一个请求之内，在页面跳转时，如果通过forward方式跳转，则forward目标页面仍然可以拿到request中的属性值。如果通过redirect方式进行页面跳转，由于redirect相当于重新发出的请求，此种场景下，request中的属性值会丢失。\n**session：**\nsession的作用域是在一个会话的生命周期内，会话失效，则session中的数据也随之丢失。\n**application：**\n作用域是最大的，只要服务器不停止，则application对象就一直存在，并且为所有会话所共享。\n\n---\n## 2. JSP内置对象\n 1. out\n 2. request\n 3. response\n 4. session\n 5. application\n 6. Page\n 7. pageContext\n 8. exception\n 9. config\n\n---\n### 2.1 out\n缓冲区：Buffer，用碗吃饭\nout对象：JspWriter类的实例\n常用方法：\n1. void println()向客户端打印字符串\n2. void clear()清除缓冲区内容，在flush后使用会抛出异常\n3. void clearBuffer()不抛异常\n4. void flush()结算缓冲区内容到客户端\n5. int getBufferSize()返回缓冲区字节大小，不设则为0\n6. int getRemaining()返回缓冲区剩余空间\n7. boolean isAutoFlush()返回缓冲区满时，是自动清空还是抛出异常\n8. void close()关闭输出流\n\n---\n### 2.2 request\n- 客户端请求封装在request对象中，通过它才能了解到客户的需求，然后做出响应。\n- 它是HttpServletRequest类的实例。\n- request对象具有请求域，即完成客户端的请求之前一直有效。\n\n- request常用方法：\n    1. String getParamenter(String name) 返回name指定参数的参数值\n    2. String[] getParameterValues(String name)返回包含参数name的所有返回值\n    3. void setAttribute(String,Object) 存储此请求中的属性\n    4. object getAttribute(String name) 返回指定属性的属性值\n    5. String getContentType() 得到请求体的MIME属性\n    6. String getProtocol 返回请求用的协议类型及版本号\n    7. String getServerName() 返回接受请求的服务器主机\n    ```\n    在作用域里设置键值对<%request.setAttribute(\"pwd\",\"123456\"); %>\n    获取密码：<%=request.getAttribute(\"pwd\") %><br>\n    请求体的MIME类型：<%=request.getContentType() %><br>\n    协议类型及版本号：<%=request.getProtocol() %><br>\n    服务器主机名：<%=request.getServerName() %><br>\n    服务器端口号：<%=request.getServerPort() %><br>\n    请求文件的长度：<%=request.getContentLength() %><br>\n    请求客户端的IP地址：<%=request.getRemoteAddr() %><br>\n    <!--只能获取静态的IP地址，动态的话获取不到-->\n    请求的真实路径：<%=request.getRealPath(\"request.jsp\") %><br>\n    请求的上下文路径：<%=request.getContextPath() %><br>\n    \n    ```\n- 中文乱码问题：\n    post表单提交：request.setCharacterEncoding(\"utf-8\");\n    URL传参：修改server.xml文件\n\n---\n","source":"_posts/JSP基础.md","raw":"---\ntitle: JSP基础\ndate: 2019-01-21 10:26:49\ntags: JAVA-Web\n---\n\n---\n\n## 1. JSP基础语法\n---\n### 1.1 JSP指令\n- page：页面顶端，可有多个\n- include：将外部文件嵌入当前jsp文件并解析\n- taglib：使用标签库自定义的标签\n\n<!-- more -->\n---\n### 1.2 JSP脚本、声明、表达式\n```\n<% java脚本代码%>\n<%! Java代码%>//定义方法和变量，写入到\n<%=表达式 %>//表达式不以分号结束\n```\n\n---\n### 1.3 JSP页面生命周期\n```flow\n1=>start: 用户第一次发出请求index.jsp\n2=>condition: 是否第一次请求\n3=>operation: JSP引擎把该JSP文件转换成一个servlet，\n生成字节码文件并执行jspInit()\n4=>operation: 访问生成的字节码文件\n5=>end: 解析执行，jspService()\n\n1->2->3->5\n2(yes)->3\n2(no)->4->5\n```\njspService()方法被调用来处理客户端请求。一请求一线程。\n\n---\n### 1.4 JSP四种范围对象的作用域\n作用域范围从小到大顺序：\npageContext--request--session--application\n \n其中：\n**pageContext：**\n作用域仅限于当前页面对象，可以近似于理解为java的this对象，离开当前JSP页面（无论是redirect还是forward），则pageContext中的所有属性值就会丢失。\n**request：**\n作用域是同一个请求之内，在页面跳转时，如果通过forward方式跳转，则forward目标页面仍然可以拿到request中的属性值。如果通过redirect方式进行页面跳转，由于redirect相当于重新发出的请求，此种场景下，request中的属性值会丢失。\n**session：**\nsession的作用域是在一个会话的生命周期内，会话失效，则session中的数据也随之丢失。\n**application：**\n作用域是最大的，只要服务器不停止，则application对象就一直存在，并且为所有会话所共享。\n\n---\n## 2. JSP内置对象\n 1. out\n 2. request\n 3. response\n 4. session\n 5. application\n 6. Page\n 7. pageContext\n 8. exception\n 9. config\n\n---\n### 2.1 out\n缓冲区：Buffer，用碗吃饭\nout对象：JspWriter类的实例\n常用方法：\n1. void println()向客户端打印字符串\n2. void clear()清除缓冲区内容，在flush后使用会抛出异常\n3. void clearBuffer()不抛异常\n4. void flush()结算缓冲区内容到客户端\n5. int getBufferSize()返回缓冲区字节大小，不设则为0\n6. int getRemaining()返回缓冲区剩余空间\n7. boolean isAutoFlush()返回缓冲区满时，是自动清空还是抛出异常\n8. void close()关闭输出流\n\n---\n### 2.2 request\n- 客户端请求封装在request对象中，通过它才能了解到客户的需求，然后做出响应。\n- 它是HttpServletRequest类的实例。\n- request对象具有请求域，即完成客户端的请求之前一直有效。\n\n- request常用方法：\n    1. String getParamenter(String name) 返回name指定参数的参数值\n    2. String[] getParameterValues(String name)返回包含参数name的所有返回值\n    3. void setAttribute(String,Object) 存储此请求中的属性\n    4. object getAttribute(String name) 返回指定属性的属性值\n    5. String getContentType() 得到请求体的MIME属性\n    6. String getProtocol 返回请求用的协议类型及版本号\n    7. String getServerName() 返回接受请求的服务器主机\n    ```\n    在作用域里设置键值对<%request.setAttribute(\"pwd\",\"123456\"); %>\n    获取密码：<%=request.getAttribute(\"pwd\") %><br>\n    请求体的MIME类型：<%=request.getContentType() %><br>\n    协议类型及版本号：<%=request.getProtocol() %><br>\n    服务器主机名：<%=request.getServerName() %><br>\n    服务器端口号：<%=request.getServerPort() %><br>\n    请求文件的长度：<%=request.getContentLength() %><br>\n    请求客户端的IP地址：<%=request.getRemoteAddr() %><br>\n    <!--只能获取静态的IP地址，动态的话获取不到-->\n    请求的真实路径：<%=request.getRealPath(\"request.jsp\") %><br>\n    请求的上下文路径：<%=request.getContextPath() %><br>\n    \n    ```\n- 中文乱码问题：\n    post表单提交：request.setCharacterEncoding(\"utf-8\");\n    URL传参：修改server.xml文件\n\n---\n","slug":"JSP基础","published":1,"updated":"2019-01-21T06:29:40.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642pxs0003y0oouzkcob8c","content":"<hr>\n<h2 id=\"1-JSP基础语法\"><a href=\"#1-JSP基础语法\" class=\"headerlink\" title=\"1. JSP基础语法\"></a>1. JSP基础语法</h2><hr>\n<h3 id=\"1-1-JSP指令\"><a href=\"#1-1-JSP指令\" class=\"headerlink\" title=\"1.1 JSP指令\"></a>1.1 JSP指令</h3><ul>\n<li>page：页面顶端，可有多个</li>\n<li>include：将外部文件嵌入当前jsp文件并解析</li>\n<li>taglib：使用标签库自定义的标签</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h3 id=\"1-2-JSP脚本、声明、表达式\"><a href=\"#1-2-JSP脚本、声明、表达式\" class=\"headerlink\" title=\"1.2 JSP脚本、声明、表达式\"></a>1.2 JSP脚本、声明、表达式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% java脚本代码%&gt;</span><br><span class=\"line\">&lt;%! Java代码%&gt;//定义方法和变量，写入到</span><br><span class=\"line\">&lt;%=表达式 %&gt;//表达式不以分号结束</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"1-3-JSP页面生命周期\"><a href=\"#1-3-JSP页面生命周期\" class=\"headerlink\" title=\"1.3 JSP页面生命周期\"></a>1.3 JSP页面生命周期</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1=&gt;start: 用户第一次发出请求index.jsp</span><br><span class=\"line\">2=&gt;condition: 是否第一次请求</span><br><span class=\"line\">3=&gt;operation: JSP引擎把该JSP文件转换成一个servlet，</span><br><span class=\"line\">生成字节码文件并执行jspInit()</span><br><span class=\"line\">4=&gt;operation: 访问生成的字节码文件</span><br><span class=\"line\">5=&gt;end: 解析执行，jspService()</span><br><span class=\"line\"></span><br><span class=\"line\">1-&gt;2-&gt;3-&gt;5</span><br><span class=\"line\">2(yes)-&gt;3</span><br><span class=\"line\">2(no)-&gt;4-&gt;5</span><br></pre></td></tr></table></figure>\n<p>jspService()方法被调用来处理客户端请求。一请求一线程。</p>\n<hr>\n<h3 id=\"1-4-JSP四种范围对象的作用域\"><a href=\"#1-4-JSP四种范围对象的作用域\" class=\"headerlink\" title=\"1.4 JSP四种范围对象的作用域\"></a>1.4 JSP四种范围对象的作用域</h3><p>作用域范围从小到大顺序：<br>pageContext—request—session—application</p>\n<p>其中：<br><strong>pageContext：</strong><br>作用域仅限于当前页面对象，可以近似于理解为java的this对象，离开当前JSP页面（无论是redirect还是forward），则pageContext中的所有属性值就会丢失。<br><strong>request：</strong><br>作用域是同一个请求之内，在页面跳转时，如果通过forward方式跳转，则forward目标页面仍然可以拿到request中的属性值。如果通过redirect方式进行页面跳转，由于redirect相当于重新发出的请求，此种场景下，request中的属性值会丢失。<br><strong>session：</strong><br>session的作用域是在一个会话的生命周期内，会话失效，则session中的数据也随之丢失。<br><strong>application：</strong><br>作用域是最大的，只要服务器不停止，则application对象就一直存在，并且为所有会话所共享。</p>\n<hr>\n<h2 id=\"2-JSP内置对象\"><a href=\"#2-JSP内置对象\" class=\"headerlink\" title=\"2. JSP内置对象\"></a>2. JSP内置对象</h2><ol>\n<li>out</li>\n<li>request</li>\n<li>response</li>\n<li>session</li>\n<li>application</li>\n<li>Page</li>\n<li>pageContext</li>\n<li>exception</li>\n<li>config</li>\n</ol>\n<hr>\n<h3 id=\"2-1-out\"><a href=\"#2-1-out\" class=\"headerlink\" title=\"2.1 out\"></a>2.1 out</h3><p>缓冲区：Buffer，用碗吃饭<br>out对象：JspWriter类的实例<br>常用方法：</p>\n<ol>\n<li>void println()向客户端打印字符串</li>\n<li>void clear()清除缓冲区内容，在flush后使用会抛出异常</li>\n<li>void clearBuffer()不抛异常</li>\n<li>void flush()结算缓冲区内容到客户端</li>\n<li>int getBufferSize()返回缓冲区字节大小，不设则为0</li>\n<li>int getRemaining()返回缓冲区剩余空间</li>\n<li>boolean isAutoFlush()返回缓冲区满时，是自动清空还是抛出异常</li>\n<li>void close()关闭输出流</li>\n</ol>\n<hr>\n<h3 id=\"2-2-request\"><a href=\"#2-2-request\" class=\"headerlink\" title=\"2.2 request\"></a>2.2 request</h3><ul>\n<li>客户端请求封装在request对象中，通过它才能了解到客户的需求，然后做出响应。</li>\n<li>它是HttpServletRequest类的实例。</li>\n<li><p>request对象具有请求域，即完成客户端的请求之前一直有效。</p>\n</li>\n<li><p>request常用方法：</p>\n<ol>\n<li>String getParamenter(String name) 返回name指定参数的参数值</li>\n<li>String[] getParameterValues(String name)返回包含参数name的所有返回值</li>\n<li>void setAttribute(String,Object) 存储此请求中的属性</li>\n<li>object getAttribute(String name) 返回指定属性的属性值</li>\n<li>String getContentType() 得到请求体的MIME属性</li>\n<li>String getProtocol 返回请求用的协议类型及版本号</li>\n<li>String getServerName() 返回接受请求的服务器主机<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在作用域里设置键值对&lt;%request.setAttribute(&quot;pwd&quot;,&quot;123456&quot;); %&gt;</span><br><span class=\"line\">获取密码：&lt;%=request.getAttribute(&quot;pwd&quot;) %&gt;&lt;br&gt;</span><br><span class=\"line\">请求体的MIME类型：&lt;%=request.getContentType() %&gt;&lt;br&gt;</span><br><span class=\"line\">协议类型及版本号：&lt;%=request.getProtocol() %&gt;&lt;br&gt;</span><br><span class=\"line\">服务器主机名：&lt;%=request.getServerName() %&gt;&lt;br&gt;</span><br><span class=\"line\">服务器端口号：&lt;%=request.getServerPort() %&gt;&lt;br&gt;</span><br><span class=\"line\">请求文件的长度：&lt;%=request.getContentLength() %&gt;&lt;br&gt;</span><br><span class=\"line\">请求客户端的IP地址：&lt;%=request.getRemoteAddr() %&gt;&lt;br&gt;</span><br><span class=\"line\">&lt;!--只能获取静态的IP地址，动态的话获取不到--&gt;</span><br><span class=\"line\">请求的真实路径：&lt;%=request.getRealPath(&quot;request.jsp&quot;) %&gt;&lt;br&gt;</span><br><span class=\"line\">请求的上下文路径：&lt;%=request.getContextPath() %&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>中文乱码问题：<br>  post表单提交：request.setCharacterEncoding(“utf-8”);<br>  URL传参：修改server.xml文件</p>\n</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"1-JSP基础语法\"><a href=\"#1-JSP基础语法\" class=\"headerlink\" title=\"1. JSP基础语法\"></a>1. JSP基础语法</h2><hr>\n<h3 id=\"1-1-JSP指令\"><a href=\"#1-1-JSP指令\" class=\"headerlink\" title=\"1.1 JSP指令\"></a>1.1 JSP指令</h3><ul>\n<li>page：页面顶端，可有多个</li>\n<li>include：将外部文件嵌入当前jsp文件并解析</li>\n<li>taglib：使用标签库自定义的标签</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><h3 id=\"1-2-JSP脚本、声明、表达式\"><a href=\"#1-2-JSP脚本、声明、表达式\" class=\"headerlink\" title=\"1.2 JSP脚本、声明、表达式\"></a>1.2 JSP脚本、声明、表达式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% java脚本代码%&gt;</span><br><span class=\"line\">&lt;%! Java代码%&gt;//定义方法和变量，写入到</span><br><span class=\"line\">&lt;%=表达式 %&gt;//表达式不以分号结束</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"1-3-JSP页面生命周期\"><a href=\"#1-3-JSP页面生命周期\" class=\"headerlink\" title=\"1.3 JSP页面生命周期\"></a>1.3 JSP页面生命周期</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1=&gt;start: 用户第一次发出请求index.jsp</span><br><span class=\"line\">2=&gt;condition: 是否第一次请求</span><br><span class=\"line\">3=&gt;operation: JSP引擎把该JSP文件转换成一个servlet，</span><br><span class=\"line\">生成字节码文件并执行jspInit()</span><br><span class=\"line\">4=&gt;operation: 访问生成的字节码文件</span><br><span class=\"line\">5=&gt;end: 解析执行，jspService()</span><br><span class=\"line\"></span><br><span class=\"line\">1-&gt;2-&gt;3-&gt;5</span><br><span class=\"line\">2(yes)-&gt;3</span><br><span class=\"line\">2(no)-&gt;4-&gt;5</span><br></pre></td></tr></table></figure>\n<p>jspService()方法被调用来处理客户端请求。一请求一线程。</p>\n<hr>\n<h3 id=\"1-4-JSP四种范围对象的作用域\"><a href=\"#1-4-JSP四种范围对象的作用域\" class=\"headerlink\" title=\"1.4 JSP四种范围对象的作用域\"></a>1.4 JSP四种范围对象的作用域</h3><p>作用域范围从小到大顺序：<br>pageContext—request—session—application</p>\n<p>其中：<br><strong>pageContext：</strong><br>作用域仅限于当前页面对象，可以近似于理解为java的this对象，离开当前JSP页面（无论是redirect还是forward），则pageContext中的所有属性值就会丢失。<br><strong>request：</strong><br>作用域是同一个请求之内，在页面跳转时，如果通过forward方式跳转，则forward目标页面仍然可以拿到request中的属性值。如果通过redirect方式进行页面跳转，由于redirect相当于重新发出的请求，此种场景下，request中的属性值会丢失。<br><strong>session：</strong><br>session的作用域是在一个会话的生命周期内，会话失效，则session中的数据也随之丢失。<br><strong>application：</strong><br>作用域是最大的，只要服务器不停止，则application对象就一直存在，并且为所有会话所共享。</p>\n<hr>\n<h2 id=\"2-JSP内置对象\"><a href=\"#2-JSP内置对象\" class=\"headerlink\" title=\"2. JSP内置对象\"></a>2. JSP内置对象</h2><ol>\n<li>out</li>\n<li>request</li>\n<li>response</li>\n<li>session</li>\n<li>application</li>\n<li>Page</li>\n<li>pageContext</li>\n<li>exception</li>\n<li>config</li>\n</ol>\n<hr>\n<h3 id=\"2-1-out\"><a href=\"#2-1-out\" class=\"headerlink\" title=\"2.1 out\"></a>2.1 out</h3><p>缓冲区：Buffer，用碗吃饭<br>out对象：JspWriter类的实例<br>常用方法：</p>\n<ol>\n<li>void println()向客户端打印字符串</li>\n<li>void clear()清除缓冲区内容，在flush后使用会抛出异常</li>\n<li>void clearBuffer()不抛异常</li>\n<li>void flush()结算缓冲区内容到客户端</li>\n<li>int getBufferSize()返回缓冲区字节大小，不设则为0</li>\n<li>int getRemaining()返回缓冲区剩余空间</li>\n<li>boolean isAutoFlush()返回缓冲区满时，是自动清空还是抛出异常</li>\n<li>void close()关闭输出流</li>\n</ol>\n<hr>\n<h3 id=\"2-2-request\"><a href=\"#2-2-request\" class=\"headerlink\" title=\"2.2 request\"></a>2.2 request</h3><ul>\n<li>客户端请求封装在request对象中，通过它才能了解到客户的需求，然后做出响应。</li>\n<li>它是HttpServletRequest类的实例。</li>\n<li><p>request对象具有请求域，即完成客户端的请求之前一直有效。</p>\n</li>\n<li><p>request常用方法：</p>\n<ol>\n<li>String getParamenter(String name) 返回name指定参数的参数值</li>\n<li>String[] getParameterValues(String name)返回包含参数name的所有返回值</li>\n<li>void setAttribute(String,Object) 存储此请求中的属性</li>\n<li>object getAttribute(String name) 返回指定属性的属性值</li>\n<li>String getContentType() 得到请求体的MIME属性</li>\n<li>String getProtocol 返回请求用的协议类型及版本号</li>\n<li>String getServerName() 返回接受请求的服务器主机<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在作用域里设置键值对&lt;%request.setAttribute(&quot;pwd&quot;,&quot;123456&quot;); %&gt;</span><br><span class=\"line\">获取密码：&lt;%=request.getAttribute(&quot;pwd&quot;) %&gt;&lt;br&gt;</span><br><span class=\"line\">请求体的MIME类型：&lt;%=request.getContentType() %&gt;&lt;br&gt;</span><br><span class=\"line\">协议类型及版本号：&lt;%=request.getProtocol() %&gt;&lt;br&gt;</span><br><span class=\"line\">服务器主机名：&lt;%=request.getServerName() %&gt;&lt;br&gt;</span><br><span class=\"line\">服务器端口号：&lt;%=request.getServerPort() %&gt;&lt;br&gt;</span><br><span class=\"line\">请求文件的长度：&lt;%=request.getContentLength() %&gt;&lt;br&gt;</span><br><span class=\"line\">请求客户端的IP地址：&lt;%=request.getRemoteAddr() %&gt;&lt;br&gt;</span><br><span class=\"line\">&lt;!--只能获取静态的IP地址，动态的话获取不到--&gt;</span><br><span class=\"line\">请求的真实路径：&lt;%=request.getRealPath(&quot;request.jsp&quot;) %&gt;&lt;br&gt;</span><br><span class=\"line\">请求的上下文路径：&lt;%=request.getContextPath() %&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>中文乱码问题：<br>  post表单提交：request.setCharacterEncoding(“utf-8”);<br>  URL传参：修改server.xml文件</p>\n</li>\n</ul>\n<hr>"},{"title":"Yii拓展性","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n## 模块化技术\n---\n### 用Gii新建模块\n1. 进入Module Generator模块生成器\n2. Module Class： `app\\modules\\article\\Article`modules下article模块下文章类\nModule ID：`article`\n3. 添加配置项到config/web.php\n4. 生成 在basic下生成modules文件夹，包含Article.php和controllers、views文件夹\n5. 如果需要数据模型活动记录，需自行添加文件夹\n\n<!-- more -->\n---\n### 使用子模块-父模块调用\n控制器：\n```\npublic function actionIndex(){\n    //获取子模块\n    $article = \\YII::$app->getModule('article');\n    //调用子模块的操作\n    $article->runAction('default/index');   //控制器/操作\n}\n```\n---\n### 直接访问子模块-浏览器访问\n```\n?r=article/default/index //模块-控制器-操作\n```\n---\n### 创建子模块的子模块\nModule Class：`app\\modules\\article\\modules\\category\\Category`\nModule ID：`category`\n在父模块article/Article.php中添加配置\n```\npublic $controllerNamespace = 'app\\modules\\article\\controllers';\n\npublic function init()\n{\n    parent::init();\n    \n    $this->modules = [\n        'category' => [\n            'class' => 'app\\modules\\article\\modules\\category\\Category`,\n        ],\n    ];\n}\n```\n---\n## 事件机制\n---\n### 扫描式\n---\n### 绑定式\n---\n### 绑定式例子\n绑定关系写在控制器里，触发事件写在前置条件后\n猫叫触发老鼠跑\n在vendor下创建一个`animal`文件夹，创建`Cat.php`&`Mourse.php`&`Dog.php`\n1.`Cat.php`\n```\n<?php\nnamespace vendor\\animal;    //为了实现自动加载，写命名空间\nuse \\yii\\base\\Component;    //组件类\nuse \\yii\\base\\Event;        //事件类\n\nclass MyEvent extends Event{    //事件方法\n    public $message;\n}\n\nclass Cat extents Component{\n    public function shout(){\n        echo 'miao miao miao<br>';\n        $me = new MyEvent;\n        $me->message = 'hello my event<br>';\n        $shis->trigger('miao',$me);\n        //触发miao事件，一参是事件名，二参是触发事件附带的参数\n    }\n}\n```\n2.`Dog.php`\n```\n<?php\nnamespace vendor\\animal;\n\nclass Dog{\n    public function look(){\n    echo 'i am looking<br>';\n    }\n}\n```\n3.`Mourse.php`\n```\n<?php\nnamespace vendor\\animal;\n\nclass Mourse{\n    public function run(){\n    echo $me->message;\n    echo 'i am runing<br>';\n    }\n}\n```\n4.`AnimalController.php`\n```\nnamespace app\\controllers;\nuse yii\\web\\Controller;\nuse vendor\\animal\\Cat;  //告诉程序猫和老鼠在哪个命名空间下\nuse vendor\\animal\\Mourse;\nuse vendor\\animal\\Dog;\nuse \\yii\\base\\Event;    //类级别的事件管理需要使用event\n\nclass AnimalController extends Controller{\n    public function actionIndex(){\n        $cat = new Cat;\n        $cat2 = new Cat;\n        $mourse = new Mourse;\n        $dog = new Dog;\n        \n        $cat->on('miao',[$mourse,'run']);   //对象级别的事件管理：对特定的对象起作用(事件名,[对象,方法],参数)\n        $cat->on('miao',[$dog,'look']);     //component组件类的捆绑方法,把miao和老鼠的run和狗的look进行绑定\n        $cat->off('miao',[$dog,'look']);    //解绑\n        \n        Event::on(Cat::className(),'miao',[$mourse,'run']);//类也可写成`vendor\\animal\\Cat`\n        //类级事件绑定,所有猫叫都会触发(类名,事件名,[对象,方法],参数)\n        \n        Event::on(Cat::className(),'miao',function(){\n            echo 'miao event has triggered<br>';\n        }); //也可以触发匿名函数，实现监听\n        \n        $cat->shout();\n        $cat2->shout();\n    }\n}\n```\n---\n## Mixin\n使用行为拓展类和对象\n---\n### 类混合\n用行为类往一个类中注入新的方法和属性\n1.basic下新建behaviors文件夹下新建`Behavior1.php`\n```\n<?php\nnamespace app\\Behaviors;    //规定命名空间\nuse yii\\base\\Behavior;  //行为类\nclass Behavior1 extends Behavior{   //行为1里有 一个字段和一个方法\n    protected $height;\n    public function eat(){\n        echo 'dog eat<br>';\n    }\n    \n    public function events(){\n        return[\n            'wang' =>'shout'    //行为1接收wang事件，wang事件会触发shout\n        ];\n    }\n    \n    public function shout($event){  //$event 是 yii\\base\\Event 或其子类的对象\n        echo 'wang wang wang<br>';\n    }\n}\n```\n2.为`Dog.php`注入行为\n```\n<?php\nnamespace vendor\\animal;\nuse app\\behaviors\\Behavior1;\nuse YII\\base\\Component;         //使类 拥有处理事件，转发事件，接收行为 的能力\nclass Dog extends Component{    //使用行为，需继承Component\n\n    public function behaviors(){    //为Dog类添加 行为1\n        return [                    //数组：可以添加多个行为\n            Behavior1::className(), //添加了eat方法\n        ];\n    }\n    \n    public function look(){\n        echo 'i am looking<br>';\n    }\n}\n```\n3.`AnimalController.php`\n```\nnamespace app\\controllers;\nuse yii\\web\\Controller;\nuse vendor\\animal\\Dog;\n\nclass AnimalController extends Controller{\n    public function actionIndex(){\n        $dog = new Dog;\n        $dog->look();\n        $dog->eat();    //添加后就可以直接使用它了\n        //echo $dog->height = '15cm'; //报错，因为dog和行为1不是继承，而是注入关系。\n        $dog->trigger('wang');  //让这只狗触发wang事件\n    }\n}\n```\n---\n### 对象混合\n把别的对象的属性和方法注入到想用的对象\n\n\n\n\n\n\n\n\n","source":"_posts/Yii拓展性.md","raw":"---\ntitle: Yii拓展性\ndate: 2019-01-21 10:26:49\ntags: Yii\n---\n\n---\n## 模块化技术\n---\n### 用Gii新建模块\n1. 进入Module Generator模块生成器\n2. Module Class： `app\\modules\\article\\Article`modules下article模块下文章类\nModule ID：`article`\n3. 添加配置项到config/web.php\n4. 生成 在basic下生成modules文件夹，包含Article.php和controllers、views文件夹\n5. 如果需要数据模型活动记录，需自行添加文件夹\n\n<!-- more -->\n---\n### 使用子模块-父模块调用\n控制器：\n```\npublic function actionIndex(){\n    //获取子模块\n    $article = \\YII::$app->getModule('article');\n    //调用子模块的操作\n    $article->runAction('default/index');   //控制器/操作\n}\n```\n---\n### 直接访问子模块-浏览器访问\n```\n?r=article/default/index //模块-控制器-操作\n```\n---\n### 创建子模块的子模块\nModule Class：`app\\modules\\article\\modules\\category\\Category`\nModule ID：`category`\n在父模块article/Article.php中添加配置\n```\npublic $controllerNamespace = 'app\\modules\\article\\controllers';\n\npublic function init()\n{\n    parent::init();\n    \n    $this->modules = [\n        'category' => [\n            'class' => 'app\\modules\\article\\modules\\category\\Category`,\n        ],\n    ];\n}\n```\n---\n## 事件机制\n---\n### 扫描式\n---\n### 绑定式\n---\n### 绑定式例子\n绑定关系写在控制器里，触发事件写在前置条件后\n猫叫触发老鼠跑\n在vendor下创建一个`animal`文件夹，创建`Cat.php`&`Mourse.php`&`Dog.php`\n1.`Cat.php`\n```\n<?php\nnamespace vendor\\animal;    //为了实现自动加载，写命名空间\nuse \\yii\\base\\Component;    //组件类\nuse \\yii\\base\\Event;        //事件类\n\nclass MyEvent extends Event{    //事件方法\n    public $message;\n}\n\nclass Cat extents Component{\n    public function shout(){\n        echo 'miao miao miao<br>';\n        $me = new MyEvent;\n        $me->message = 'hello my event<br>';\n        $shis->trigger('miao',$me);\n        //触发miao事件，一参是事件名，二参是触发事件附带的参数\n    }\n}\n```\n2.`Dog.php`\n```\n<?php\nnamespace vendor\\animal;\n\nclass Dog{\n    public function look(){\n    echo 'i am looking<br>';\n    }\n}\n```\n3.`Mourse.php`\n```\n<?php\nnamespace vendor\\animal;\n\nclass Mourse{\n    public function run(){\n    echo $me->message;\n    echo 'i am runing<br>';\n    }\n}\n```\n4.`AnimalController.php`\n```\nnamespace app\\controllers;\nuse yii\\web\\Controller;\nuse vendor\\animal\\Cat;  //告诉程序猫和老鼠在哪个命名空间下\nuse vendor\\animal\\Mourse;\nuse vendor\\animal\\Dog;\nuse \\yii\\base\\Event;    //类级别的事件管理需要使用event\n\nclass AnimalController extends Controller{\n    public function actionIndex(){\n        $cat = new Cat;\n        $cat2 = new Cat;\n        $mourse = new Mourse;\n        $dog = new Dog;\n        \n        $cat->on('miao',[$mourse,'run']);   //对象级别的事件管理：对特定的对象起作用(事件名,[对象,方法],参数)\n        $cat->on('miao',[$dog,'look']);     //component组件类的捆绑方法,把miao和老鼠的run和狗的look进行绑定\n        $cat->off('miao',[$dog,'look']);    //解绑\n        \n        Event::on(Cat::className(),'miao',[$mourse,'run']);//类也可写成`vendor\\animal\\Cat`\n        //类级事件绑定,所有猫叫都会触发(类名,事件名,[对象,方法],参数)\n        \n        Event::on(Cat::className(),'miao',function(){\n            echo 'miao event has triggered<br>';\n        }); //也可以触发匿名函数，实现监听\n        \n        $cat->shout();\n        $cat2->shout();\n    }\n}\n```\n---\n## Mixin\n使用行为拓展类和对象\n---\n### 类混合\n用行为类往一个类中注入新的方法和属性\n1.basic下新建behaviors文件夹下新建`Behavior1.php`\n```\n<?php\nnamespace app\\Behaviors;    //规定命名空间\nuse yii\\base\\Behavior;  //行为类\nclass Behavior1 extends Behavior{   //行为1里有 一个字段和一个方法\n    protected $height;\n    public function eat(){\n        echo 'dog eat<br>';\n    }\n    \n    public function events(){\n        return[\n            'wang' =>'shout'    //行为1接收wang事件，wang事件会触发shout\n        ];\n    }\n    \n    public function shout($event){  //$event 是 yii\\base\\Event 或其子类的对象\n        echo 'wang wang wang<br>';\n    }\n}\n```\n2.为`Dog.php`注入行为\n```\n<?php\nnamespace vendor\\animal;\nuse app\\behaviors\\Behavior1;\nuse YII\\base\\Component;         //使类 拥有处理事件，转发事件，接收行为 的能力\nclass Dog extends Component{    //使用行为，需继承Component\n\n    public function behaviors(){    //为Dog类添加 行为1\n        return [                    //数组：可以添加多个行为\n            Behavior1::className(), //添加了eat方法\n        ];\n    }\n    \n    public function look(){\n        echo 'i am looking<br>';\n    }\n}\n```\n3.`AnimalController.php`\n```\nnamespace app\\controllers;\nuse yii\\web\\Controller;\nuse vendor\\animal\\Dog;\n\nclass AnimalController extends Controller{\n    public function actionIndex(){\n        $dog = new Dog;\n        $dog->look();\n        $dog->eat();    //添加后就可以直接使用它了\n        //echo $dog->height = '15cm'; //报错，因为dog和行为1不是继承，而是注入关系。\n        $dog->trigger('wang');  //让这只狗触发wang事件\n    }\n}\n```\n---\n### 对象混合\n把别的对象的属性和方法注入到想用的对象\n\n\n\n\n\n\n\n\n","slug":"Yii拓展性","published":1,"updated":"2019-01-21T06:34:04.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642pxt0004y0oo2umihdvk","content":"<hr>\n<h2 id=\"模块化技术\"><a href=\"#模块化技术\" class=\"headerlink\" title=\"模块化技术\"></a>模块化技术</h2><hr>\n<h3 id=\"用Gii新建模块\"><a href=\"#用Gii新建模块\" class=\"headerlink\" title=\"用Gii新建模块\"></a>用Gii新建模块</h3><ol>\n<li>进入Module Generator模块生成器</li>\n<li>Module Class： <code>app\\modules\\article\\Article</code>modules下article模块下文章类<br>Module ID：<code>article</code></li>\n<li>添加配置项到config/web.php</li>\n<li>生成 在basic下生成modules文件夹，包含Article.php和controllers、views文件夹</li>\n<li>如果需要数据模型活动记录，需自行添加文件夹</li>\n</ol>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h3 id=\"使用子模块-父模块调用\"><a href=\"#使用子模块-父模块调用\" class=\"headerlink\" title=\"使用子模块-父模块调用\"></a>使用子模块-父模块调用</h3><p>控制器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function actionIndex()&#123;</span><br><span class=\"line\">    //获取子模块</span><br><span class=\"line\">    $article = \\YII::$app-&gt;getModule(&apos;article&apos;);</span><br><span class=\"line\">    //调用子模块的操作</span><br><span class=\"line\">    $article-&gt;runAction(&apos;default/index&apos;);   //控制器/操作</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"直接访问子模块-浏览器访问\"><a href=\"#直接访问子模块-浏览器访问\" class=\"headerlink\" title=\"直接访问子模块-浏览器访问\"></a>直接访问子模块-浏览器访问</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?r=article/default/index //模块-控制器-操作</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"创建子模块的子模块\"><a href=\"#创建子模块的子模块\" class=\"headerlink\" title=\"创建子模块的子模块\"></a>创建子模块的子模块</h3><p>Module Class：<code>app\\modules\\article\\modules\\category\\Category</code><br>Module ID：<code>category</code><br>在父模块article/Article.php中添加配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public $controllerNamespace = &apos;app\\modules\\article\\controllers&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">public function init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    parent::init();</span><br><span class=\"line\">    </span><br><span class=\"line\">    $this-&gt;modules = [</span><br><span class=\"line\">        &apos;category&apos; =&gt; [</span><br><span class=\"line\">            &apos;class&apos; =&gt; &apos;app\\modules\\article\\modules\\category\\Category`,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"事件机制\"><a href=\"#事件机制\" class=\"headerlink\" title=\"事件机制\"></a>事件机制</h2><hr>\n<h3 id=\"扫描式\"><a href=\"#扫描式\" class=\"headerlink\" title=\"扫描式\"></a>扫描式</h3><hr>\n<h3 id=\"绑定式\"><a href=\"#绑定式\" class=\"headerlink\" title=\"绑定式\"></a>绑定式</h3><hr>\n<h3 id=\"绑定式例子\"><a href=\"#绑定式例子\" class=\"headerlink\" title=\"绑定式例子\"></a>绑定式例子</h3><p>绑定关系写在控制器里，触发事件写在前置条件后<br>猫叫触发老鼠跑<br>在vendor下创建一个<code>animal</code>文件夹，创建<code>Cat.php</code>&amp;<code>Mourse.php</code>&amp;<code>Dog.php</code><br>1.<code>Cat.php</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace vendor\\animal;    //为了实现自动加载，写命名空间</span><br><span class=\"line\">use \\yii\\base\\Component;    //组件类</span><br><span class=\"line\">use \\yii\\base\\Event;        //事件类</span><br><span class=\"line\"></span><br><span class=\"line\">class MyEvent extends Event&#123;    //事件方法</span><br><span class=\"line\">    public $message;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Cat extents Component&#123;</span><br><span class=\"line\">    public function shout()&#123;</span><br><span class=\"line\">        echo &apos;miao miao miao&lt;br&gt;&apos;;</span><br><span class=\"line\">        $me = new MyEvent;</span><br><span class=\"line\">        $me-&gt;message = &apos;hello my event&lt;br&gt;&apos;;</span><br><span class=\"line\">        $shis-&gt;trigger(&apos;miao&apos;,$me);</span><br><span class=\"line\">        //触发miao事件，一参是事件名，二参是触发事件附带的参数</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.<code>Dog.php</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace vendor\\animal;</span><br><span class=\"line\"></span><br><span class=\"line\">class Dog&#123;</span><br><span class=\"line\">    public function look()&#123;</span><br><span class=\"line\">    echo &apos;i am looking&lt;br&gt;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.<code>Mourse.php</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace vendor\\animal;</span><br><span class=\"line\"></span><br><span class=\"line\">class Mourse&#123;</span><br><span class=\"line\">    public function run()&#123;</span><br><span class=\"line\">    echo $me-&gt;message;</span><br><span class=\"line\">    echo &apos;i am runing&lt;br&gt;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.<code>AnimalController.php</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace app\\controllers;</span><br><span class=\"line\">use yii\\web\\Controller;</span><br><span class=\"line\">use vendor\\animal\\Cat;  //告诉程序猫和老鼠在哪个命名空间下</span><br><span class=\"line\">use vendor\\animal\\Mourse;</span><br><span class=\"line\">use vendor\\animal\\Dog;</span><br><span class=\"line\">use \\yii\\base\\Event;    //类级别的事件管理需要使用event</span><br><span class=\"line\"></span><br><span class=\"line\">class AnimalController extends Controller&#123;</span><br><span class=\"line\">    public function actionIndex()&#123;</span><br><span class=\"line\">        $cat = new Cat;</span><br><span class=\"line\">        $cat2 = new Cat;</span><br><span class=\"line\">        $mourse = new Mourse;</span><br><span class=\"line\">        $dog = new Dog;</span><br><span class=\"line\">        </span><br><span class=\"line\">        $cat-&gt;on(&apos;miao&apos;,[$mourse,&apos;run&apos;]);   //对象级别的事件管理：对特定的对象起作用(事件名,[对象,方法],参数)</span><br><span class=\"line\">        $cat-&gt;on(&apos;miao&apos;,[$dog,&apos;look&apos;]);     //component组件类的捆绑方法,把miao和老鼠的run和狗的look进行绑定</span><br><span class=\"line\">        $cat-&gt;off(&apos;miao&apos;,[$dog,&apos;look&apos;]);    //解绑</span><br><span class=\"line\">        </span><br><span class=\"line\">        Event::on(Cat::className(),&apos;miao&apos;,[$mourse,&apos;run&apos;]);//类也可写成`vendor\\animal\\Cat`</span><br><span class=\"line\">        //类级事件绑定,所有猫叫都会触发(类名,事件名,[对象,方法],参数)</span><br><span class=\"line\">        </span><br><span class=\"line\">        Event::on(Cat::className(),&apos;miao&apos;,function()&#123;</span><br><span class=\"line\">            echo &apos;miao event has triggered&lt;br&gt;&apos;;</span><br><span class=\"line\">        &#125;); //也可以触发匿名函数，实现监听</span><br><span class=\"line\">        </span><br><span class=\"line\">        $cat-&gt;shout();</span><br><span class=\"line\">        $cat2-&gt;shout();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Mixin\"><a href=\"#Mixin\" class=\"headerlink\" title=\"Mixin\"></a>Mixin</h2><h2 id=\"使用行为拓展类和对象\"><a href=\"#使用行为拓展类和对象\" class=\"headerlink\" title=\"使用行为拓展类和对象\"></a>使用行为拓展类和对象</h2><h3 id=\"类混合\"><a href=\"#类混合\" class=\"headerlink\" title=\"类混合\"></a>类混合</h3><p>用行为类往一个类中注入新的方法和属性<br>1.basic下新建behaviors文件夹下新建<code>Behavior1.php</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace app\\Behaviors;    //规定命名空间</span><br><span class=\"line\">use yii\\base\\Behavior;  //行为类</span><br><span class=\"line\">class Behavior1 extends Behavior&#123;   //行为1里有 一个字段和一个方法</span><br><span class=\"line\">    protected $height;</span><br><span class=\"line\">    public function eat()&#123;</span><br><span class=\"line\">        echo &apos;dog eat&lt;br&gt;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function events()&#123;</span><br><span class=\"line\">        return[</span><br><span class=\"line\">            &apos;wang&apos; =&gt;&apos;shout&apos;    //行为1接收wang事件，wang事件会触发shout</span><br><span class=\"line\">        ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function shout($event)&#123;  //$event 是 yii\\base\\Event 或其子类的对象</span><br><span class=\"line\">        echo &apos;wang wang wang&lt;br&gt;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.为<code>Dog.php</code>注入行为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace vendor\\animal;</span><br><span class=\"line\">use app\\behaviors\\Behavior1;</span><br><span class=\"line\">use YII\\base\\Component;         //使类 拥有处理事件，转发事件，接收行为 的能力</span><br><span class=\"line\">class Dog extends Component&#123;    //使用行为，需继承Component</span><br><span class=\"line\"></span><br><span class=\"line\">    public function behaviors()&#123;    //为Dog类添加 行为1</span><br><span class=\"line\">        return [                    //数组：可以添加多个行为</span><br><span class=\"line\">            Behavior1::className(), //添加了eat方法</span><br><span class=\"line\">        ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function look()&#123;</span><br><span class=\"line\">        echo &apos;i am looking&lt;br&gt;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.<code>AnimalController.php</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace app\\controllers;</span><br><span class=\"line\">use yii\\web\\Controller;</span><br><span class=\"line\">use vendor\\animal\\Dog;</span><br><span class=\"line\"></span><br><span class=\"line\">class AnimalController extends Controller&#123;</span><br><span class=\"line\">    public function actionIndex()&#123;</span><br><span class=\"line\">        $dog = new Dog;</span><br><span class=\"line\">        $dog-&gt;look();</span><br><span class=\"line\">        $dog-&gt;eat();    //添加后就可以直接使用它了</span><br><span class=\"line\">        //echo $dog-&gt;height = &apos;15cm&apos;; //报错，因为dog和行为1不是继承，而是注入关系。</span><br><span class=\"line\">        $dog-&gt;trigger(&apos;wang&apos;);  //让这只狗触发wang事件</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"对象混合\"><a href=\"#对象混合\" class=\"headerlink\" title=\"对象混合\"></a>对象混合</h3><p>把别的对象的属性和方法注入到想用的对象</p>\n","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"模块化技术\"><a href=\"#模块化技术\" class=\"headerlink\" title=\"模块化技术\"></a>模块化技术</h2><hr>\n<h3 id=\"用Gii新建模块\"><a href=\"#用Gii新建模块\" class=\"headerlink\" title=\"用Gii新建模块\"></a>用Gii新建模块</h3><ol>\n<li>进入Module Generator模块生成器</li>\n<li>Module Class： <code>app\\modules\\article\\Article</code>modules下article模块下文章类<br>Module ID：<code>article</code></li>\n<li>添加配置项到config/web.php</li>\n<li>生成 在basic下生成modules文件夹，包含Article.php和controllers、views文件夹</li>\n<li>如果需要数据模型活动记录，需自行添加文件夹</li>\n</ol>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><h3 id=\"使用子模块-父模块调用\"><a href=\"#使用子模块-父模块调用\" class=\"headerlink\" title=\"使用子模块-父模块调用\"></a>使用子模块-父模块调用</h3><p>控制器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function actionIndex()&#123;</span><br><span class=\"line\">    //获取子模块</span><br><span class=\"line\">    $article = \\YII::$app-&gt;getModule(&apos;article&apos;);</span><br><span class=\"line\">    //调用子模块的操作</span><br><span class=\"line\">    $article-&gt;runAction(&apos;default/index&apos;);   //控制器/操作</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"直接访问子模块-浏览器访问\"><a href=\"#直接访问子模块-浏览器访问\" class=\"headerlink\" title=\"直接访问子模块-浏览器访问\"></a>直接访问子模块-浏览器访问</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?r=article/default/index //模块-控制器-操作</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"创建子模块的子模块\"><a href=\"#创建子模块的子模块\" class=\"headerlink\" title=\"创建子模块的子模块\"></a>创建子模块的子模块</h3><p>Module Class：<code>app\\modules\\article\\modules\\category\\Category</code><br>Module ID：<code>category</code><br>在父模块article/Article.php中添加配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public $controllerNamespace = &apos;app\\modules\\article\\controllers&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">public function init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    parent::init();</span><br><span class=\"line\">    </span><br><span class=\"line\">    $this-&gt;modules = [</span><br><span class=\"line\">        &apos;category&apos; =&gt; [</span><br><span class=\"line\">            &apos;class&apos; =&gt; &apos;app\\modules\\article\\modules\\category\\Category`,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"事件机制\"><a href=\"#事件机制\" class=\"headerlink\" title=\"事件机制\"></a>事件机制</h2><hr>\n<h3 id=\"扫描式\"><a href=\"#扫描式\" class=\"headerlink\" title=\"扫描式\"></a>扫描式</h3><hr>\n<h3 id=\"绑定式\"><a href=\"#绑定式\" class=\"headerlink\" title=\"绑定式\"></a>绑定式</h3><hr>\n<h3 id=\"绑定式例子\"><a href=\"#绑定式例子\" class=\"headerlink\" title=\"绑定式例子\"></a>绑定式例子</h3><p>绑定关系写在控制器里，触发事件写在前置条件后<br>猫叫触发老鼠跑<br>在vendor下创建一个<code>animal</code>文件夹，创建<code>Cat.php</code>&amp;<code>Mourse.php</code>&amp;<code>Dog.php</code><br>1.<code>Cat.php</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace vendor\\animal;    //为了实现自动加载，写命名空间</span><br><span class=\"line\">use \\yii\\base\\Component;    //组件类</span><br><span class=\"line\">use \\yii\\base\\Event;        //事件类</span><br><span class=\"line\"></span><br><span class=\"line\">class MyEvent extends Event&#123;    //事件方法</span><br><span class=\"line\">    public $message;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Cat extents Component&#123;</span><br><span class=\"line\">    public function shout()&#123;</span><br><span class=\"line\">        echo &apos;miao miao miao&lt;br&gt;&apos;;</span><br><span class=\"line\">        $me = new MyEvent;</span><br><span class=\"line\">        $me-&gt;message = &apos;hello my event&lt;br&gt;&apos;;</span><br><span class=\"line\">        $shis-&gt;trigger(&apos;miao&apos;,$me);</span><br><span class=\"line\">        //触发miao事件，一参是事件名，二参是触发事件附带的参数</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.<code>Dog.php</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace vendor\\animal;</span><br><span class=\"line\"></span><br><span class=\"line\">class Dog&#123;</span><br><span class=\"line\">    public function look()&#123;</span><br><span class=\"line\">    echo &apos;i am looking&lt;br&gt;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.<code>Mourse.php</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace vendor\\animal;</span><br><span class=\"line\"></span><br><span class=\"line\">class Mourse&#123;</span><br><span class=\"line\">    public function run()&#123;</span><br><span class=\"line\">    echo $me-&gt;message;</span><br><span class=\"line\">    echo &apos;i am runing&lt;br&gt;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.<code>AnimalController.php</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace app\\controllers;</span><br><span class=\"line\">use yii\\web\\Controller;</span><br><span class=\"line\">use vendor\\animal\\Cat;  //告诉程序猫和老鼠在哪个命名空间下</span><br><span class=\"line\">use vendor\\animal\\Mourse;</span><br><span class=\"line\">use vendor\\animal\\Dog;</span><br><span class=\"line\">use \\yii\\base\\Event;    //类级别的事件管理需要使用event</span><br><span class=\"line\"></span><br><span class=\"line\">class AnimalController extends Controller&#123;</span><br><span class=\"line\">    public function actionIndex()&#123;</span><br><span class=\"line\">        $cat = new Cat;</span><br><span class=\"line\">        $cat2 = new Cat;</span><br><span class=\"line\">        $mourse = new Mourse;</span><br><span class=\"line\">        $dog = new Dog;</span><br><span class=\"line\">        </span><br><span class=\"line\">        $cat-&gt;on(&apos;miao&apos;,[$mourse,&apos;run&apos;]);   //对象级别的事件管理：对特定的对象起作用(事件名,[对象,方法],参数)</span><br><span class=\"line\">        $cat-&gt;on(&apos;miao&apos;,[$dog,&apos;look&apos;]);     //component组件类的捆绑方法,把miao和老鼠的run和狗的look进行绑定</span><br><span class=\"line\">        $cat-&gt;off(&apos;miao&apos;,[$dog,&apos;look&apos;]);    //解绑</span><br><span class=\"line\">        </span><br><span class=\"line\">        Event::on(Cat::className(),&apos;miao&apos;,[$mourse,&apos;run&apos;]);//类也可写成`vendor\\animal\\Cat`</span><br><span class=\"line\">        //类级事件绑定,所有猫叫都会触发(类名,事件名,[对象,方法],参数)</span><br><span class=\"line\">        </span><br><span class=\"line\">        Event::on(Cat::className(),&apos;miao&apos;,function()&#123;</span><br><span class=\"line\">            echo &apos;miao event has triggered&lt;br&gt;&apos;;</span><br><span class=\"line\">        &#125;); //也可以触发匿名函数，实现监听</span><br><span class=\"line\">        </span><br><span class=\"line\">        $cat-&gt;shout();</span><br><span class=\"line\">        $cat2-&gt;shout();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"Mixin\"><a href=\"#Mixin\" class=\"headerlink\" title=\"Mixin\"></a>Mixin</h2><h2 id=\"使用行为拓展类和对象\"><a href=\"#使用行为拓展类和对象\" class=\"headerlink\" title=\"使用行为拓展类和对象\"></a>使用行为拓展类和对象</h2><h3 id=\"类混合\"><a href=\"#类混合\" class=\"headerlink\" title=\"类混合\"></a>类混合</h3><p>用行为类往一个类中注入新的方法和属性<br>1.basic下新建behaviors文件夹下新建<code>Behavior1.php</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace app\\Behaviors;    //规定命名空间</span><br><span class=\"line\">use yii\\base\\Behavior;  //行为类</span><br><span class=\"line\">class Behavior1 extends Behavior&#123;   //行为1里有 一个字段和一个方法</span><br><span class=\"line\">    protected $height;</span><br><span class=\"line\">    public function eat()&#123;</span><br><span class=\"line\">        echo &apos;dog eat&lt;br&gt;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function events()&#123;</span><br><span class=\"line\">        return[</span><br><span class=\"line\">            &apos;wang&apos; =&gt;&apos;shout&apos;    //行为1接收wang事件，wang事件会触发shout</span><br><span class=\"line\">        ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function shout($event)&#123;  //$event 是 yii\\base\\Event 或其子类的对象</span><br><span class=\"line\">        echo &apos;wang wang wang&lt;br&gt;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.为<code>Dog.php</code>注入行为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace vendor\\animal;</span><br><span class=\"line\">use app\\behaviors\\Behavior1;</span><br><span class=\"line\">use YII\\base\\Component;         //使类 拥有处理事件，转发事件，接收行为 的能力</span><br><span class=\"line\">class Dog extends Component&#123;    //使用行为，需继承Component</span><br><span class=\"line\"></span><br><span class=\"line\">    public function behaviors()&#123;    //为Dog类添加 行为1</span><br><span class=\"line\">        return [                    //数组：可以添加多个行为</span><br><span class=\"line\">            Behavior1::className(), //添加了eat方法</span><br><span class=\"line\">        ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function look()&#123;</span><br><span class=\"line\">        echo &apos;i am looking&lt;br&gt;&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.<code>AnimalController.php</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace app\\controllers;</span><br><span class=\"line\">use yii\\web\\Controller;</span><br><span class=\"line\">use vendor\\animal\\Dog;</span><br><span class=\"line\"></span><br><span class=\"line\">class AnimalController extends Controller&#123;</span><br><span class=\"line\">    public function actionIndex()&#123;</span><br><span class=\"line\">        $dog = new Dog;</span><br><span class=\"line\">        $dog-&gt;look();</span><br><span class=\"line\">        $dog-&gt;eat();    //添加后就可以直接使用它了</span><br><span class=\"line\">        //echo $dog-&gt;height = &apos;15cm&apos;; //报错，因为dog和行为1不是继承，而是注入关系。</span><br><span class=\"line\">        $dog-&gt;trigger(&apos;wang&apos;);  //让这只狗触发wang事件</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"对象混合\"><a href=\"#对象混合\" class=\"headerlink\" title=\"对象混合\"></a>对象混合</h3><p>把别的对象的属性和方法注入到想用的对象</p>"},{"title":"Yii高效篇","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n## 延迟加载\n---\n### 类的延迟加载\n原版：\n```\n<?php\nclass Class1{}  //空的Class1&Class2\n```\n<!-- more -->\n```\n<?php\nRequire('class\\Class1.php');\nrequire('class\\Class2.php');    //加载两个class\n\n$is_girl = $_GET['sex']==0?true : false;    //使用get方法传值\nif($is_girl){\n    echo 'This is a girl!';     //但其实只要其中一个\n    $class1 = new class1;\n}else{\n    echo 'not a girl';\n    $class2 = new Class2;\n}\n```\n优化：\n```\n<?php\n$is_girl = $_GET['sex']==0?true : false;\nif($is_girl){\n    echo 'This is a girl!';\n    Require('class\\Class1.php');        //延迟加载\n    $class1 = new class1;\n}else{\n    echo 'not a girl';\n    require('class\\Class2.php');\n    $class2 = new Class2;\n}\n```\n再优化：\n```\n<?php\nfunction my_loader($class){\n    require('class\\\\'.$class.'.php');   //双斜杠转义\n}\n\nspl_autoload_register('my_loader'); //自动加载注册my_loader函数\n\n$is_girl = $_GET['sex']==0?true : false;\nif($is_girl){\n    echo 'This is a girl!';\n    $class1 = new class1;   //遇见不认识的class1，运行my_loader\n}else{\n    echo 'not a girl';\n    $class2 = new Class2;\n}\n```\n---\n### 类的映射表机制\n```\n<?php\nnamespace app\\controllers;\n\nuse yii\\web\\Controller;\nuse app\\models\\Test;\nuse app\\models\\Order;\nuse app\\models\\Customer;    //用下面的映射进行转换\n\nclass TestController extends Controller\n{\n    public function actionIndex()\n    {\n        \\YII::$classMap['app\\models\\Order'] = 'D:\\phpProject\\basic\\models\\Customer.php';\n        //就能提高加载的速度\n        $order = new Order;\n    }\n}\n```\n---\n## 数据缓存\n---\n### 增删改查有效期\n控制器中：\n```\n$cache = \\YII::$app->cache;//获取缓存组件\n$cache->add('key1', 'hello world!',15);//往缓存中写数据，参三生存时间秒可选\n$cache->set('key1', 'hello world2',15);//修改数据（也能作为写入），参三生存时间秒可选\n$cache->delete('key');//删除数据\n$cache->flush();//清空数据\n$data = $cache->get('key1');//读缓存\nprint_r($data);\nvar_dump($data);\n```\n---\n### 数据缓存依赖\n文件依赖：\n```\n$cache = \\YII::$app->cache;\n$dependency = new \\yii\\caching\\FileDependency(['fileName'=>'hw.txt']);//设置依赖文件\n$cache->add('key1','hello world!',1500,$dependency);//为缓存设置依赖\nvar_dump($cache->get('key1'));//读缓存,如果文件被修改，显示bool(false)\n```\n表达式依赖：\n```\n$cache = \\YII::$app->cache;\n$dependency = new \\yii\\caching\\ExpressionDependency(\n    ['expression'=>'\\YII::$app->request->get(\"name\")']\n);//以get请求作为表达式，当该值发生变化，缓存即失效\n$cache->add('key1','hello world!',1500,$dependency);\nvar_dump($cache->get('key1'));\n```\nDb依赖\n```\n$cache = \\YII::$app->cache;\n$dependency = new \\yii\\caching\\DbDependency(\n    ['sql'=>'SELECT count(*) FROM yii.order']\n);\n$cache->add('key1', 'hello world!', 1500,$dependency);\nvar_dump($cache->get('key1'));\n```\n---\n## 片段缓存\n---\n### 介绍\n在控制器中使用视图，在视图中用beginCache endCache包围\n视图（views/test/index.php）：\n```\n<?php if($this->beginCache('cache_div')){?> //写上唯一id标识\n<div id='cache_div'>\n    <div>这里将会被缓存</div>\n</div>\n<?php $this->endCache();}?>\n\n<div id='no_cache_div'>\n    <div>这里不会被缓存</div>\n</div>\n```\n---\n### 过期时间\n```\n<?php if($this->beginCache('cache_div',['duration'=>30])){?>  <!--duration二参寿选-->\n    <div id='cache_div'>\n        <div>这里将会被缓存</div>\n    </div>\n<?php $this->endCache();}?>\n```\n---\n### 片段缓存的依赖设置\n```\n<?php\n    $dependency = [\n        'class' => 'yii\\caching\\FileDependency',    //缓存依赖类型\n        'fileName'=>'hw.txt'\n    ];\n?>\n<!--dependency-->\n<?php if($this->beginCache('cache_div',['dependency' => $dependency])){?>\n<div id='cache_div'>\n    <div>这里将会被缓存</div>\n</div>\n<?php $this->endCache();}?>\n```\n---\n### 缓存开关\n```\n<?php\n    $enabled = ture;\n?>\n<!--缓存开-->\n\n<?php if($this->beginCache('cache_div',['enabled' => $enabled])){?>\n<div id='cache_div'>\n    <div>这里将会被缓存</div>\n</div>\n<?php $this->endCache();}?>\n```\n---\n### 嵌套使用\n可配合其他属性使用比如时间,需要注意的是外层的冷却为过，内层修改是无法生效的\n```\n<?php if($this->beginCache('cache_div',['duration'=>10])){?>\n<div id='cache_div'>\n    <div>这里是外层缓存</div>\n    \n    <?php if($this->beginCache('cache_div',['duration'=>20])){?>\n        <div id='cache_div'>\n            <div>这里是内层缓存</div>\n        </div>\n    <?php $this->endCache();}?>\n    \n</div>\n<?php $this->endCache();}?>\n```\n---\n### 动态内容\n使用片段缓存时，可能会遇到一大段较为静态的内容中有少许动态内容的情况。例如，一个显示着菜单栏和当前用户名的页面头部。或是缓存的内容包含每次请求都需要执行的 PHP 代码。\n```\n<?php if ($this->beginCache($id1)) {?>\n\n    <!--...在此生成内容...-->\n\n<?php echo $this->renderDynamic('return Yii::$app->user->identity->name;');?>\n\n    <!--...在此生成内容...-->\n    \n<?php $this->endCache();}?>\n```\n---\n## 页面缓存\n在服务器端缓存整个页面的内容，可以在使用页面缓存的同时，使用片段缓存和 动态内容。\n\n---\n### behaviors()介绍\nbehaviors会在action之前执行\n```\npublic function behaviors(){\n    echo '1';\n    return[];\n}\npublic function actionIndex(){\n    echo '2';\n}\n```\n---\n### 介绍\n如果整个页面都不怎么会改动，可以使用页面缓存\nbehaviors用return[]告诉yii框架使用页面缓存\n```\npublic function behaviors(){\n    return[\n        [\n            'class' => 'yii\\filters\\PageCache',\n            'only' => ['index'], //数组成员可以多个\n            //只缓存index，在当前控制器中有多个action时有意义\n            'duration' => 60,\n            'variations' => [\n                \\Yii::$app->language,\n            ],\n            'dependency' => [\n                'class' => 'yii\\caching\\DbDependency',\n                'sql' => 'SELECT COUNT(*) FROM post',\n            ],\n        ]//上述代码表示页面缓存只在 index 动作时启用，页面内容最多被缓存 60 秒，会随着当前应用的语言更改而变化。如果文章总数发生变化则缓存的页面会失效。\n    ];\n}\n```\n---\n## http缓存\n利用客户端 缓存\n\n---\n```\npublic function behaviors()\n{\n    return [\n        [\n            'class' => 'yii\\filters\\HttpCache', //这是http缓存\n            'only' => ['index'],    //选\n            //用LM最后修改时间来判断是否发生更改\n            'lastModified' => function ($action, $params) {\n                return filemtime('hw.txt');\n            },\n            //用etag哈希值判断是否发生更改\n            'etagSeed' => function ($action, $params) {\n                $fp = fopen('hw.txt','r');  //以读取方式打开文件\n                $title = fgets($fp);    //读取第一行内容\n                fclose($fp);    //关闭文件\n                return $title;  //返回标题。如果标题未变，则使用缓存。\n            },\n        ],\n    ];\n}\n\npublic function actionIndex(){\n    $content = file_get_contents('hw.txt');\n    return $this->renderPartial('index',['new'=>$content]); //把hw里的文本传给index视图\n}\n```\n---","source":"_posts/Yii高效篇.md","raw":"---\ntitle: Yii高效篇\ndate: 2019-01-21 10:26:49\ntags: Yii\n---\n\n---\n## 延迟加载\n---\n### 类的延迟加载\n原版：\n```\n<?php\nclass Class1{}  //空的Class1&Class2\n```\n<!-- more -->\n```\n<?php\nRequire('class\\Class1.php');\nrequire('class\\Class2.php');    //加载两个class\n\n$is_girl = $_GET['sex']==0?true : false;    //使用get方法传值\nif($is_girl){\n    echo 'This is a girl!';     //但其实只要其中一个\n    $class1 = new class1;\n}else{\n    echo 'not a girl';\n    $class2 = new Class2;\n}\n```\n优化：\n```\n<?php\n$is_girl = $_GET['sex']==0?true : false;\nif($is_girl){\n    echo 'This is a girl!';\n    Require('class\\Class1.php');        //延迟加载\n    $class1 = new class1;\n}else{\n    echo 'not a girl';\n    require('class\\Class2.php');\n    $class2 = new Class2;\n}\n```\n再优化：\n```\n<?php\nfunction my_loader($class){\n    require('class\\\\'.$class.'.php');   //双斜杠转义\n}\n\nspl_autoload_register('my_loader'); //自动加载注册my_loader函数\n\n$is_girl = $_GET['sex']==0?true : false;\nif($is_girl){\n    echo 'This is a girl!';\n    $class1 = new class1;   //遇见不认识的class1，运行my_loader\n}else{\n    echo 'not a girl';\n    $class2 = new Class2;\n}\n```\n---\n### 类的映射表机制\n```\n<?php\nnamespace app\\controllers;\n\nuse yii\\web\\Controller;\nuse app\\models\\Test;\nuse app\\models\\Order;\nuse app\\models\\Customer;    //用下面的映射进行转换\n\nclass TestController extends Controller\n{\n    public function actionIndex()\n    {\n        \\YII::$classMap['app\\models\\Order'] = 'D:\\phpProject\\basic\\models\\Customer.php';\n        //就能提高加载的速度\n        $order = new Order;\n    }\n}\n```\n---\n## 数据缓存\n---\n### 增删改查有效期\n控制器中：\n```\n$cache = \\YII::$app->cache;//获取缓存组件\n$cache->add('key1', 'hello world!',15);//往缓存中写数据，参三生存时间秒可选\n$cache->set('key1', 'hello world2',15);//修改数据（也能作为写入），参三生存时间秒可选\n$cache->delete('key');//删除数据\n$cache->flush();//清空数据\n$data = $cache->get('key1');//读缓存\nprint_r($data);\nvar_dump($data);\n```\n---\n### 数据缓存依赖\n文件依赖：\n```\n$cache = \\YII::$app->cache;\n$dependency = new \\yii\\caching\\FileDependency(['fileName'=>'hw.txt']);//设置依赖文件\n$cache->add('key1','hello world!',1500,$dependency);//为缓存设置依赖\nvar_dump($cache->get('key1'));//读缓存,如果文件被修改，显示bool(false)\n```\n表达式依赖：\n```\n$cache = \\YII::$app->cache;\n$dependency = new \\yii\\caching\\ExpressionDependency(\n    ['expression'=>'\\YII::$app->request->get(\"name\")']\n);//以get请求作为表达式，当该值发生变化，缓存即失效\n$cache->add('key1','hello world!',1500,$dependency);\nvar_dump($cache->get('key1'));\n```\nDb依赖\n```\n$cache = \\YII::$app->cache;\n$dependency = new \\yii\\caching\\DbDependency(\n    ['sql'=>'SELECT count(*) FROM yii.order']\n);\n$cache->add('key1', 'hello world!', 1500,$dependency);\nvar_dump($cache->get('key1'));\n```\n---\n## 片段缓存\n---\n### 介绍\n在控制器中使用视图，在视图中用beginCache endCache包围\n视图（views/test/index.php）：\n```\n<?php if($this->beginCache('cache_div')){?> //写上唯一id标识\n<div id='cache_div'>\n    <div>这里将会被缓存</div>\n</div>\n<?php $this->endCache();}?>\n\n<div id='no_cache_div'>\n    <div>这里不会被缓存</div>\n</div>\n```\n---\n### 过期时间\n```\n<?php if($this->beginCache('cache_div',['duration'=>30])){?>  <!--duration二参寿选-->\n    <div id='cache_div'>\n        <div>这里将会被缓存</div>\n    </div>\n<?php $this->endCache();}?>\n```\n---\n### 片段缓存的依赖设置\n```\n<?php\n    $dependency = [\n        'class' => 'yii\\caching\\FileDependency',    //缓存依赖类型\n        'fileName'=>'hw.txt'\n    ];\n?>\n<!--dependency-->\n<?php if($this->beginCache('cache_div',['dependency' => $dependency])){?>\n<div id='cache_div'>\n    <div>这里将会被缓存</div>\n</div>\n<?php $this->endCache();}?>\n```\n---\n### 缓存开关\n```\n<?php\n    $enabled = ture;\n?>\n<!--缓存开-->\n\n<?php if($this->beginCache('cache_div',['enabled' => $enabled])){?>\n<div id='cache_div'>\n    <div>这里将会被缓存</div>\n</div>\n<?php $this->endCache();}?>\n```\n---\n### 嵌套使用\n可配合其他属性使用比如时间,需要注意的是外层的冷却为过，内层修改是无法生效的\n```\n<?php if($this->beginCache('cache_div',['duration'=>10])){?>\n<div id='cache_div'>\n    <div>这里是外层缓存</div>\n    \n    <?php if($this->beginCache('cache_div',['duration'=>20])){?>\n        <div id='cache_div'>\n            <div>这里是内层缓存</div>\n        </div>\n    <?php $this->endCache();}?>\n    \n</div>\n<?php $this->endCache();}?>\n```\n---\n### 动态内容\n使用片段缓存时，可能会遇到一大段较为静态的内容中有少许动态内容的情况。例如，一个显示着菜单栏和当前用户名的页面头部。或是缓存的内容包含每次请求都需要执行的 PHP 代码。\n```\n<?php if ($this->beginCache($id1)) {?>\n\n    <!--...在此生成内容...-->\n\n<?php echo $this->renderDynamic('return Yii::$app->user->identity->name;');?>\n\n    <!--...在此生成内容...-->\n    \n<?php $this->endCache();}?>\n```\n---\n## 页面缓存\n在服务器端缓存整个页面的内容，可以在使用页面缓存的同时，使用片段缓存和 动态内容。\n\n---\n### behaviors()介绍\nbehaviors会在action之前执行\n```\npublic function behaviors(){\n    echo '1';\n    return[];\n}\npublic function actionIndex(){\n    echo '2';\n}\n```\n---\n### 介绍\n如果整个页面都不怎么会改动，可以使用页面缓存\nbehaviors用return[]告诉yii框架使用页面缓存\n```\npublic function behaviors(){\n    return[\n        [\n            'class' => 'yii\\filters\\PageCache',\n            'only' => ['index'], //数组成员可以多个\n            //只缓存index，在当前控制器中有多个action时有意义\n            'duration' => 60,\n            'variations' => [\n                \\Yii::$app->language,\n            ],\n            'dependency' => [\n                'class' => 'yii\\caching\\DbDependency',\n                'sql' => 'SELECT COUNT(*) FROM post',\n            ],\n        ]//上述代码表示页面缓存只在 index 动作时启用，页面内容最多被缓存 60 秒，会随着当前应用的语言更改而变化。如果文章总数发生变化则缓存的页面会失效。\n    ];\n}\n```\n---\n## http缓存\n利用客户端 缓存\n\n---\n```\npublic function behaviors()\n{\n    return [\n        [\n            'class' => 'yii\\filters\\HttpCache', //这是http缓存\n            'only' => ['index'],    //选\n            //用LM最后修改时间来判断是否发生更改\n            'lastModified' => function ($action, $params) {\n                return filemtime('hw.txt');\n            },\n            //用etag哈希值判断是否发生更改\n            'etagSeed' => function ($action, $params) {\n                $fp = fopen('hw.txt','r');  //以读取方式打开文件\n                $title = fgets($fp);    //读取第一行内容\n                fclose($fp);    //关闭文件\n                return $title;  //返回标题。如果标题未变，则使用缓存。\n            },\n        ],\n    ];\n}\n\npublic function actionIndex(){\n    $content = file_get_contents('hw.txt');\n    return $this->renderPartial('index',['new'=>$content]); //把hw里的文本传给index视图\n}\n```\n---","slug":"Yii高效篇","published":1,"updated":"2019-01-21T06:34:04.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642pxu0005y0oojil6i4gy","content":"<hr>\n<h2 id=\"延迟加载\"><a href=\"#延迟加载\" class=\"headerlink\" title=\"延迟加载\"></a>延迟加载</h2><hr>\n<h3 id=\"类的延迟加载\"><a href=\"#类的延迟加载\" class=\"headerlink\" title=\"类的延迟加载\"></a>类的延迟加载</h3><p>原版：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Class1&#123;&#125;  //空的Class1&amp;Class2</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">Require(&apos;class\\Class1.php&apos;);</span><br><span class=\"line\">require(&apos;class\\Class2.php&apos;);    //加载两个class</span><br><span class=\"line\"></span><br><span class=\"line\">$is_girl = $_GET[&apos;sex&apos;]==0?true : false;    //使用get方法传值</span><br><span class=\"line\">if($is_girl)&#123;</span><br><span class=\"line\">    echo &apos;This is a girl!&apos;;     //但其实只要其中一个</span><br><span class=\"line\">    $class1 = new class1;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &apos;not a girl&apos;;</span><br><span class=\"line\">    $class2 = new Class2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优化：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$is_girl = $_GET[&apos;sex&apos;]==0?true : false;</span><br><span class=\"line\">if($is_girl)&#123;</span><br><span class=\"line\">    echo &apos;This is a girl!&apos;;</span><br><span class=\"line\">    Require(&apos;class\\Class1.php&apos;);        //延迟加载</span><br><span class=\"line\">    $class1 = new class1;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &apos;not a girl&apos;;</span><br><span class=\"line\">    require(&apos;class\\Class2.php&apos;);</span><br><span class=\"line\">    $class2 = new Class2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再优化：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">function my_loader($class)&#123;</span><br><span class=\"line\">    require(&apos;class\\\\&apos;.$class.&apos;.php&apos;);   //双斜杠转义</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">spl_autoload_register(&apos;my_loader&apos;); //自动加载注册my_loader函数</span><br><span class=\"line\"></span><br><span class=\"line\">$is_girl = $_GET[&apos;sex&apos;]==0?true : false;</span><br><span class=\"line\">if($is_girl)&#123;</span><br><span class=\"line\">    echo &apos;This is a girl!&apos;;</span><br><span class=\"line\">    $class1 = new class1;   //遇见不认识的class1，运行my_loader</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &apos;not a girl&apos;;</span><br><span class=\"line\">    $class2 = new Class2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"类的映射表机制\"><a href=\"#类的映射表机制\" class=\"headerlink\" title=\"类的映射表机制\"></a>类的映射表机制</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace app\\controllers;</span><br><span class=\"line\"></span><br><span class=\"line\">use yii\\web\\Controller;</span><br><span class=\"line\">use app\\models\\Test;</span><br><span class=\"line\">use app\\models\\Order;</span><br><span class=\"line\">use app\\models\\Customer;    //用下面的映射进行转换</span><br><span class=\"line\"></span><br><span class=\"line\">class TestController extends Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function actionIndex()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        \\YII::$classMap[&apos;app\\models\\Order&apos;] = &apos;D:\\phpProject\\basic\\models\\Customer.php&apos;;</span><br><span class=\"line\">        //就能提高加载的速度</span><br><span class=\"line\">        $order = new Order;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"数据缓存\"><a href=\"#数据缓存\" class=\"headerlink\" title=\"数据缓存\"></a>数据缓存</h2><hr>\n<h3 id=\"增删改查有效期\"><a href=\"#增删改查有效期\" class=\"headerlink\" title=\"增删改查有效期\"></a>增删改查有效期</h3><p>控制器中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cache = \\YII::$app-&gt;cache;//获取缓存组件</span><br><span class=\"line\">$cache-&gt;add(&apos;key1&apos;, &apos;hello world!&apos;,15);//往缓存中写数据，参三生存时间秒可选</span><br><span class=\"line\">$cache-&gt;set(&apos;key1&apos;, &apos;hello world2&apos;,15);//修改数据（也能作为写入），参三生存时间秒可选</span><br><span class=\"line\">$cache-&gt;delete(&apos;key&apos;);//删除数据</span><br><span class=\"line\">$cache-&gt;flush();//清空数据</span><br><span class=\"line\">$data = $cache-&gt;get(&apos;key1&apos;);//读缓存</span><br><span class=\"line\">print_r($data);</span><br><span class=\"line\">var_dump($data);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"数据缓存依赖\"><a href=\"#数据缓存依赖\" class=\"headerlink\" title=\"数据缓存依赖\"></a>数据缓存依赖</h3><p>文件依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cache = \\YII::$app-&gt;cache;</span><br><span class=\"line\">$dependency = new \\yii\\caching\\FileDependency([&apos;fileName&apos;=&gt;&apos;hw.txt&apos;]);//设置依赖文件</span><br><span class=\"line\">$cache-&gt;add(&apos;key1&apos;,&apos;hello world!&apos;,1500,$dependency);//为缓存设置依赖</span><br><span class=\"line\">var_dump($cache-&gt;get(&apos;key1&apos;));//读缓存,如果文件被修改，显示bool(false)</span><br></pre></td></tr></table></figure></p>\n<p>表达式依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cache = \\YII::$app-&gt;cache;</span><br><span class=\"line\">$dependency = new \\yii\\caching\\ExpressionDependency(</span><br><span class=\"line\">    [&apos;expression&apos;=&gt;&apos;\\YII::$app-&gt;request-&gt;get(&quot;name&quot;)&apos;]</span><br><span class=\"line\">);//以get请求作为表达式，当该值发生变化，缓存即失效</span><br><span class=\"line\">$cache-&gt;add(&apos;key1&apos;,&apos;hello world!&apos;,1500,$dependency);</span><br><span class=\"line\">var_dump($cache-&gt;get(&apos;key1&apos;));</span><br></pre></td></tr></table></figure></p>\n<p>Db依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cache = \\YII::$app-&gt;cache;</span><br><span class=\"line\">$dependency = new \\yii\\caching\\DbDependency(</span><br><span class=\"line\">    [&apos;sql&apos;=&gt;&apos;SELECT count(*) FROM yii.order&apos;]</span><br><span class=\"line\">);</span><br><span class=\"line\">$cache-&gt;add(&apos;key1&apos;, &apos;hello world!&apos;, 1500,$dependency);</span><br><span class=\"line\">var_dump($cache-&gt;get(&apos;key1&apos;));</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"片段缓存\"><a href=\"#片段缓存\" class=\"headerlink\" title=\"片段缓存\"></a>片段缓存</h2><hr>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>在控制器中使用视图，在视图中用beginCache endCache包围<br>视图（views/test/index.php）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php if($this-&gt;beginCache(&apos;cache_div&apos;))&#123;?&gt; //写上唯一id标识</span><br><span class=\"line\">&lt;div id=&apos;cache_div&apos;&gt;</span><br><span class=\"line\">    &lt;div&gt;这里将会被缓存&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;?php $this-&gt;endCache();&#125;?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=&apos;no_cache_div&apos;&gt;</span><br><span class=\"line\">    &lt;div&gt;这里不会被缓存&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"过期时间\"><a href=\"#过期时间\" class=\"headerlink\" title=\"过期时间\"></a>过期时间</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php if($this-&gt;beginCache(&apos;cache_div&apos;,[&apos;duration&apos;=&gt;30]))&#123;?&gt;  &lt;!--duration二参寿选--&gt;</span><br><span class=\"line\">    &lt;div id=&apos;cache_div&apos;&gt;</span><br><span class=\"line\">        &lt;div&gt;这里将会被缓存&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;?php $this-&gt;endCache();&#125;?&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"片段缓存的依赖设置\"><a href=\"#片段缓存的依赖设置\" class=\"headerlink\" title=\"片段缓存的依赖设置\"></a>片段缓存的依赖设置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    $dependency = [</span><br><span class=\"line\">        &apos;class&apos; =&gt; &apos;yii\\caching\\FileDependency&apos;,    //缓存依赖类型</span><br><span class=\"line\">        &apos;fileName&apos;=&gt;&apos;hw.txt&apos;</span><br><span class=\"line\">    ];</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;!--dependency--&gt;</span><br><span class=\"line\">&lt;?php if($this-&gt;beginCache(&apos;cache_div&apos;,[&apos;dependency&apos; =&gt; $dependency]))&#123;?&gt;</span><br><span class=\"line\">&lt;div id=&apos;cache_div&apos;&gt;</span><br><span class=\"line\">    &lt;div&gt;这里将会被缓存&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;?php $this-&gt;endCache();&#125;?&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"缓存开关\"><a href=\"#缓存开关\" class=\"headerlink\" title=\"缓存开关\"></a>缓存开关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    $enabled = ture;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;!--缓存开--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php if($this-&gt;beginCache(&apos;cache_div&apos;,[&apos;enabled&apos; =&gt; $enabled]))&#123;?&gt;</span><br><span class=\"line\">&lt;div id=&apos;cache_div&apos;&gt;</span><br><span class=\"line\">    &lt;div&gt;这里将会被缓存&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;?php $this-&gt;endCache();&#125;?&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"嵌套使用\"><a href=\"#嵌套使用\" class=\"headerlink\" title=\"嵌套使用\"></a>嵌套使用</h3><p>可配合其他属性使用比如时间,需要注意的是外层的冷却为过，内层修改是无法生效的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php if($this-&gt;beginCache(&apos;cache_div&apos;,[&apos;duration&apos;=&gt;10]))&#123;?&gt;</span><br><span class=\"line\">&lt;div id=&apos;cache_div&apos;&gt;</span><br><span class=\"line\">    &lt;div&gt;这里是外层缓存&lt;/div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;?php if($this-&gt;beginCache(&apos;cache_div&apos;,[&apos;duration&apos;=&gt;20]))&#123;?&gt;</span><br><span class=\"line\">        &lt;div id=&apos;cache_div&apos;&gt;</span><br><span class=\"line\">            &lt;div&gt;这里是内层缓存&lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;?php $this-&gt;endCache();&#125;?&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;?php $this-&gt;endCache();&#125;?&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"动态内容\"><a href=\"#动态内容\" class=\"headerlink\" title=\"动态内容\"></a>动态内容</h3><p>使用片段缓存时，可能会遇到一大段较为静态的内容中有少许动态内容的情况。例如，一个显示着菜单栏和当前用户名的页面头部。或是缓存的内容包含每次请求都需要执行的 PHP 代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php if ($this-&gt;beginCache($id1)) &#123;?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--...在此生成内容...--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php echo $this-&gt;renderDynamic(&apos;return Yii::$app-&gt;user-&gt;identity-&gt;name;&apos;);?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--...在此生成内容...--&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;?php $this-&gt;endCache();&#125;?&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"页面缓存\"><a href=\"#页面缓存\" class=\"headerlink\" title=\"页面缓存\"></a>页面缓存</h2><p>在服务器端缓存整个页面的内容，可以在使用页面缓存的同时，使用片段缓存和 动态内容。</p>\n<hr>\n<h3 id=\"behaviors-介绍\"><a href=\"#behaviors-介绍\" class=\"headerlink\" title=\"behaviors()介绍\"></a>behaviors()介绍</h3><p>behaviors会在action之前执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function behaviors()&#123;</span><br><span class=\"line\">    echo &apos;1&apos;;</span><br><span class=\"line\">    return[];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public function actionIndex()&#123;</span><br><span class=\"line\">    echo &apos;2&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>如果整个页面都不怎么会改动，可以使用页面缓存<br>behaviors用return[]告诉yii框架使用页面缓存<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function behaviors()&#123;</span><br><span class=\"line\">    return[</span><br><span class=\"line\">        [</span><br><span class=\"line\">            &apos;class&apos; =&gt; &apos;yii\\filters\\PageCache&apos;,</span><br><span class=\"line\">            &apos;only&apos; =&gt; [&apos;index&apos;], //数组成员可以多个</span><br><span class=\"line\">            //只缓存index，在当前控制器中有多个action时有意义</span><br><span class=\"line\">            &apos;duration&apos; =&gt; 60,</span><br><span class=\"line\">            &apos;variations&apos; =&gt; [</span><br><span class=\"line\">                \\Yii::$app-&gt;language,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &apos;dependency&apos; =&gt; [</span><br><span class=\"line\">                &apos;class&apos; =&gt; &apos;yii\\caching\\DbDependency&apos;,</span><br><span class=\"line\">                &apos;sql&apos; =&gt; &apos;SELECT COUNT(*) FROM post&apos;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        ]//上述代码表示页面缓存只在 index 动作时启用，页面内容最多被缓存 60 秒，会随着当前应用的语言更改而变化。如果文章总数发生变化则缓存的页面会失效。</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"http缓存\"><a href=\"#http缓存\" class=\"headerlink\" title=\"http缓存\"></a>http缓存</h2><p>利用客户端 缓存</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function behaviors()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return [</span><br><span class=\"line\">        [</span><br><span class=\"line\">            &apos;class&apos; =&gt; &apos;yii\\filters\\HttpCache&apos;, //这是http缓存</span><br><span class=\"line\">            &apos;only&apos; =&gt; [&apos;index&apos;],    //选</span><br><span class=\"line\">            //用LM最后修改时间来判断是否发生更改</span><br><span class=\"line\">            &apos;lastModified&apos; =&gt; function ($action, $params) &#123;</span><br><span class=\"line\">                return filemtime(&apos;hw.txt&apos;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            //用etag哈希值判断是否发生更改</span><br><span class=\"line\">            &apos;etagSeed&apos; =&gt; function ($action, $params) &#123;</span><br><span class=\"line\">                $fp = fopen(&apos;hw.txt&apos;,&apos;r&apos;);  //以读取方式打开文件</span><br><span class=\"line\">                $title = fgets($fp);    //读取第一行内容</span><br><span class=\"line\">                fclose($fp);    //关闭文件</span><br><span class=\"line\">                return $title;  //返回标题。如果标题未变，则使用缓存。</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public function actionIndex()&#123;</span><br><span class=\"line\">    $content = file_get_contents(&apos;hw.txt&apos;);</span><br><span class=\"line\">    return $this-&gt;renderPartial(&apos;index&apos;,[&apos;new&apos;=&gt;$content]); //把hw里的文本传给index视图</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"延迟加载\"><a href=\"#延迟加载\" class=\"headerlink\" title=\"延迟加载\"></a>延迟加载</h2><hr>\n<h3 id=\"类的延迟加载\"><a href=\"#类的延迟加载\" class=\"headerlink\" title=\"类的延迟加载\"></a>类的延迟加载</h3><p>原版：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Class1&#123;&#125;  //空的Class1&amp;Class2</span><br></pre></td></tr></table></figure></p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">Require(&apos;class\\Class1.php&apos;);</span><br><span class=\"line\">require(&apos;class\\Class2.php&apos;);    //加载两个class</span><br><span class=\"line\"></span><br><span class=\"line\">$is_girl = $_GET[&apos;sex&apos;]==0?true : false;    //使用get方法传值</span><br><span class=\"line\">if($is_girl)&#123;</span><br><span class=\"line\">    echo &apos;This is a girl!&apos;;     //但其实只要其中一个</span><br><span class=\"line\">    $class1 = new class1;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &apos;not a girl&apos;;</span><br><span class=\"line\">    $class2 = new Class2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优化：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$is_girl = $_GET[&apos;sex&apos;]==0?true : false;</span><br><span class=\"line\">if($is_girl)&#123;</span><br><span class=\"line\">    echo &apos;This is a girl!&apos;;</span><br><span class=\"line\">    Require(&apos;class\\Class1.php&apos;);        //延迟加载</span><br><span class=\"line\">    $class1 = new class1;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &apos;not a girl&apos;;</span><br><span class=\"line\">    require(&apos;class\\Class2.php&apos;);</span><br><span class=\"line\">    $class2 = new Class2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>再优化：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">function my_loader($class)&#123;</span><br><span class=\"line\">    require(&apos;class\\\\&apos;.$class.&apos;.php&apos;);   //双斜杠转义</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">spl_autoload_register(&apos;my_loader&apos;); //自动加载注册my_loader函数</span><br><span class=\"line\"></span><br><span class=\"line\">$is_girl = $_GET[&apos;sex&apos;]==0?true : false;</span><br><span class=\"line\">if($is_girl)&#123;</span><br><span class=\"line\">    echo &apos;This is a girl!&apos;;</span><br><span class=\"line\">    $class1 = new class1;   //遇见不认识的class1，运行my_loader</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &apos;not a girl&apos;;</span><br><span class=\"line\">    $class2 = new Class2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"类的映射表机制\"><a href=\"#类的映射表机制\" class=\"headerlink\" title=\"类的映射表机制\"></a>类的映射表机制</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace app\\controllers;</span><br><span class=\"line\"></span><br><span class=\"line\">use yii\\web\\Controller;</span><br><span class=\"line\">use app\\models\\Test;</span><br><span class=\"line\">use app\\models\\Order;</span><br><span class=\"line\">use app\\models\\Customer;    //用下面的映射进行转换</span><br><span class=\"line\"></span><br><span class=\"line\">class TestController extends Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function actionIndex()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        \\YII::$classMap[&apos;app\\models\\Order&apos;] = &apos;D:\\phpProject\\basic\\models\\Customer.php&apos;;</span><br><span class=\"line\">        //就能提高加载的速度</span><br><span class=\"line\">        $order = new Order;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"数据缓存\"><a href=\"#数据缓存\" class=\"headerlink\" title=\"数据缓存\"></a>数据缓存</h2><hr>\n<h3 id=\"增删改查有效期\"><a href=\"#增删改查有效期\" class=\"headerlink\" title=\"增删改查有效期\"></a>增删改查有效期</h3><p>控制器中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cache = \\YII::$app-&gt;cache;//获取缓存组件</span><br><span class=\"line\">$cache-&gt;add(&apos;key1&apos;, &apos;hello world!&apos;,15);//往缓存中写数据，参三生存时间秒可选</span><br><span class=\"line\">$cache-&gt;set(&apos;key1&apos;, &apos;hello world2&apos;,15);//修改数据（也能作为写入），参三生存时间秒可选</span><br><span class=\"line\">$cache-&gt;delete(&apos;key&apos;);//删除数据</span><br><span class=\"line\">$cache-&gt;flush();//清空数据</span><br><span class=\"line\">$data = $cache-&gt;get(&apos;key1&apos;);//读缓存</span><br><span class=\"line\">print_r($data);</span><br><span class=\"line\">var_dump($data);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"数据缓存依赖\"><a href=\"#数据缓存依赖\" class=\"headerlink\" title=\"数据缓存依赖\"></a>数据缓存依赖</h3><p>文件依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cache = \\YII::$app-&gt;cache;</span><br><span class=\"line\">$dependency = new \\yii\\caching\\FileDependency([&apos;fileName&apos;=&gt;&apos;hw.txt&apos;]);//设置依赖文件</span><br><span class=\"line\">$cache-&gt;add(&apos;key1&apos;,&apos;hello world!&apos;,1500,$dependency);//为缓存设置依赖</span><br><span class=\"line\">var_dump($cache-&gt;get(&apos;key1&apos;));//读缓存,如果文件被修改，显示bool(false)</span><br></pre></td></tr></table></figure></p>\n<p>表达式依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cache = \\YII::$app-&gt;cache;</span><br><span class=\"line\">$dependency = new \\yii\\caching\\ExpressionDependency(</span><br><span class=\"line\">    [&apos;expression&apos;=&gt;&apos;\\YII::$app-&gt;request-&gt;get(&quot;name&quot;)&apos;]</span><br><span class=\"line\">);//以get请求作为表达式，当该值发生变化，缓存即失效</span><br><span class=\"line\">$cache-&gt;add(&apos;key1&apos;,&apos;hello world!&apos;,1500,$dependency);</span><br><span class=\"line\">var_dump($cache-&gt;get(&apos;key1&apos;));</span><br></pre></td></tr></table></figure></p>\n<p>Db依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cache = \\YII::$app-&gt;cache;</span><br><span class=\"line\">$dependency = new \\yii\\caching\\DbDependency(</span><br><span class=\"line\">    [&apos;sql&apos;=&gt;&apos;SELECT count(*) FROM yii.order&apos;]</span><br><span class=\"line\">);</span><br><span class=\"line\">$cache-&gt;add(&apos;key1&apos;, &apos;hello world!&apos;, 1500,$dependency);</span><br><span class=\"line\">var_dump($cache-&gt;get(&apos;key1&apos;));</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"片段缓存\"><a href=\"#片段缓存\" class=\"headerlink\" title=\"片段缓存\"></a>片段缓存</h2><hr>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>在控制器中使用视图，在视图中用beginCache endCache包围<br>视图（views/test/index.php）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php if($this-&gt;beginCache(&apos;cache_div&apos;))&#123;?&gt; //写上唯一id标识</span><br><span class=\"line\">&lt;div id=&apos;cache_div&apos;&gt;</span><br><span class=\"line\">    &lt;div&gt;这里将会被缓存&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;?php $this-&gt;endCache();&#125;?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=&apos;no_cache_div&apos;&gt;</span><br><span class=\"line\">    &lt;div&gt;这里不会被缓存&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"过期时间\"><a href=\"#过期时间\" class=\"headerlink\" title=\"过期时间\"></a>过期时间</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php if($this-&gt;beginCache(&apos;cache_div&apos;,[&apos;duration&apos;=&gt;30]))&#123;?&gt;  &lt;!--duration二参寿选--&gt;</span><br><span class=\"line\">    &lt;div id=&apos;cache_div&apos;&gt;</span><br><span class=\"line\">        &lt;div&gt;这里将会被缓存&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;?php $this-&gt;endCache();&#125;?&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"片段缓存的依赖设置\"><a href=\"#片段缓存的依赖设置\" class=\"headerlink\" title=\"片段缓存的依赖设置\"></a>片段缓存的依赖设置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    $dependency = [</span><br><span class=\"line\">        &apos;class&apos; =&gt; &apos;yii\\caching\\FileDependency&apos;,    //缓存依赖类型</span><br><span class=\"line\">        &apos;fileName&apos;=&gt;&apos;hw.txt&apos;</span><br><span class=\"line\">    ];</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;!--dependency--&gt;</span><br><span class=\"line\">&lt;?php if($this-&gt;beginCache(&apos;cache_div&apos;,[&apos;dependency&apos; =&gt; $dependency]))&#123;?&gt;</span><br><span class=\"line\">&lt;div id=&apos;cache_div&apos;&gt;</span><br><span class=\"line\">    &lt;div&gt;这里将会被缓存&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;?php $this-&gt;endCache();&#125;?&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"缓存开关\"><a href=\"#缓存开关\" class=\"headerlink\" title=\"缓存开关\"></a>缓存开关</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    $enabled = ture;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;!--缓存开--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php if($this-&gt;beginCache(&apos;cache_div&apos;,[&apos;enabled&apos; =&gt; $enabled]))&#123;?&gt;</span><br><span class=\"line\">&lt;div id=&apos;cache_div&apos;&gt;</span><br><span class=\"line\">    &lt;div&gt;这里将会被缓存&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;?php $this-&gt;endCache();&#125;?&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"嵌套使用\"><a href=\"#嵌套使用\" class=\"headerlink\" title=\"嵌套使用\"></a>嵌套使用</h3><p>可配合其他属性使用比如时间,需要注意的是外层的冷却为过，内层修改是无法生效的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php if($this-&gt;beginCache(&apos;cache_div&apos;,[&apos;duration&apos;=&gt;10]))&#123;?&gt;</span><br><span class=\"line\">&lt;div id=&apos;cache_div&apos;&gt;</span><br><span class=\"line\">    &lt;div&gt;这里是外层缓存&lt;/div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;?php if($this-&gt;beginCache(&apos;cache_div&apos;,[&apos;duration&apos;=&gt;20]))&#123;?&gt;</span><br><span class=\"line\">        &lt;div id=&apos;cache_div&apos;&gt;</span><br><span class=\"line\">            &lt;div&gt;这里是内层缓存&lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;?php $this-&gt;endCache();&#125;?&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;?php $this-&gt;endCache();&#125;?&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"动态内容\"><a href=\"#动态内容\" class=\"headerlink\" title=\"动态内容\"></a>动态内容</h3><p>使用片段缓存时，可能会遇到一大段较为静态的内容中有少许动态内容的情况。例如，一个显示着菜单栏和当前用户名的页面头部。或是缓存的内容包含每次请求都需要执行的 PHP 代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php if ($this-&gt;beginCache($id1)) &#123;?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--...在此生成内容...--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php echo $this-&gt;renderDynamic(&apos;return Yii::$app-&gt;user-&gt;identity-&gt;name;&apos;);?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--...在此生成内容...--&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;?php $this-&gt;endCache();&#125;?&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"页面缓存\"><a href=\"#页面缓存\" class=\"headerlink\" title=\"页面缓存\"></a>页面缓存</h2><p>在服务器端缓存整个页面的内容，可以在使用页面缓存的同时，使用片段缓存和 动态内容。</p>\n<hr>\n<h3 id=\"behaviors-介绍\"><a href=\"#behaviors-介绍\" class=\"headerlink\" title=\"behaviors()介绍\"></a>behaviors()介绍</h3><p>behaviors会在action之前执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function behaviors()&#123;</span><br><span class=\"line\">    echo &apos;1&apos;;</span><br><span class=\"line\">    return[];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public function actionIndex()&#123;</span><br><span class=\"line\">    echo &apos;2&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>如果整个页面都不怎么会改动，可以使用页面缓存<br>behaviors用return[]告诉yii框架使用页面缓存<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function behaviors()&#123;</span><br><span class=\"line\">    return[</span><br><span class=\"line\">        [</span><br><span class=\"line\">            &apos;class&apos; =&gt; &apos;yii\\filters\\PageCache&apos;,</span><br><span class=\"line\">            &apos;only&apos; =&gt; [&apos;index&apos;], //数组成员可以多个</span><br><span class=\"line\">            //只缓存index，在当前控制器中有多个action时有意义</span><br><span class=\"line\">            &apos;duration&apos; =&gt; 60,</span><br><span class=\"line\">            &apos;variations&apos; =&gt; [</span><br><span class=\"line\">                \\Yii::$app-&gt;language,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &apos;dependency&apos; =&gt; [</span><br><span class=\"line\">                &apos;class&apos; =&gt; &apos;yii\\caching\\DbDependency&apos;,</span><br><span class=\"line\">                &apos;sql&apos; =&gt; &apos;SELECT COUNT(*) FROM post&apos;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        ]//上述代码表示页面缓存只在 index 动作时启用，页面内容最多被缓存 60 秒，会随着当前应用的语言更改而变化。如果文章总数发生变化则缓存的页面会失效。</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"http缓存\"><a href=\"#http缓存\" class=\"headerlink\" title=\"http缓存\"></a>http缓存</h2><p>利用客户端 缓存</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function behaviors()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return [</span><br><span class=\"line\">        [</span><br><span class=\"line\">            &apos;class&apos; =&gt; &apos;yii\\filters\\HttpCache&apos;, //这是http缓存</span><br><span class=\"line\">            &apos;only&apos; =&gt; [&apos;index&apos;],    //选</span><br><span class=\"line\">            //用LM最后修改时间来判断是否发生更改</span><br><span class=\"line\">            &apos;lastModified&apos; =&gt; function ($action, $params) &#123;</span><br><span class=\"line\">                return filemtime(&apos;hw.txt&apos;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            //用etag哈希值判断是否发生更改</span><br><span class=\"line\">            &apos;etagSeed&apos; =&gt; function ($action, $params) &#123;</span><br><span class=\"line\">                $fp = fopen(&apos;hw.txt&apos;,&apos;r&apos;);  //以读取方式打开文件</span><br><span class=\"line\">                $title = fgets($fp);    //读取第一行内容</span><br><span class=\"line\">                fclose($fp);    //关闭文件</span><br><span class=\"line\">                return $title;  //返回标题。如果标题未变，则使用缓存。</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public function actionIndex()&#123;</span><br><span class=\"line\">    $content = file_get_contents(&apos;hw.txt&apos;);</span><br><span class=\"line\">    return $this-&gt;renderPartial(&apos;index&apos;,[&apos;new&apos;=&gt;$content]); //把hw里的文本传给index视图</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n<!-- more -->\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n<!-- more -->\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-01-11T02:39:48.534Z","updated":"2019-01-21T06:27:25.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642pxx0008y0ooxag94qod","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><a id=\"more\"></a>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2>","more":"<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"反射","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n## 1. 获取类型信息\n1. 获取指定类对应的Class对象\n    1. `Class c = ArrayList.class;`\n    2. `Class c = list.getClass();`\n    3. `Class c = Class.forName(\"java.util.ArrayList\");//并加载指定的类`\n<!-- more -->\n2. 获取包名\n`String packageName = c.getPackage().getName();`\n3. 获取类的修饰符\n`int mod = c.getModifiers();`\n`String modifier = Modifier.toString(mod);`\n4. 类的全限定名\n`String className = c.getName();`\n5. 父类\n`Class superC = c.getSuperclass();`\n6. 实现的接口\n`Class interfaces = c.getInterfaces();`\n7. public变量/成员变量及操作\n`Field[] fields = c.getFields();`\n`Field[] fields = c.getDeclaredFields();`\n`Field field = c.getDeclaredField(\"变量名\");`\n`field.set(对象,\"变量值\")`\n8. 构造方法\n`Constructor[] constructors = c.getDeclaredConstructors();`\n9. public方法(包括父类)/自己的的成员方法\n`Method[] methods = c.getMethods();`\n`Method[] methods = c.getDeclaredMethods();`\n10. 通过类的类类型创建该类的对象实例\n`String str = (String)c1.newInstance();//需要有无参数的构造方法`\n\n---\n## 2. 创建对象\n```\nClass c = Class.forName(\"java.util.ArrayList\");\nList list = (List)c.newInstance();\n```\n\n---\n## 2. 方法反射\n`方法对象.invoke(类对象,参数表);`\n```\npublic class MethodDemo1 {\n\tpublic static void main(String[] args) {\n        /**目标：要获取print(int,int)方法\n         *获取一个方法就要获取类的信息\n         *1.获取类的信息首先要获取类的类类型\n         */\n\t\tA a1 = new A();\n\t\tClass c = a1.getClass();\n        try {\n            /*2.获取方法 名称和参数列表来决定  \n             * getMethod获取的是public的方法\n             * getDeclaredMethod自己声明的方法\n             */\n\t\t\tMethod m2 = c.getMethod(\"print\");\n            Method m = c.getDeclaredMethod(\"print\", int.class,int.class);\n\t    \t\n            /*3.进行方法的反射操作\n             *可用o接返回值\n             *没有返回值即null\n             *setAccessible(AccessibleObject[] array, boolean flag) \n             *使用单一安全性检查（为了提高效率）\n             *为一组对象设置accessible标志的便捷方法。\n             *setAccessible(boolean flag) \n             *将单个对象的accessible标志设置为指示的布尔值。\n             */\n            a1.setAccessible(true);\n            Object o = a1.print(10, 20);\n            Object o = m.invoke(a1,new Object[]{10,20});\n            Object o = m.invoke(a1, 10,20);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\nclass A{\n\tpublic void print(){\n\t\tSystem.out.println(\"helloworld\");\n\t}\n\tprivate void print(int a,int b){\n\t\tSystem.out.println(a+b);\n\t}\n\tpublic void print(String a,String b){\n\t\tSystem.out.println(a.toUpperCase()+\",\"+b.toLowerCase());\n\t}\n}\n```\n\n\n\n\n","source":"_posts/反射.md","raw":"---\ntitle: 反射\ndate: 2019-01-21 10:26:49\ntags: JAVA\n---\n\n---\n## 1. 获取类型信息\n1. 获取指定类对应的Class对象\n    1. `Class c = ArrayList.class;`\n    2. `Class c = list.getClass();`\n    3. `Class c = Class.forName(\"java.util.ArrayList\");//并加载指定的类`\n<!-- more -->\n2. 获取包名\n`String packageName = c.getPackage().getName();`\n3. 获取类的修饰符\n`int mod = c.getModifiers();`\n`String modifier = Modifier.toString(mod);`\n4. 类的全限定名\n`String className = c.getName();`\n5. 父类\n`Class superC = c.getSuperclass();`\n6. 实现的接口\n`Class interfaces = c.getInterfaces();`\n7. public变量/成员变量及操作\n`Field[] fields = c.getFields();`\n`Field[] fields = c.getDeclaredFields();`\n`Field field = c.getDeclaredField(\"变量名\");`\n`field.set(对象,\"变量值\")`\n8. 构造方法\n`Constructor[] constructors = c.getDeclaredConstructors();`\n9. public方法(包括父类)/自己的的成员方法\n`Method[] methods = c.getMethods();`\n`Method[] methods = c.getDeclaredMethods();`\n10. 通过类的类类型创建该类的对象实例\n`String str = (String)c1.newInstance();//需要有无参数的构造方法`\n\n---\n## 2. 创建对象\n```\nClass c = Class.forName(\"java.util.ArrayList\");\nList list = (List)c.newInstance();\n```\n\n---\n## 2. 方法反射\n`方法对象.invoke(类对象,参数表);`\n```\npublic class MethodDemo1 {\n\tpublic static void main(String[] args) {\n        /**目标：要获取print(int,int)方法\n         *获取一个方法就要获取类的信息\n         *1.获取类的信息首先要获取类的类类型\n         */\n\t\tA a1 = new A();\n\t\tClass c = a1.getClass();\n        try {\n            /*2.获取方法 名称和参数列表来决定  \n             * getMethod获取的是public的方法\n             * getDeclaredMethod自己声明的方法\n             */\n\t\t\tMethod m2 = c.getMethod(\"print\");\n            Method m = c.getDeclaredMethod(\"print\", int.class,int.class);\n\t    \t\n            /*3.进行方法的反射操作\n             *可用o接返回值\n             *没有返回值即null\n             *setAccessible(AccessibleObject[] array, boolean flag) \n             *使用单一安全性检查（为了提高效率）\n             *为一组对象设置accessible标志的便捷方法。\n             *setAccessible(boolean flag) \n             *将单个对象的accessible标志设置为指示的布尔值。\n             */\n            a1.setAccessible(true);\n            Object o = a1.print(10, 20);\n            Object o = m.invoke(a1,new Object[]{10,20});\n            Object o = m.invoke(a1, 10,20);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\nclass A{\n\tpublic void print(){\n\t\tSystem.out.println(\"helloworld\");\n\t}\n\tprivate void print(int a,int b){\n\t\tSystem.out.println(a+b);\n\t}\n\tpublic void print(String a,String b){\n\t\tSystem.out.println(a.toUpperCase()+\",\"+b.toLowerCase());\n\t}\n}\n```\n\n\n\n\n","slug":"反射","published":1,"updated":"2019-01-21T06:27:25.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642pxy0009y0oo13ade40u","content":"<hr>\n<h2 id=\"1-获取类型信息\"><a href=\"#1-获取类型信息\" class=\"headerlink\" title=\"1. 获取类型信息\"></a>1. 获取类型信息</h2><ol>\n<li>获取指定类对应的Class对象<ol>\n<li><code>Class c = ArrayList.class;</code></li>\n<li><code>Class c = list.getClass();</code></li>\n<li><code>Class c = Class.forName(&quot;java.util.ArrayList&quot;);//并加载指定的类</code><a id=\"more\"></a></li>\n</ol>\n</li>\n<li>获取包名<br><code>String packageName = c.getPackage().getName();</code></li>\n<li>获取类的修饰符<br><code>int mod = c.getModifiers();</code><br><code>String modifier = Modifier.toString(mod);</code></li>\n<li>类的全限定名<br><code>String className = c.getName();</code></li>\n<li>父类<br><code>Class superC = c.getSuperclass();</code></li>\n<li>实现的接口<br><code>Class interfaces = c.getInterfaces();</code></li>\n<li>public变量/成员变量及操作<br><code>Field[] fields = c.getFields();</code><br><code>Field[] fields = c.getDeclaredFields();</code><br><code>Field field = c.getDeclaredField(&quot;变量名&quot;);</code><br><code>field.set(对象,&quot;变量值&quot;)</code></li>\n<li>构造方法<br><code>Constructor[] constructors = c.getDeclaredConstructors();</code></li>\n<li>public方法(包括父类)/自己的的成员方法<br><code>Method[] methods = c.getMethods();</code><br><code>Method[] methods = c.getDeclaredMethods();</code></li>\n<li>通过类的类类型创建该类的对象实例<br><code>String str = (String)c1.newInstance();//需要有无参数的构造方法</code></li>\n</ol>\n<hr>\n<h2 id=\"2-创建对象\"><a href=\"#2-创建对象\" class=\"headerlink\" title=\"2. 创建对象\"></a>2. 创建对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c = Class.forName(&quot;java.util.ArrayList&quot;);</span><br><span class=\"line\">List list = (List)c.newInstance();</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"2-方法反射\"><a href=\"#2-方法反射\" class=\"headerlink\" title=\"2. 方法反射\"></a>2. 方法反射</h2><p><code>方法对象.invoke(类对象,参数表);</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MethodDemo1 &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">        /**目标：要获取print(int,int)方法</span><br><span class=\"line\">         *获取一个方法就要获取类的信息</span><br><span class=\"line\">         *1.获取类的信息首先要获取类的类类型</span><br><span class=\"line\">         */</span><br><span class=\"line\">\t\tA a1 = new A();</span><br><span class=\"line\">\t\tClass c = a1.getClass();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            /*2.获取方法 名称和参数列表来决定  </span><br><span class=\"line\">             * getMethod获取的是public的方法</span><br><span class=\"line\">             * getDeclaredMethod自己声明的方法</span><br><span class=\"line\">             */</span><br><span class=\"line\">\t\t\tMethod m2 = c.getMethod(&quot;print&quot;);</span><br><span class=\"line\">            Method m = c.getDeclaredMethod(&quot;print&quot;, int.class,int.class);</span><br><span class=\"line\">\t    \t</span><br><span class=\"line\">            /*3.进行方法的反射操作</span><br><span class=\"line\">             *可用o接返回值</span><br><span class=\"line\">             *没有返回值即null</span><br><span class=\"line\">             *setAccessible(AccessibleObject[] array, boolean flag) </span><br><span class=\"line\">             *使用单一安全性检查（为了提高效率）</span><br><span class=\"line\">             *为一组对象设置accessible标志的便捷方法。</span><br><span class=\"line\">             *setAccessible(boolean flag) </span><br><span class=\"line\">             *将单个对象的accessible标志设置为指示的布尔值。</span><br><span class=\"line\">             */</span><br><span class=\"line\">            a1.setAccessible(true);</span><br><span class=\"line\">            Object o = a1.print(10, 20);</span><br><span class=\"line\">            Object o = m.invoke(a1,new Object[]&#123;10,20&#125;);</span><br><span class=\"line\">            Object o = m.invoke(a1, 10,20);</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class A&#123;</span><br><span class=\"line\">\tpublic void print()&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;helloworld&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprivate void print(int a,int b)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(a+b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void print(String a,String b)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(a.toUpperCase()+&quot;,&quot;+b.toLowerCase());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"1-获取类型信息\"><a href=\"#1-获取类型信息\" class=\"headerlink\" title=\"1. 获取类型信息\"></a>1. 获取类型信息</h2><ol>\n<li>获取指定类对应的Class对象<ol>\n<li><code>Class c = ArrayList.class;</code></li>\n<li><code>Class c = list.getClass();</code></li>\n<li><code>Class c = Class.forName(&quot;java.util.ArrayList&quot;);//并加载指定的类</code>","more":"</li>\n</ol>\n</li>\n<li>获取包名<br><code>String packageName = c.getPackage().getName();</code></li>\n<li>获取类的修饰符<br><code>int mod = c.getModifiers();</code><br><code>String modifier = Modifier.toString(mod);</code></li>\n<li>类的全限定名<br><code>String className = c.getName();</code></li>\n<li>父类<br><code>Class superC = c.getSuperclass();</code></li>\n<li>实现的接口<br><code>Class interfaces = c.getInterfaces();</code></li>\n<li>public变量/成员变量及操作<br><code>Field[] fields = c.getFields();</code><br><code>Field[] fields = c.getDeclaredFields();</code><br><code>Field field = c.getDeclaredField(&quot;变量名&quot;);</code><br><code>field.set(对象,&quot;变量值&quot;)</code></li>\n<li>构造方法<br><code>Constructor[] constructors = c.getDeclaredConstructors();</code></li>\n<li>public方法(包括父类)/自己的的成员方法<br><code>Method[] methods = c.getMethods();</code><br><code>Method[] methods = c.getDeclaredMethods();</code></li>\n<li>通过类的类类型创建该类的对象实例<br><code>String str = (String)c1.newInstance();//需要有无参数的构造方法</code></li>\n</ol>\n<hr>\n<h2 id=\"2-创建对象\"><a href=\"#2-创建对象\" class=\"headerlink\" title=\"2. 创建对象\"></a>2. 创建对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class c = Class.forName(&quot;java.util.ArrayList&quot;);</span><br><span class=\"line\">List list = (List)c.newInstance();</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"2-方法反射\"><a href=\"#2-方法反射\" class=\"headerlink\" title=\"2. 方法反射\"></a>2. 方法反射</h2><p><code>方法对象.invoke(类对象,参数表);</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MethodDemo1 &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">        /**目标：要获取print(int,int)方法</span><br><span class=\"line\">         *获取一个方法就要获取类的信息</span><br><span class=\"line\">         *1.获取类的信息首先要获取类的类类型</span><br><span class=\"line\">         */</span><br><span class=\"line\">\t\tA a1 = new A();</span><br><span class=\"line\">\t\tClass c = a1.getClass();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            /*2.获取方法 名称和参数列表来决定  </span><br><span class=\"line\">             * getMethod获取的是public的方法</span><br><span class=\"line\">             * getDeclaredMethod自己声明的方法</span><br><span class=\"line\">             */</span><br><span class=\"line\">\t\t\tMethod m2 = c.getMethod(&quot;print&quot;);</span><br><span class=\"line\">            Method m = c.getDeclaredMethod(&quot;print&quot;, int.class,int.class);</span><br><span class=\"line\">\t    \t</span><br><span class=\"line\">            /*3.进行方法的反射操作</span><br><span class=\"line\">             *可用o接返回值</span><br><span class=\"line\">             *没有返回值即null</span><br><span class=\"line\">             *setAccessible(AccessibleObject[] array, boolean flag) </span><br><span class=\"line\">             *使用单一安全性检查（为了提高效率）</span><br><span class=\"line\">             *为一组对象设置accessible标志的便捷方法。</span><br><span class=\"line\">             *setAccessible(boolean flag) </span><br><span class=\"line\">             *将单个对象的accessible标志设置为指示的布尔值。</span><br><span class=\"line\">             */</span><br><span class=\"line\">            a1.setAccessible(true);</span><br><span class=\"line\">            Object o = a1.print(10, 20);</span><br><span class=\"line\">            Object o = m.invoke(a1,new Object[]&#123;10,20&#125;);</span><br><span class=\"line\">            Object o = m.invoke(a1, 10,20);</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class A&#123;</span><br><span class=\"line\">\tpublic void print()&#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;helloworld&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprivate void print(int a,int b)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(a+b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void print(String a,String b)&#123;</span><br><span class=\"line\">\t\tSystem.out.println(a.toUpperCase()+&quot;,&quot;+b.toLowerCase());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"概率","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n## 1. 事件的概率\n![此处输入图片的描述][1]\n<!-- more -->\n### 1.1 无放回类题目\n\n![此处输入图片的描述][2]\n---\n### 1.2 有放回类题目\n\n![此处输入图片的描述][3]\n---\n### 1.3 需要画图的题目\n![此处输入图片的描述][4]\n---\n### 1.4 条件概率公式\nP(B|A):当A发生时，B的概率\nP(BA):A和B同时发生的概率\nP(B|A)=$ \\frac{P(BA)}{P(A)}$\n题目1：\n![此处输入图片的描述][5]\n题目2：\n![此处输入图片的描述][6]\n![此处输入图片的描述][7]\nP(B|A)=$\\frac{1-0.8}{0.05}$\n\n---\n### 1.5 多个体下，某事发生的概率（全概率公式）\n\n![此处输入图片的描述][8]\nP=20%*0.02+80%*0.01=0.0084\n\n---\n### 1.6 多个体下，事件发生时，求是某个个体的概率（贝叶斯公式）\n![此处输入图片的描述][9]\nP=$\\frac{0.2*0.002}{0.0084}$\n\n  [1]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaKUYqhdjGh3FQGnsCibSIxJZ4GCluib9yzeI/0\n  [2]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaK2ictibSll3ic0ZUibultgmgPK7MNibAuLHCs0/0\n  [3]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaLQQJCER2TWfqbhDnLn3s5WBeBD6IPXRas/0\n  [4]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaJGmlicibzFHuKibzjPE9aJhQ4syq8dhjnJ3g/0\n  [5]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaIJBQXhkH8IIIM6ib32znmX0bO4sGzdCuJs/0\n  [6]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaJmWrQ2R4r4DojZFIXegJFuDOByRG16sYY/0\n  [7]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaIeiaozibo4HsIjmMzZtOvVggQmkmWbcTjLM/0\n  [8]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaJibG00N7QpanSQbH5TkIS3A8m4Yp4lHLwM/0\n  [9]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaI8Bty93BXHhLvLycmVaYdJw9tUd3NpIMw/0","source":"_posts/概率.md","raw":"---\ntitle: 概率\ndate: 2019-01-21 10:26:49\ntags: 数学\n---\n\n---\n## 1. 事件的概率\n![此处输入图片的描述][1]\n<!-- more -->\n### 1.1 无放回类题目\n\n![此处输入图片的描述][2]\n---\n### 1.2 有放回类题目\n\n![此处输入图片的描述][3]\n---\n### 1.3 需要画图的题目\n![此处输入图片的描述][4]\n---\n### 1.4 条件概率公式\nP(B|A):当A发生时，B的概率\nP(BA):A和B同时发生的概率\nP(B|A)=$ \\frac{P(BA)}{P(A)}$\n题目1：\n![此处输入图片的描述][5]\n题目2：\n![此处输入图片的描述][6]\n![此处输入图片的描述][7]\nP(B|A)=$\\frac{1-0.8}{0.05}$\n\n---\n### 1.5 多个体下，某事发生的概率（全概率公式）\n\n![此处输入图片的描述][8]\nP=20%*0.02+80%*0.01=0.0084\n\n---\n### 1.6 多个体下，事件发生时，求是某个个体的概率（贝叶斯公式）\n![此处输入图片的描述][9]\nP=$\\frac{0.2*0.002}{0.0084}$\n\n  [1]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaKUYqhdjGh3FQGnsCibSIxJZ4GCluib9yzeI/0\n  [2]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaK2ictibSll3ic0ZUibultgmgPK7MNibAuLHCs0/0\n  [3]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaLQQJCER2TWfqbhDnLn3s5WBeBD6IPXRas/0\n  [4]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaJGmlicibzFHuKibzjPE9aJhQ4syq8dhjnJ3g/0\n  [5]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaIJBQXhkH8IIIM6ib32znmX0bO4sGzdCuJs/0\n  [6]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaJmWrQ2R4r4DojZFIXegJFuDOByRG16sYY/0\n  [7]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaIeiaozibo4HsIjmMzZtOvVggQmkmWbcTjLM/0\n  [8]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaJibG00N7QpanSQbH5TkIS3A8m4Yp4lHLwM/0\n  [9]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaI8Bty93BXHhLvLycmVaYdJw9tUd3NpIMw/0","slug":"概率","published":1,"updated":"2019-01-21T06:27:25.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642py0000by0oo0pmfelv9","content":"<hr>\n<h2 id=\"1-事件的概率\"><a href=\"#1-事件的概率\" class=\"headerlink\" title=\"1. 事件的概率\"></a>1. 事件的概率</h2><p><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaKUYqhdjGh3FQGnsCibSIxJZ4GCluib9yzeI/0\" alt=\"此处输入图片的描述\"><br><a id=\"more\"></a></p>\n<h3 id=\"1-1-无放回类题目\"><a href=\"#1-1-无放回类题目\" class=\"headerlink\" title=\"1.1 无放回类题目\"></a>1.1 无放回类题目</h3><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaK2ictibSll3ic0ZUibultgmgPK7MNibAuLHCs0/0\" alt=\"此处输入图片的描述\"></h2><h3 id=\"1-2-有放回类题目\"><a href=\"#1-2-有放回类题目\" class=\"headerlink\" title=\"1.2 有放回类题目\"></a>1.2 有放回类题目</h3><h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaLQQJCER2TWfqbhDnLn3s5WBeBD6IPXRas/0\" alt=\"此处输入图片的描述\"></h2><h3 id=\"1-3-需要画图的题目\"><a href=\"#1-3-需要画图的题目\" class=\"headerlink\" title=\"1.3 需要画图的题目\"></a>1.3 需要画图的题目</h3><h2 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaJGmlicibzFHuKibzjPE9aJhQ4syq8dhjnJ3g/0\" alt=\"此处输入图片的描述\"></h2><h3 id=\"1-4-条件概率公式\"><a href=\"#1-4-条件概率公式\" class=\"headerlink\" title=\"1.4 条件概率公式\"></a>1.4 条件概率公式</h3><p>P(B|A):当A发生时，B的概率<br>P(BA):A和B同时发生的概率<br>P(B|A)=$ \\frac{P(BA)}{P(A)}$<br>题目1：<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaIJBQXhkH8IIIM6ib32znmX0bO4sGzdCuJs/0\" alt=\"此处输入图片的描述\"><br>题目2：<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaJmWrQ2R4r4DojZFIXegJFuDOByRG16sYY/0\" alt=\"此处输入图片的描述\"><br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaIeiaozibo4HsIjmMzZtOvVggQmkmWbcTjLM/0\" alt=\"此处输入图片的描述\"><br>P(B|A)=$\\frac{1-0.8}{0.05}$</p>\n<hr>\n<h3 id=\"1-5-多个体下，某事发生的概率（全概率公式）\"><a href=\"#1-5-多个体下，某事发生的概率（全概率公式）\" class=\"headerlink\" title=\"1.5 多个体下，某事发生的概率（全概率公式）\"></a>1.5 多个体下，某事发生的概率（全概率公式）</h3><p><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaJibG00N7QpanSQbH5TkIS3A8m4Yp4lHLwM/0\" alt=\"此处输入图片的描述\"><br>P=20%<em>0.02+80%</em>0.01=0.0084</p>\n<hr>\n<h3 id=\"1-6-多个体下，事件发生时，求是某个个体的概率（贝叶斯公式）\"><a href=\"#1-6-多个体下，事件发生时，求是某个个体的概率（贝叶斯公式）\" class=\"headerlink\" title=\"1.6 多个体下，事件发生时，求是某个个体的概率（贝叶斯公式）\"></a>1.6 多个体下，事件发生时，求是某个个体的概率（贝叶斯公式）</h3><p><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaI8Bty93BXHhLvLycmVaYdJw9tUd3NpIMw/0\" alt=\"此处输入图片的描述\"><br>P=$\\frac{0.2*0.002}{0.0084}$</p>\n","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"1-事件的概率\"><a href=\"#1-事件的概率\" class=\"headerlink\" title=\"1. 事件的概率\"></a>1. 事件的概率</h2><p><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaKUYqhdjGh3FQGnsCibSIxJZ4GCluib9yzeI/0\" alt=\"此处输入图片的描述\"><br>","more":"</p>\n<h3 id=\"1-1-无放回类题目\"><a href=\"#1-1-无放回类题目\" class=\"headerlink\" title=\"1.1 无放回类题目\"></a>1.1 无放回类题目</h3><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaK2ictibSll3ic0ZUibultgmgPK7MNibAuLHCs0/0\" alt=\"此处输入图片的描述\"></h2><h3 id=\"1-2-有放回类题目\"><a href=\"#1-2-有放回类题目\" class=\"headerlink\" title=\"1.2 有放回类题目\"></a>1.2 有放回类题目</h3><h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaLQQJCER2TWfqbhDnLn3s5WBeBD6IPXRas/0\" alt=\"此处输入图片的描述\"></h2><h3 id=\"1-3-需要画图的题目\"><a href=\"#1-3-需要画图的题目\" class=\"headerlink\" title=\"1.3 需要画图的题目\"></a>1.3 需要画图的题目</h3><h2 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaJGmlicibzFHuKibzjPE9aJhQ4syq8dhjnJ3g/0\" alt=\"此处输入图片的描述\"></h2><h3 id=\"1-4-条件概率公式\"><a href=\"#1-4-条件概率公式\" class=\"headerlink\" title=\"1.4 条件概率公式\"></a>1.4 条件概率公式</h3><p>P(B|A):当A发生时，B的概率<br>P(BA):A和B同时发生的概率<br>P(B|A)=$ \\frac{P(BA)}{P(A)}$<br>题目1：<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaIJBQXhkH8IIIM6ib32znmX0bO4sGzdCuJs/0\" alt=\"此处输入图片的描述\"><br>题目2：<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaJmWrQ2R4r4DojZFIXegJFuDOByRG16sYY/0\" alt=\"此处输入图片的描述\"><br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaIeiaozibo4HsIjmMzZtOvVggQmkmWbcTjLM/0\" alt=\"此处输入图片的描述\"><br>P(B|A)=$\\frac{1-0.8}{0.05}$</p>\n<hr>\n<h3 id=\"1-5-多个体下，某事发生的概率（全概率公式）\"><a href=\"#1-5-多个体下，某事发生的概率（全概率公式）\" class=\"headerlink\" title=\"1.5 多个体下，某事发生的概率（全概率公式）\"></a>1.5 多个体下，某事发生的概率（全概率公式）</h3><p><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaJibG00N7QpanSQbH5TkIS3A8m4Yp4lHLwM/0\" alt=\"此处输入图片的描述\"><br>P=20%<em>0.02+80%</em>0.01=0.0084</p>\n<hr>\n<h3 id=\"1-6-多个体下，事件发生时，求是某个个体的概率（贝叶斯公式）\"><a href=\"#1-6-多个体下，事件发生时，求是某个个体的概率（贝叶斯公式）\" class=\"headerlink\" title=\"1.6 多个体下，事件发生时，求是某个个体的概率（贝叶斯公式）\"></a>1.6 多个体下，事件发生时，求是某个个体的概率（贝叶斯公式）</h3><p><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQksUpN1AVMYiaI8Bty93BXHhLvLycmVaYdJw9tUd3NpIMw/0\" alt=\"此处输入图片的描述\"><br>P=$\\frac{0.2*0.002}{0.0084}$</p>"},{"title":"线性代数","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n## 1. 线性代数\n[矩阵Markdown语法][1]\n[Markdown LaTeX 公式][2]\n$$ \\left[ \\begin{array}{cc|c} 1 & 2 & 3 \\\\\\ 4 & 5 & 6 \\end{array} \\right] $$\n\n$$\n \\left\\{\n \\begin{matrix}\n   1 & 2 & 3 \\\\\n   4 & 5 & 6 \\\\\n   7 & 8 & 9\n  \\end{matrix}\n  \\right\\} \\tag{2}\n$$\n\n$\\bigl(\n    \\begin{smallmatrix}\n\t\tl&l\\\\j&z\n\t\\end{smallmatrix}\n\\bigr)$\n\n<!-- more -->\n---\n### 1.1 行列式的性质\n行Row 列Column：r3表示行三\n**求二阶行列式：**\n$$\\left|\n \\begin{matrix}\n   1 & 2 \\\\\n   2 & 3\n  \\end{matrix}\n  \\right| \\tag{=1*3-2*2=-1}\n$$\n> 捺积减撇积\n\n**求多阶行列式：（化三角形法）**\n性质：某行（列）减去或加上另一行（列）的几倍，行列式不变\n1. 方法：利用性质，使捺下方数字变为0\n2. 顺序：先从上到下用第一行变换第一列，再用第二行变换第二列...\n3. 捺（对角线）积即结果\n\n其他辅助性质：\n2. 某行（列）乘k，等于k乘以此行列式\n3. 互换两行或两列，行列式变号\n4. 两行（列）相同或成比例时，行列式为0\n5. 某行（列）为两项相加减时，行列式可拆成两个行列式相加减\n6. 行列式展开：行列式等于它的某一行或列的元素与其对应的代数余子式的乘积之和\n    > D=a<sub>i1</sub>A<sub>i1</sub>+a<sub>i2</sub>A<sub>i2</sub>+...+a<sub>in</sub>A<sub>in</sub> （第i行）\n    D=a<sub>1j</sub>A<sub>1j</sub>+a<sub>2j</sub>A<sub>2j</sub>+...+a<sub>nj</sub>A<sub>nj</sub> （第j列）\n\n---\n### 1.2 行列式的计算及应用\n**类型1：只有两个数字**\n$$\\left|\n \\begin{matrix}\n   x&a&\\cdots&a\\\\\n   a&x&\\cdots&a\\\\\n   \\vdots&\\vdots&\\ddots&\\vdots\\\\\n   a&a&\\cdots&x\n  \\end{matrix}\n  \\right|\n$$=(x-a)<sup>n-1</sup>[x+(n-1)a]\n\n**类型2：范德蒙得行列式**\n第一行都是1，第二行都是X<sup>1</sup>，第三行都是X<sup>2</sup>，第n行都是X<sup>n-1</sup>\n![范德蒙得行列式][3]\n\n**类型3：性质4、5**\n![性质4、5][4]\n\n**类型4：求余子式、代数余子式**\n余子式：M   M<sub>23</sub>即原式抹去第二行第三列后得到的行列式\n代数余子式：A   A<sub>23</sub>即(-1)<sup>2+3</sup>*M<sub>23</sub>\nM 和A 的关系：和（两数之和）奇则反（-1）\n\n**类型5：降阶法/某行0值较多时，用行列式展开公式**\n步骤：某一行或列的元素乘以其对应的代数余子式，积相加\n![用第二列来算][5]\n\n**类型6：多个A或M相加减**\nA步骤：用系数置换对应位置的数字，再求行列式。\nM步骤：M转化为A（和奇则反），再进行A步骤。\n![多个A或M相加减][6]\n\n**类型7：判断方程组的解的情况**\n步骤：x<sub>1</sub>、x<sub>2</sub>、x<sub>3</sub>的系数构成行列式，解行列式，判断D.equals(0)&& is齐次\n![判断方程组的解的情况][7]\n\n\n\n---\n### 1.3 矩阵的运算（三种+七种题型）\n**1. 矩阵加减：**\n直接加减，系数直接乘。\n![矩阵加减][8]\n\n**2. 矩阵相乘**\n前行乘后列。\n每行都要遍历每列，前乘上+后乘下。\n结果：A的行数，B的列数\n![矩阵相乘][9]\n![特殊情况][10]\n\n**3. 矩阵取行列式**\n矩阵的行列式即对应行列式的值。\n注意公式：$|\\lambda A|=\\lambda$<sup>n</sup>$|A|$\n![此处输入图片的描述][11]\n---\n**1. 涉及转置的题目**\n转置：A=(1 0 1)=>A<sup>T</sup>=$\\Bigl(\n    \\begin{smallmatrix}\n\t\t1\\\\0\\\\1\n\t\\end{smallmatrix}\n\\Bigr)$\n![此处输入图片的描述][12]\n\n**2. 证明矩阵可逆**\n满足两个条件：1、是方阵。2、|A| != 0 或存在方阵B，使AB=E 或BA=E\n![此处输入图片的描述][13]\n![此处输入图片的描述][14]\n\n**3. 求逆矩阵A<sup>-1</sup>**\n让A与E组成一个大矩阵，经过一系列行变换，\n使原来A对应的位置变成E，E对应的位置变成A的逆矩阵\n![此处输入图片的描述][15]\n\n**4. 利用A·A<sup>-1</sup>=E 或A<sup>-1</sup>·A=E 计算**\n![此处输入图片的描述][16]\n\n**5. 利用A·A$^*$=|A|E 或A$^*$·A=|A|E 计算**\n（$A^*$叫做伴随矩阵）\n![此处输入图片的描述][17]\n\n**6. 求矩阵的秩**\n对矩阵进行行变换，使下行左端的0比上行多，直到最下行全为0\n此时秩即 有非零数的行 之数，如下2的秩写为R(A)=4\n\n特殊情况：\n1. 最下面几行全为0\n1 2 3 4\n0 2 3 4\n0 0 0 0\n0 0 0 0\n2. 一行比一行多\n1 2 3 4\n0 1 2 3\n0 0 1 2\n0 0 0 1\n\n**7. 已知矩阵的秩，求矩阵内的未知数**\n![此处输入图片的描述][18]\n\n\n---\n### 1.4 向量组和线性空间\n\n\n  [1]: https://blog.csdn.net/qq_38228254/article/details/79469727\n  [2]: https://blog.csdn.net/u014630987/article/details/70156489\n  [3]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkS0tLe358tYobozeT1FWFu9ZdbeAye6cLtbwhHFWEMOc/0\n  [4]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkS0tLe358tYoAhCvpQ9utcf3lMrnaTyJCQAnfYCRar4c/0\n  [5]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkRYHVd0lqko9drOEYf0foR9bn9icR08jank2H83W694Fc/0\n  [6]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkRYHVd0lqkoichFmpw8JXUlGPJiaGxMcokTicysGFVvkK8M/0\n  [7]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkRYHVd0lqkoicKxeJiawficy7MYJ7NoLnZaVtrqIKaeWT7k/0\n  [8]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnk8zDNWm3PB9b1rys1O1HaD9ZLTJRfjg8N8/0\n  [9]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnkicicXbXAqyrTgUC1l6ZicfosaIKLg5hUlehE/0\n  [10]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnk8Z9XribIcSpYdBv0IFZqpBMqGFU33ibZ8Ho/0\n  [11]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnkicTS4ic982TicZHxmjw1poLPqCt02icVcV2KI/0\n  [12]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkxpY4Y7z9h8fch1VZ7eZibjja5KFSicWicVVpEmEDnibCAicg/0\n  [13]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XwNzPWUP2zOghB67ic57kmjklbJKu72vjRM/0\n  [14]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XxeDYZ0hbUVicVST58ia6fONRib7r7TicGUaXo/0\n  [15]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XxqOrnRyBUvE8MOglBeK3ibPzNU6ACGFEjI/0\n  [16]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XyIXOWJerxiabGpY9rWWyyWOs85E8sIICRU/0\n  [17]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XxeJ4rvqqAxBXW7VYwYaAyVJ1ap6N1jGibQ/0\n  [18]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5Xzu0RnL1DDoO3dBn36gN3WIKLuUjm3xiao0/0","source":"_posts/线性代数.md","raw":"---\ntitle: 线性代数\ndate: 2019-01-21 10:26:49\ntags: 数学\n---\n\n---\n## 1. 线性代数\n[矩阵Markdown语法][1]\n[Markdown LaTeX 公式][2]\n$$ \\left[ \\begin{array}{cc|c} 1 & 2 & 3 \\\\\\ 4 & 5 & 6 \\end{array} \\right] $$\n\n$$\n \\left\\{\n \\begin{matrix}\n   1 & 2 & 3 \\\\\n   4 & 5 & 6 \\\\\n   7 & 8 & 9\n  \\end{matrix}\n  \\right\\} \\tag{2}\n$$\n\n$\\bigl(\n    \\begin{smallmatrix}\n\t\tl&l\\\\j&z\n\t\\end{smallmatrix}\n\\bigr)$\n\n<!-- more -->\n---\n### 1.1 行列式的性质\n行Row 列Column：r3表示行三\n**求二阶行列式：**\n$$\\left|\n \\begin{matrix}\n   1 & 2 \\\\\n   2 & 3\n  \\end{matrix}\n  \\right| \\tag{=1*3-2*2=-1}\n$$\n> 捺积减撇积\n\n**求多阶行列式：（化三角形法）**\n性质：某行（列）减去或加上另一行（列）的几倍，行列式不变\n1. 方法：利用性质，使捺下方数字变为0\n2. 顺序：先从上到下用第一行变换第一列，再用第二行变换第二列...\n3. 捺（对角线）积即结果\n\n其他辅助性质：\n2. 某行（列）乘k，等于k乘以此行列式\n3. 互换两行或两列，行列式变号\n4. 两行（列）相同或成比例时，行列式为0\n5. 某行（列）为两项相加减时，行列式可拆成两个行列式相加减\n6. 行列式展开：行列式等于它的某一行或列的元素与其对应的代数余子式的乘积之和\n    > D=a<sub>i1</sub>A<sub>i1</sub>+a<sub>i2</sub>A<sub>i2</sub>+...+a<sub>in</sub>A<sub>in</sub> （第i行）\n    D=a<sub>1j</sub>A<sub>1j</sub>+a<sub>2j</sub>A<sub>2j</sub>+...+a<sub>nj</sub>A<sub>nj</sub> （第j列）\n\n---\n### 1.2 行列式的计算及应用\n**类型1：只有两个数字**\n$$\\left|\n \\begin{matrix}\n   x&a&\\cdots&a\\\\\n   a&x&\\cdots&a\\\\\n   \\vdots&\\vdots&\\ddots&\\vdots\\\\\n   a&a&\\cdots&x\n  \\end{matrix}\n  \\right|\n$$=(x-a)<sup>n-1</sup>[x+(n-1)a]\n\n**类型2：范德蒙得行列式**\n第一行都是1，第二行都是X<sup>1</sup>，第三行都是X<sup>2</sup>，第n行都是X<sup>n-1</sup>\n![范德蒙得行列式][3]\n\n**类型3：性质4、5**\n![性质4、5][4]\n\n**类型4：求余子式、代数余子式**\n余子式：M   M<sub>23</sub>即原式抹去第二行第三列后得到的行列式\n代数余子式：A   A<sub>23</sub>即(-1)<sup>2+3</sup>*M<sub>23</sub>\nM 和A 的关系：和（两数之和）奇则反（-1）\n\n**类型5：降阶法/某行0值较多时，用行列式展开公式**\n步骤：某一行或列的元素乘以其对应的代数余子式，积相加\n![用第二列来算][5]\n\n**类型6：多个A或M相加减**\nA步骤：用系数置换对应位置的数字，再求行列式。\nM步骤：M转化为A（和奇则反），再进行A步骤。\n![多个A或M相加减][6]\n\n**类型7：判断方程组的解的情况**\n步骤：x<sub>1</sub>、x<sub>2</sub>、x<sub>3</sub>的系数构成行列式，解行列式，判断D.equals(0)&& is齐次\n![判断方程组的解的情况][7]\n\n\n\n---\n### 1.3 矩阵的运算（三种+七种题型）\n**1. 矩阵加减：**\n直接加减，系数直接乘。\n![矩阵加减][8]\n\n**2. 矩阵相乘**\n前行乘后列。\n每行都要遍历每列，前乘上+后乘下。\n结果：A的行数，B的列数\n![矩阵相乘][9]\n![特殊情况][10]\n\n**3. 矩阵取行列式**\n矩阵的行列式即对应行列式的值。\n注意公式：$|\\lambda A|=\\lambda$<sup>n</sup>$|A|$\n![此处输入图片的描述][11]\n---\n**1. 涉及转置的题目**\n转置：A=(1 0 1)=>A<sup>T</sup>=$\\Bigl(\n    \\begin{smallmatrix}\n\t\t1\\\\0\\\\1\n\t\\end{smallmatrix}\n\\Bigr)$\n![此处输入图片的描述][12]\n\n**2. 证明矩阵可逆**\n满足两个条件：1、是方阵。2、|A| != 0 或存在方阵B，使AB=E 或BA=E\n![此处输入图片的描述][13]\n![此处输入图片的描述][14]\n\n**3. 求逆矩阵A<sup>-1</sup>**\n让A与E组成一个大矩阵，经过一系列行变换，\n使原来A对应的位置变成E，E对应的位置变成A的逆矩阵\n![此处输入图片的描述][15]\n\n**4. 利用A·A<sup>-1</sup>=E 或A<sup>-1</sup>·A=E 计算**\n![此处输入图片的描述][16]\n\n**5. 利用A·A$^*$=|A|E 或A$^*$·A=|A|E 计算**\n（$A^*$叫做伴随矩阵）\n![此处输入图片的描述][17]\n\n**6. 求矩阵的秩**\n对矩阵进行行变换，使下行左端的0比上行多，直到最下行全为0\n此时秩即 有非零数的行 之数，如下2的秩写为R(A)=4\n\n特殊情况：\n1. 最下面几行全为0\n1 2 3 4\n0 2 3 4\n0 0 0 0\n0 0 0 0\n2. 一行比一行多\n1 2 3 4\n0 1 2 3\n0 0 1 2\n0 0 0 1\n\n**7. 已知矩阵的秩，求矩阵内的未知数**\n![此处输入图片的描述][18]\n\n\n---\n### 1.4 向量组和线性空间\n\n\n  [1]: https://blog.csdn.net/qq_38228254/article/details/79469727\n  [2]: https://blog.csdn.net/u014630987/article/details/70156489\n  [3]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkS0tLe358tYobozeT1FWFu9ZdbeAye6cLtbwhHFWEMOc/0\n  [4]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkS0tLe358tYoAhCvpQ9utcf3lMrnaTyJCQAnfYCRar4c/0\n  [5]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkRYHVd0lqko9drOEYf0foR9bn9icR08jank2H83W694Fc/0\n  [6]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkRYHVd0lqkoichFmpw8JXUlGPJiaGxMcokTicysGFVvkK8M/0\n  [7]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkRYHVd0lqkoicKxeJiawficy7MYJ7NoLnZaVtrqIKaeWT7k/0\n  [8]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnk8zDNWm3PB9b1rys1O1HaD9ZLTJRfjg8N8/0\n  [9]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnkicicXbXAqyrTgUC1l6ZicfosaIKLg5hUlehE/0\n  [10]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnk8Z9XribIcSpYdBv0IFZqpBMqGFU33ibZ8Ho/0\n  [11]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnkicTS4ic982TicZHxmjw1poLPqCt02icVcV2KI/0\n  [12]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkxpY4Y7z9h8fch1VZ7eZibjja5KFSicWicVVpEmEDnibCAicg/0\n  [13]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XwNzPWUP2zOghB67ic57kmjklbJKu72vjRM/0\n  [14]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XxeDYZ0hbUVicVST58ia6fONRib7r7TicGUaXo/0\n  [15]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XxqOrnRyBUvE8MOglBeK3ibPzNU6ACGFEjI/0\n  [16]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XyIXOWJerxiabGpY9rWWyyWOs85E8sIICRU/0\n  [17]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XxeJ4rvqqAxBXW7VYwYaAyVJ1ap6N1jGibQ/0\n  [18]: https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5Xzu0RnL1DDoO3dBn36gN3WIKLuUjm3xiao0/0","slug":"线性代数","published":1,"updated":"2019-01-21T09:02:09.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642py1000dy0oopg3wucld","content":"<hr>\n<h2 id=\"1-线性代数\"><a href=\"#1-线性代数\" class=\"headerlink\" title=\"1. 线性代数\"></a>1. 线性代数</h2><p><a href=\"https://blog.csdn.net/qq_38228254/article/details/79469727\" target=\"_blank\" rel=\"noopener\">矩阵Markdown语法</a><br><a href=\"https://blog.csdn.net/u014630987/article/details/70156489\" target=\"_blank\" rel=\"noopener\">Markdown LaTeX 公式</a></p>\n<script type=\"math/tex; mode=display\">\\left[ \\begin{array}{cc|c} 1 & 2 & 3 \\\\\\ 4 & 5 & 6 \\end{array} \\right]</script><script type=\"math/tex; mode=display\">\n \\left\\{\n \\begin{matrix}\n   1 & 2 & 3 \\\\\n   4 & 5 & 6 \\\\\n   7 & 8 & 9\n  \\end{matrix}\n  \\right\\} \\tag{2}</script><p>$\\bigl(<br>    \\begin{smallmatrix}<br>        l&amp;l\\j&amp;z<br>    \\end{smallmatrix}<br>\\bigr)$</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h3 id=\"1-1-行列式的性质\"><a href=\"#1-1-行列式的性质\" class=\"headerlink\" title=\"1.1 行列式的性质\"></a>1.1 行列式的性质</h3><p>行Row 列Column：r3表示行三<br><strong>求二阶行列式：</strong></p>\n<script type=\"math/tex; mode=display\">\\left|\n \\begin{matrix}\n   1 & 2 \\\\\n   2 & 3\n  \\end{matrix}\n  \\right| \\tag{=1*3-2*2=-1}</script><blockquote>\n<p>捺积减撇积</p>\n</blockquote>\n<p><strong>求多阶行列式：（化三角形法）</strong><br>性质：某行（列）减去或加上另一行（列）的几倍，行列式不变</p>\n<ol>\n<li>方法：利用性质，使捺下方数字变为0</li>\n<li>顺序：先从上到下用第一行变换第一列，再用第二行变换第二列…</li>\n<li>捺（对角线）积即结果</li>\n</ol>\n<p>其他辅助性质：</p>\n<ol>\n<li>某行（列）乘k，等于k乘以此行列式</li>\n<li>互换两行或两列，行列式变号</li>\n<li>两行（列）相同或成比例时，行列式为0</li>\n<li>某行（列）为两项相加减时，行列式可拆成两个行列式相加减</li>\n<li>行列式展开：行列式等于它的某一行或列的元素与其对应的代数余子式的乘积之和<blockquote>\n<p>D=a<sub>i1</sub>A<sub>i1</sub>+a<sub>i2</sub>A<sub>i2</sub>+…+a<sub>in</sub>A<sub>in</sub> （第i行）<br> D=a<sub>1j</sub>A<sub>1j</sub>+a<sub>2j</sub>A<sub>2j</sub>+…+a<sub>nj</sub>A<sub>nj</sub> （第j列）</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h3 id=\"1-2-行列式的计算及应用\"><a href=\"#1-2-行列式的计算及应用\" class=\"headerlink\" title=\"1.2 行列式的计算及应用\"></a>1.2 行列式的计算及应用</h3><p><strong>类型1：只有两个数字</strong></p>\n<p>$$\\left|<br> \\begin{matrix}<br>   x&amp;a&amp;\\cdots&amp;a\\<br>   a&amp;x&amp;\\cdots&amp;a\\<br>   \\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots\\<br>   a&amp;a&amp;\\cdots&amp;x<br>  \\end{matrix}<br>  \\right|</p>\n<p>$$=(x-a)<sup>n-1</sup>[x+(n-1)a]</p>\n<p><strong>类型2：范德蒙得行列式</strong><br>第一行都是1，第二行都是X<sup>1</sup>，第三行都是X<sup>2</sup>，第n行都是X<sup>n-1</sup><br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkS0tLe358tYobozeT1FWFu9ZdbeAye6cLtbwhHFWEMOc/0\" alt=\"范德蒙得行列式\"></p>\n<p><strong>类型3：性质4、5</strong><br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkS0tLe358tYoAhCvpQ9utcf3lMrnaTyJCQAnfYCRar4c/0\" alt=\"性质4、5\"></p>\n<p><strong>类型4：求余子式、代数余子式</strong><br>余子式：M   M<sub>23</sub>即原式抹去第二行第三列后得到的行列式<br>代数余子式：A   A<sub>23</sub>即(-1)<sup>2+3</sup>*M<sub>23</sub><br>M 和A 的关系：和（两数之和）奇则反（-1）</p>\n<p><strong>类型5：降阶法/某行0值较多时，用行列式展开公式</strong><br>步骤：某一行或列的元素乘以其对应的代数余子式，积相加<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkRYHVd0lqko9drOEYf0foR9bn9icR08jank2H83W694Fc/0\" alt=\"用第二列来算\"></p>\n<p><strong>类型6：多个A或M相加减</strong><br>A步骤：用系数置换对应位置的数字，再求行列式。<br>M步骤：M转化为A（和奇则反），再进行A步骤。<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkRYHVd0lqkoichFmpw8JXUlGPJiaGxMcokTicysGFVvkK8M/0\" alt=\"多个A或M相加减\"></p>\n<p><strong>类型7：判断方程组的解的情况</strong><br>步骤：x<sub>1</sub>、x<sub>2</sub>、x<sub>3</sub>的系数构成行列式，解行列式，判断D.equals(0)&amp;&amp; is齐次<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkRYHVd0lqkoicKxeJiawficy7MYJ7NoLnZaVtrqIKaeWT7k/0\" alt=\"判断方程组的解的情况\"></p>\n<hr>\n<h3 id=\"1-3-矩阵的运算（三种-七种题型）\"><a href=\"#1-3-矩阵的运算（三种-七种题型）\" class=\"headerlink\" title=\"1.3 矩阵的运算（三种+七种题型）\"></a>1.3 矩阵的运算（三种+七种题型）</h3><p><strong>1. 矩阵加减：</strong><br>直接加减，系数直接乘。<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnk8zDNWm3PB9b1rys1O1HaD9ZLTJRfjg8N8/0\" alt=\"矩阵加减\"></p>\n<p><strong>2. 矩阵相乘</strong><br>前行乘后列。<br>每行都要遍历每列，前乘上+后乘下。<br>结果：A的行数，B的列数<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnkicicXbXAqyrTgUC1l6ZicfosaIKLg5hUlehE/0\" alt=\"矩阵相乘\"><br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnk8Z9XribIcSpYdBv0IFZqpBMqGFU33ibZ8Ho/0\" alt=\"特殊情况\"></p>\n<p><strong>3. 矩阵取行列式</strong><br>矩阵的行列式即对应行列式的值。<br>注意公式：$|\\lambda A|=\\lambda$<sup>n</sup>$|A|$</p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnkicTS4ic982TicZHxmjw1poLPqCt02icVcV2KI/0\" alt=\"此处输入图片的描述\"></h2><p><strong>1. 涉及转置的题目</strong><br>转置：A=(1 0 1)=&gt;A<sup>T</sup>=$\\Bigl(<br>    \\begin{smallmatrix}<br>        1\\0\\1<br>    \\end{smallmatrix}<br>\\Bigr)$<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkxpY4Y7z9h8fch1VZ7eZibjja5KFSicWicVVpEmEDnibCAicg/0\" alt=\"此处输入图片的描述\"></p>\n<p><strong>2. 证明矩阵可逆</strong><br>满足两个条件：1、是方阵。2、|A| != 0 或存在方阵B，使AB=E 或BA=E<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XwNzPWUP2zOghB67ic57kmjklbJKu72vjRM/0\" alt=\"此处输入图片的描述\"><br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XxeDYZ0hbUVicVST58ia6fONRib7r7TicGUaXo/0\" alt=\"此处输入图片的描述\"></p>\n<p><strong>3. 求逆矩阵A<sup>-1</sup></strong><br>让A与E组成一个大矩阵，经过一系列行变换，<br>使原来A对应的位置变成E，E对应的位置变成A的逆矩阵<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XxqOrnRyBUvE8MOglBeK3ibPzNU6ACGFEjI/0\" alt=\"此处输入图片的描述\"></p>\n<p><strong>4. 利用A·A<sup>-1</sup>=E 或A<sup>-1</sup>·A=E 计算</strong><br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XyIXOWJerxiabGpY9rWWyyWOs85E8sIICRU/0\" alt=\"此处输入图片的描述\"></p>\n<p><strong>5. 利用A·A$^<em>$=|A|E 或A$^</em>$·A=|A|E 计算</strong><br>（$A^*$叫做伴随矩阵）<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XxeJ4rvqqAxBXW7VYwYaAyVJ1ap6N1jGibQ/0\" alt=\"此处输入图片的描述\"></p>\n<p><strong>6. 求矩阵的秩</strong><br>对矩阵进行行变换，使下行左端的0比上行多，直到最下行全为0<br>此时秩即 有非零数的行 之数，如下2的秩写为R(A)=4</p>\n<p>特殊情况：</p>\n<ol>\n<li>最下面几行全为0<br>1 2 3 4<br>0 2 3 4<br>0 0 0 0<br>0 0 0 0</li>\n<li>一行比一行多<br>1 2 3 4<br>0 1 2 3<br>0 0 1 2<br>0 0 0 1</li>\n</ol>\n<p><strong>7. 已知矩阵的秩，求矩阵内的未知数</strong><br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5Xzu0RnL1DDoO3dBn36gN3WIKLuUjm3xiao0/0\" alt=\"此处输入图片的描述\"></p>\n<hr>\n<h3 id=\"1-4-向量组和线性空间\"><a href=\"#1-4-向量组和线性空间\" class=\"headerlink\" title=\"1.4 向量组和线性空间\"></a>1.4 向量组和线性空间</h3>","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"1-线性代数\"><a href=\"#1-线性代数\" class=\"headerlink\" title=\"1. 线性代数\"></a>1. 线性代数</h2><p><a href=\"https://blog.csdn.net/qq_38228254/article/details/79469727\" target=\"_blank\" rel=\"noopener\">矩阵Markdown语法</a><br><a href=\"https://blog.csdn.net/u014630987/article/details/70156489\" target=\"_blank\" rel=\"noopener\">Markdown LaTeX 公式</a></p>\n<script type=\"math/tex; mode=display\">\\left[ \\begin{array}{cc|c} 1 & 2 & 3 \\\\\\ 4 & 5 & 6 \\end{array} \\right]</script><script type=\"math/tex; mode=display\">\n \\left\\{\n \\begin{matrix}\n   1 & 2 & 3 \\\\\n   4 & 5 & 6 \\\\\n   7 & 8 & 9\n  \\end{matrix}\n  \\right\\} \\tag{2}</script><p>$\\bigl(<br>    \\begin{smallmatrix}<br>        l&amp;l\\j&amp;z<br>    \\end{smallmatrix}<br>\\bigr)$</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><h3 id=\"1-1-行列式的性质\"><a href=\"#1-1-行列式的性质\" class=\"headerlink\" title=\"1.1 行列式的性质\"></a>1.1 行列式的性质</h3><p>行Row 列Column：r3表示行三<br><strong>求二阶行列式：</strong></p>\n<script type=\"math/tex; mode=display\">\\left|\n \\begin{matrix}\n   1 & 2 \\\\\n   2 & 3\n  \\end{matrix}\n  \\right| \\tag{=1*3-2*2=-1}</script><blockquote>\n<p>捺积减撇积</p>\n</blockquote>\n<p><strong>求多阶行列式：（化三角形法）</strong><br>性质：某行（列）减去或加上另一行（列）的几倍，行列式不变</p>\n<ol>\n<li>方法：利用性质，使捺下方数字变为0</li>\n<li>顺序：先从上到下用第一行变换第一列，再用第二行变换第二列…</li>\n<li>捺（对角线）积即结果</li>\n</ol>\n<p>其他辅助性质：</p>\n<ol>\n<li>某行（列）乘k，等于k乘以此行列式</li>\n<li>互换两行或两列，行列式变号</li>\n<li>两行（列）相同或成比例时，行列式为0</li>\n<li>某行（列）为两项相加减时，行列式可拆成两个行列式相加减</li>\n<li>行列式展开：行列式等于它的某一行或列的元素与其对应的代数余子式的乘积之和<blockquote>\n<p>D=a<sub>i1</sub>A<sub>i1</sub>+a<sub>i2</sub>A<sub>i2</sub>+…+a<sub>in</sub>A<sub>in</sub> （第i行）<br> D=a<sub>1j</sub>A<sub>1j</sub>+a<sub>2j</sub>A<sub>2j</sub>+…+a<sub>nj</sub>A<sub>nj</sub> （第j列）</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h3 id=\"1-2-行列式的计算及应用\"><a href=\"#1-2-行列式的计算及应用\" class=\"headerlink\" title=\"1.2 行列式的计算及应用\"></a>1.2 行列式的计算及应用</h3><p><strong>类型1：只有两个数字</strong></p>\n<p>$$\\left|<br> \\begin{matrix}<br>   x&amp;a&amp;\\cdots&amp;a\\<br>   a&amp;x&amp;\\cdots&amp;a\\<br>   \\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots\\<br>   a&amp;a&amp;\\cdots&amp;x<br>  \\end{matrix}<br>  \\right|</p>\n<p>$$=(x-a)<sup>n-1</sup>[x+(n-1)a]</p>\n<p><strong>类型2：范德蒙得行列式</strong><br>第一行都是1，第二行都是X<sup>1</sup>，第三行都是X<sup>2</sup>，第n行都是X<sup>n-1</sup><br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkS0tLe358tYobozeT1FWFu9ZdbeAye6cLtbwhHFWEMOc/0\" alt=\"范德蒙得行列式\"></p>\n<p><strong>类型3：性质4、5</strong><br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkS0tLe358tYoAhCvpQ9utcf3lMrnaTyJCQAnfYCRar4c/0\" alt=\"性质4、5\"></p>\n<p><strong>类型4：求余子式、代数余子式</strong><br>余子式：M   M<sub>23</sub>即原式抹去第二行第三列后得到的行列式<br>代数余子式：A   A<sub>23</sub>即(-1)<sup>2+3</sup>*M<sub>23</sub><br>M 和A 的关系：和（两数之和）奇则反（-1）</p>\n<p><strong>类型5：降阶法/某行0值较多时，用行列式展开公式</strong><br>步骤：某一行或列的元素乘以其对应的代数余子式，积相加<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkRYHVd0lqko9drOEYf0foR9bn9icR08jank2H83W694Fc/0\" alt=\"用第二列来算\"></p>\n<p><strong>类型6：多个A或M相加减</strong><br>A步骤：用系数置换对应位置的数字，再求行列式。<br>M步骤：M转化为A（和奇则反），再进行A步骤。<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkRYHVd0lqkoichFmpw8JXUlGPJiaGxMcokTicysGFVvkK8M/0\" alt=\"多个A或M相加减\"></p>\n<p><strong>类型7：判断方程组的解的情况</strong><br>步骤：x<sub>1</sub>、x<sub>2</sub>、x<sub>3</sub>的系数构成行列式，解行列式，判断D.equals(0)&amp;&amp; is齐次<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkRYHVd0lqkoicKxeJiawficy7MYJ7NoLnZaVtrqIKaeWT7k/0\" alt=\"判断方程组的解的情况\"></p>\n<hr>\n<h3 id=\"1-3-矩阵的运算（三种-七种题型）\"><a href=\"#1-3-矩阵的运算（三种-七种题型）\" class=\"headerlink\" title=\"1.3 矩阵的运算（三种+七种题型）\"></a>1.3 矩阵的运算（三种+七种题型）</h3><p><strong>1. 矩阵加减：</strong><br>直接加减，系数直接乘。<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnk8zDNWm3PB9b1rys1O1HaD9ZLTJRfjg8N8/0\" alt=\"矩阵加减\"></p>\n<p><strong>2. 矩阵相乘</strong><br>前行乘后列。<br>每行都要遍历每列，前乘上+后乘下。<br>结果：A的行数，B的列数<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnkicicXbXAqyrTgUC1l6ZicfosaIKLg5hUlehE/0\" alt=\"矩阵相乘\"><br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnk8Z9XribIcSpYdBv0IFZqpBMqGFU33ibZ8Ho/0\" alt=\"特殊情况\"></p>\n<p><strong>3. 矩阵取行列式</strong><br>矩阵的行列式即对应行列式的值。<br>注意公式：$|\\lambda A|=\\lambda$<sup>n</sup>$|A|$</p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQk7L4Sib91bnkicTS4ic982TicZHxmjw1poLPqCt02icVcV2KI/0\" alt=\"此处输入图片的描述\"></h2><p><strong>1. 涉及转置的题目</strong><br>转置：A=(1 0 1)=&gt;A<sup>T</sup>=$\\Bigl(<br>    \\begin{smallmatrix}<br>        1\\0\\1<br>    \\end{smallmatrix}<br>\\Bigr)$<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkxpY4Y7z9h8fch1VZ7eZibjja5KFSicWicVVpEmEDnibCAicg/0\" alt=\"此处输入图片的描述\"></p>\n<p><strong>2. 证明矩阵可逆</strong><br>满足两个条件：1、是方阵。2、|A| != 0 或存在方阵B，使AB=E 或BA=E<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XwNzPWUP2zOghB67ic57kmjklbJKu72vjRM/0\" alt=\"此处输入图片的描述\"><br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XxeDYZ0hbUVicVST58ia6fONRib7r7TicGUaXo/0\" alt=\"此处输入图片的描述\"></p>\n<p><strong>3. 求逆矩阵A<sup>-1</sup></strong><br>让A与E组成一个大矩阵，经过一系列行变换，<br>使原来A对应的位置变成E，E对应的位置变成A的逆矩阵<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XxqOrnRyBUvE8MOglBeK3ibPzNU6ACGFEjI/0\" alt=\"此处输入图片的描述\"></p>\n<p><strong>4. 利用A·A<sup>-1</sup>=E 或A<sup>-1</sup>·A=E 计算</strong><br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XyIXOWJerxiabGpY9rWWyyWOs85E8sIICRU/0\" alt=\"此处输入图片的描述\"></p>\n<p><strong>5. 利用A·A$^<em>$=|A|E 或A$^</em>$·A=|A|E 计算</strong><br>（$A^*$叫做伴随矩阵）<br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5XxeJ4rvqqAxBXW7VYwYaAyVJ1ap6N1jGibQ/0\" alt=\"此处输入图片的描述\"></p>\n<p><strong>6. 求矩阵的秩</strong><br>对矩阵进行行变换，使下行左端的0比上行多，直到最下行全为0<br>此时秩即 有非零数的行 之数，如下2的秩写为R(A)=4</p>\n<p>特殊情况：</p>\n<ol>\n<li>最下面几行全为0<br>1 2 3 4<br>0 2 3 4<br>0 0 0 0<br>0 0 0 0</li>\n<li>一行比一行多<br>1 2 3 4<br>0 1 2 3<br>0 0 1 2<br>0 0 0 1</li>\n</ol>\n<p><strong>7. 已知矩阵的秩，求矩阵内的未知数</strong><br><img src=\"https://p.qlogo.cn/qqmail_head/mONcle9pic3zfLic7n9wb6HgtN3FZxTeQkM9eqvV9l5Xzu0RnL1DDoO3dBn36gN3WIKLuUjm3xiao0/0\" alt=\"此处输入图片的描述\"></p>\n<hr>\n<h3 id=\"1-4-向量组和线性空间\"><a href=\"#1-4-向量组和线性空间\" class=\"headerlink\" title=\"1.4 向量组和线性空间\"></a>1.4 向量组和线性空间</h3>"},{"title":"JS基础","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n## 1. Sundry\n- switch()参数可为多种类型\n- 标签：\n    ```\n    outerloop:\n    for (var i = 0; i < 10; i++)\n    {\n        innerloop:\n        for (var j = 0; j < 10; j++)\n        {\n            if (j > 3)\n            {\n                break;\n            }\n            if (i == 2)\n            {\n                break innerloop;//跳过了i=2的情况\n            }\n            if (i == 4)\n            {\n                break outerloop;//i=4时结束\n            }\n            document.write(\"i=\" + i + \" j=\" + j + \"\");\n        }\n    }\n    ```\n\n<!-- more -->\n- constructor 属性返回变量的构造函数的原型\n    ```\n    (3.14).constructor//返回ƒ String() { [native code] }\n    \n    function isArray(myArray) {\n        return myArray.constructor.toString().indexOf(\"Array\") > -1;\n    }\n    ```\n- 严格模式：`\"use strict\";`\n- Operator + 可用于将变量转换为数字：\n    ```\n    var y = \"5\";      // y 是一个字符串\n    var x = + y;      // x 是一个数字\n    ```\n    \n- Form提交前验证：\n    ```\n    <form onsubmit=\"return validate()\">\n    //validate方法返回false则不提交\n    ```\n    \n- 变量声明时如果不使用var关键字，那么它就是一个全局变量，即便它在函数内定义。\n- eval('str')\n    解析器解析str代码，功能上类似于Function\n\n- 变量、函数提升机制：\n    ```\n    var c = 2;\n    function c(){\n　　    console.log(1);\n    }\n    c();\n    //报错，c未定义。\n    //var c 和函数c被提升，c=2是表达式，后执行。\n    //所以c()时，c不再是一个函数。\n\n    ```\n\n---\n## 2. 正则\n- `var patt=/pattern/modifiers;`\n- pattern（模式） 以^开头，$结尾\n\n- test() 方法用于检测一个字符串是否匹配某个模式\n    ```\n    /e/.test(\"The best things in life are free!\");\n    >> true\n    ```\n    \n- exec() 方法用于检索字符串中的正则表达式的匹配(返回第一个匹配值)\n    ```\n    /e[1-9]/.exec(\"The be1st things in life are fre2e!\");\n    >>e1\n    ```\n    \n---\n## 3. 错误\n- try-catch：\n    ```\n    try { \n        adddlert(\"Welcome guest!\"); \n    } catch(err) { \n        txt+=\"错误描述：\" + err.message; \n        alert(txt); \n    } \n    ```\n \n- throw：err即throw\n    ```\n    try { \n        if(x == \"\")  throw \"值为空\";\n    }\n    catch(err) {\n        message.innerHTML = \"错误: \" + err;\n    }       \n    ```\n\n---\n## 4. JSON\n- 将一个 JSON 字符串转换为 JavaScript 对象(使可操作)\n    ```\n    var text = '{ \"sites\" : [' +\n        '{ \"name\":\"Runoob\" , \"url\":\"www.runoob.com\" },' +\n        '{ \"name\":\"Google\" , \"url\":\"www.google.com\" },' +\n        '{ \"name\":\"Taobao\" , \"url\":\"www.taobao.com\" } ]}';\n    \n    obj = JSON.parse(text);\n    document.getElementById(\"demo\").innerHTML = obj.sites[1].name + \" \" + obj.sites[1].url;\n    ```\n- 将 JavaScript 值转换为 JSON 字符串(单行)\n> JSON.stringify(value[, replacer[, space]]);\n\n\n---\n## 5. 函数\n- 显式参数(Parameters)就是形参，隐式参数(Arguments)：实参\n- 实例对象、类对象、局部变量(局部函数)\n    ```\n    function Person(national,age)\n    {\n        this.age = age;  //实例对象，每个示例不同\n        Person.national = national;  //类对象,所用实例公用\n        var bb = 0; //局部变量，外面不能访问（类似局部函数）\n    }\n    ```\n\n- 创建新方法\n    ```\n    //原型属性、方法，此方法可被所有String对象使用\n    String.prototype.funcName=function(){}\n    //以字面量方法创建\n    String.prototype = {\n        constructor:String;\n        //如果不写，新对象的构造器会重写String的构造器即Object(花括号)\n        name:\"zs\";\n        id:1\n    }\n    //实例属性、方法（实例通过.__proto__访问）\n    str.funcName=function(){}\n    ```\n\n- 函数自动调用(只会执行一次)：\n    ```\n    <p id=\"demo\"></p>\n    <script>\n    (function(){\n        document.getElementById(\"demo\").innerHTML = \"Hello! 我是自己调用的\";\n    })();\n    </script>\n    ```\n\n- 用构造函数调用函数\n    ```\n    // 构造函数:\n    function myFunction(arg1, arg2){\n        this.firstName = arg1;\n        this.lastName = arg2;//如果直接当方法调用，this指window对象\n        this.fullName = function(){\n            return this.firstName + \" \" + this.lastName;\n        }\n    }\n    var x = new myFunction(\"John\",\"Doe\");\n    console.log(x.fullName());          // \"John Doe\"\n    console.log(x.firstName);           // 返回 \"John\"\n    ```\n\n- 用函数方法调用函数（call() 和 apply()）（对象冒充），this指一参\n    ```\n    function myFunction(a, b) {\n        return a * b;\n    }\n    myObject = myFunction.call(myObject, 10, 2);     // 返回 20\n    //或\n    myArray = [10, 2];\n    myObject = myFunction.apply(myObject, myArray);  // 二参为参数数组\n    ```\n \n- 闭包（closure）：\n    - 就是能够读取其他函数内部变量的函数，在JS中，只有子函数可以访问父函数的内部变量。\n    - 即：闭包是可访问上一层函数作用域里变量的函数，即便上一层函数已经关闭。\n    + 所以只要把子函数作为返回值，我们就可以在父函数外部读取它的私有变量且该变量不会随父函数结束而回收。\n    + 实例：\n        ```\n        var add = (function () {\n            var counter = 0;\n            return function () {return counter += 1;}\n        })();\n        //自我调用使函数只执行一次，设置私有计数器为0。并返回函数表达式。\n        add();\n        add();\n        add();\n        //计数器为 3\n        ```\n        \n    - 优点（应用场景）\n        - 希望一个变量长期驻扎在内存当中；\n        - 避免全局变量的污染；\n        - 私有成员的存在\n- arguments 对象\n    在函数代码中，使用特殊对象arguments，开发者无需明确指出参数名，就能访问它们。\n    ```\n    function sayHi() {\n        if (arguments[0] == \"bye\") {\n            return;\n        }\n        alert(arguments[0]);\n    }\n    ```\n    \n    还可以用 arguments 对象检测函数的参数个数:`arguments.length`\n    因为ECMAScript不会验证传递给函数的参数个数是否等于函数定义的参数个数，所以用 arguments 对象判断传递给函数的参数个数，即可模拟函数重载。\n\n- Function 对象（类）\n    **函数实际上是功能完整的对象。**\n    **所有函数都应看作 Function 类的实例**\n    所以Function 类可以表示开发者定义的任何函数，类似于java的反射。\n    ```\n    //下面这个函数\n\n    function sayHi(sName, sMessage) {\n      alert(\"Hello \" + sName + sMessage);\n    }\n    //还可以这样定义它：\n    \n    var sayHi = new Function(\"sName\", \"sMessage\", \"alert(\\\"Hello \\\" + sName + sMessage);\");\n    ```\n\n\n---\n## 6. DOM\n1. 获取元素\n    ```\n    var x=document.getElementById(\"intro\");\n    var y=document.getElementsByTagName(\"p\");//返回DOM集合非数组\n    var x=document.getElementsByClassName(\"intro\");\n    document.querySelector(\"p.example\");//获取文档中class=\"example\"的第一个<p>元素\n    querySelectorAll();//返回所有的元素\n    ```\n\n2. 改变 HTML 内容\n    ```\n    document.getElementById(\"p1\").innerHTML=\"新文本!\";\n    document.getElementById(\"p1\").outerHTML=\"<p id='p2'>新文本!</p>\";\n    ```\n\n3. 改变 HTML 属性\n    ```\n    document.getElementById(\"image\").src=\"landscape.jpg\";\n    ```\n\n4. 改变CSS\n    ```\n    document.getElementById(\"p2\").style.color=\"blue\";\n    ```\n5. [HTML DOM事件][1]\n    - onclick\n    - onload 和 onunload（进入或离开页面）（处理cookie）\n    - onchange（对输入字段的验证）\n    - onmouseover 和 onmouseout\n    - onmousedown、onmouseup 以及 onclick\n    - onfocus（输入框获得焦点）\n6. EventListener\n    - addEventListener() 方法\n        ```\n        element.addEventListener(event, function, useCapture);\n        element.addEventListener(\"click\", function(){alert(\"1\");});\n        element.addEventListener(\"click\", function(){myFunction(p1, p2);});\n        ```\n        \n        第一个参数是事件的类型 (如\"click\",无\"on\")。\n        第二个参数是事件触发后调用的函数名（无括号）/匿名函数体。\n        第三个参数true:事件捕获；false:事件冒泡。默认false。可选。\n        可向同一个元素中添加多个事件句柄。\n        用\"匿名函数\"调用带参数的函数。\n    - 事件冒泡或事件捕获\n        在'冒泡'中，内部元素的事件先触发，再触发外部元素事件\n        在'捕获'中，外部元素的事件先触发，再触发内部元素事件\n    - 移除由 addEventListener()方法添加的事件句柄\n        element.removeEventListener(\"mousemove\", myFunction);\n7. 节点\n    ```\n    var para = document.createElement(\"p\");\n    var node = document.createTextNode(\"这是一个新的段落。\");\n    para.appendChild(node);\n    var element = document.getElementById(\"div1\");\n    element.appendChild(para);\n    ```\n    \n    - 创建DOM节点 `document.createElement(\"p\")`\n    - 创建文本节点 `document.createTextNode(\"文本\")`\n    - 添加子元素到尾部 `parent.appendChild(child)`\n    - 添加新元素到开始位置 `insertBefore()`\n    - 删除节点 `child.parentNode.removeChild(child);`\n    - 父节点 `child.parentNode`\n    - 子节点 `childNodes`\n    - 第/最后一个子节点 `firstChild` `lastChild`\n    - 下/上一个兄弟节点 `nextSibling` `previousSibling`\n\n---\n## 7. AJAX\n### 7.1 原生xmlhttp\n例子：\n```\nxmlhttp=new XMLHttpRequest();\nxmlhttp.onreadystatechange=function()\n{\n    if (xmlhttp.readyState==4 && xmlhttp.status==200)\n    {\n\t\tconsole.log(xmlhttp.responseText);\n    }\n}\nxmlhttp.open(\"POST\",\"http://www.runoob.com/try/ajax/demo_post.php\",true);\nxmlhttp.setRequestHeader(\"Content-type\",\"application/json;charset=UTF-8\");\nxmlhttp.send(jsonData);\n```\n- 为防止得到缓存结果，可在地址添加随机参数:\n    `\"/ajax/demo_get.php?t=\" + Math.random()`\n- 如果通过 GET 方法发送信息，请向 URL 添加信息：\n    `\"/ajax/demo_get2.php?fname=Henry&lname=Ford\"`\n- onreadystatechange：\n    存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。\n- readyState：\t\n    存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。\n    \n    0: 请求未初始化\n    1: 服务器连接已建立\n    2: 请求已接收\n    3: 请求处理中\n    4: 请求已完成，且响应已就绪\n- status：\n    200: \"OK\"；404: 未找到页面\n\n- Async = false\n    会等到服务器响应就绪才继续执行\n    缺省值为true\n\n- 回调函数（封装，多次使用）\n    函数A作为参数(函数引用)传递到另一个函数B中，并且在函数B执行函数A。\n    我们就说函数A叫做回调函数。\n    如果没有名称(函数表达式)，就叫做匿名回调函数。\n    ```\n    var xmlhttp;\n    function loadXMLDoc(url,cfunc)\n    {\n        xmlhttp=new XMLHttpRequest();\n        xmlhttp.onreadystatechange=cfunc;\n        xmlhttp.open(\"GET\",url,true);\n        xmlhttp.send();\n    }\n    function myFunction()\n    {\n    \tloadXMLDoc(\"/try/ajax/ajax_info.txt\",function()\n    \t{\n    \t\tif (xmlhttp.readyState==4 && xmlhttp.status==200)\n    \t\t{\n    \t\t\tconsole.log(xmlhttp.responseText);\n    \t\t}\n    \t});\n    }\n    ```\n### 7.2 jQuery\n```\n$.ajax({\n    type: \"post\",\n    url: \"Demo.aspx/SayHello\",\n    data: {},\n    contentType: \"application/json; charset=utf-8\",\n    dataType: \"json\",//预期服务器返回的数据类型\n    success: function(data) {\n        alert(data.d);//返回的数据用data.d获取内容\n    },\n    error: function(err) {\n        alert(err);\n    }\n});\n```\n\n\n\n  [1]: http://www.runoob.com/jsref/dom-obj-event.html","source":"_posts/JS基础.md","raw":"---\ntitle: JS基础\ndate: 2019-01-21 10:26:49\ntags: JS\n---\n\n---\n## 1. Sundry\n- switch()参数可为多种类型\n- 标签：\n    ```\n    outerloop:\n    for (var i = 0; i < 10; i++)\n    {\n        innerloop:\n        for (var j = 0; j < 10; j++)\n        {\n            if (j > 3)\n            {\n                break;\n            }\n            if (i == 2)\n            {\n                break innerloop;//跳过了i=2的情况\n            }\n            if (i == 4)\n            {\n                break outerloop;//i=4时结束\n            }\n            document.write(\"i=\" + i + \" j=\" + j + \"\");\n        }\n    }\n    ```\n\n<!-- more -->\n- constructor 属性返回变量的构造函数的原型\n    ```\n    (3.14).constructor//返回ƒ String() { [native code] }\n    \n    function isArray(myArray) {\n        return myArray.constructor.toString().indexOf(\"Array\") > -1;\n    }\n    ```\n- 严格模式：`\"use strict\";`\n- Operator + 可用于将变量转换为数字：\n    ```\n    var y = \"5\";      // y 是一个字符串\n    var x = + y;      // x 是一个数字\n    ```\n    \n- Form提交前验证：\n    ```\n    <form onsubmit=\"return validate()\">\n    //validate方法返回false则不提交\n    ```\n    \n- 变量声明时如果不使用var关键字，那么它就是一个全局变量，即便它在函数内定义。\n- eval('str')\n    解析器解析str代码，功能上类似于Function\n\n- 变量、函数提升机制：\n    ```\n    var c = 2;\n    function c(){\n　　    console.log(1);\n    }\n    c();\n    //报错，c未定义。\n    //var c 和函数c被提升，c=2是表达式，后执行。\n    //所以c()时，c不再是一个函数。\n\n    ```\n\n---\n## 2. 正则\n- `var patt=/pattern/modifiers;`\n- pattern（模式） 以^开头，$结尾\n\n- test() 方法用于检测一个字符串是否匹配某个模式\n    ```\n    /e/.test(\"The best things in life are free!\");\n    >> true\n    ```\n    \n- exec() 方法用于检索字符串中的正则表达式的匹配(返回第一个匹配值)\n    ```\n    /e[1-9]/.exec(\"The be1st things in life are fre2e!\");\n    >>e1\n    ```\n    \n---\n## 3. 错误\n- try-catch：\n    ```\n    try { \n        adddlert(\"Welcome guest!\"); \n    } catch(err) { \n        txt+=\"错误描述：\" + err.message; \n        alert(txt); \n    } \n    ```\n \n- throw：err即throw\n    ```\n    try { \n        if(x == \"\")  throw \"值为空\";\n    }\n    catch(err) {\n        message.innerHTML = \"错误: \" + err;\n    }       \n    ```\n\n---\n## 4. JSON\n- 将一个 JSON 字符串转换为 JavaScript 对象(使可操作)\n    ```\n    var text = '{ \"sites\" : [' +\n        '{ \"name\":\"Runoob\" , \"url\":\"www.runoob.com\" },' +\n        '{ \"name\":\"Google\" , \"url\":\"www.google.com\" },' +\n        '{ \"name\":\"Taobao\" , \"url\":\"www.taobao.com\" } ]}';\n    \n    obj = JSON.parse(text);\n    document.getElementById(\"demo\").innerHTML = obj.sites[1].name + \" \" + obj.sites[1].url;\n    ```\n- 将 JavaScript 值转换为 JSON 字符串(单行)\n> JSON.stringify(value[, replacer[, space]]);\n\n\n---\n## 5. 函数\n- 显式参数(Parameters)就是形参，隐式参数(Arguments)：实参\n- 实例对象、类对象、局部变量(局部函数)\n    ```\n    function Person(national,age)\n    {\n        this.age = age;  //实例对象，每个示例不同\n        Person.national = national;  //类对象,所用实例公用\n        var bb = 0; //局部变量，外面不能访问（类似局部函数）\n    }\n    ```\n\n- 创建新方法\n    ```\n    //原型属性、方法，此方法可被所有String对象使用\n    String.prototype.funcName=function(){}\n    //以字面量方法创建\n    String.prototype = {\n        constructor:String;\n        //如果不写，新对象的构造器会重写String的构造器即Object(花括号)\n        name:\"zs\";\n        id:1\n    }\n    //实例属性、方法（实例通过.__proto__访问）\n    str.funcName=function(){}\n    ```\n\n- 函数自动调用(只会执行一次)：\n    ```\n    <p id=\"demo\"></p>\n    <script>\n    (function(){\n        document.getElementById(\"demo\").innerHTML = \"Hello! 我是自己调用的\";\n    })();\n    </script>\n    ```\n\n- 用构造函数调用函数\n    ```\n    // 构造函数:\n    function myFunction(arg1, arg2){\n        this.firstName = arg1;\n        this.lastName = arg2;//如果直接当方法调用，this指window对象\n        this.fullName = function(){\n            return this.firstName + \" \" + this.lastName;\n        }\n    }\n    var x = new myFunction(\"John\",\"Doe\");\n    console.log(x.fullName());          // \"John Doe\"\n    console.log(x.firstName);           // 返回 \"John\"\n    ```\n\n- 用函数方法调用函数（call() 和 apply()）（对象冒充），this指一参\n    ```\n    function myFunction(a, b) {\n        return a * b;\n    }\n    myObject = myFunction.call(myObject, 10, 2);     // 返回 20\n    //或\n    myArray = [10, 2];\n    myObject = myFunction.apply(myObject, myArray);  // 二参为参数数组\n    ```\n \n- 闭包（closure）：\n    - 就是能够读取其他函数内部变量的函数，在JS中，只有子函数可以访问父函数的内部变量。\n    - 即：闭包是可访问上一层函数作用域里变量的函数，即便上一层函数已经关闭。\n    + 所以只要把子函数作为返回值，我们就可以在父函数外部读取它的私有变量且该变量不会随父函数结束而回收。\n    + 实例：\n        ```\n        var add = (function () {\n            var counter = 0;\n            return function () {return counter += 1;}\n        })();\n        //自我调用使函数只执行一次，设置私有计数器为0。并返回函数表达式。\n        add();\n        add();\n        add();\n        //计数器为 3\n        ```\n        \n    - 优点（应用场景）\n        - 希望一个变量长期驻扎在内存当中；\n        - 避免全局变量的污染；\n        - 私有成员的存在\n- arguments 对象\n    在函数代码中，使用特殊对象arguments，开发者无需明确指出参数名，就能访问它们。\n    ```\n    function sayHi() {\n        if (arguments[0] == \"bye\") {\n            return;\n        }\n        alert(arguments[0]);\n    }\n    ```\n    \n    还可以用 arguments 对象检测函数的参数个数:`arguments.length`\n    因为ECMAScript不会验证传递给函数的参数个数是否等于函数定义的参数个数，所以用 arguments 对象判断传递给函数的参数个数，即可模拟函数重载。\n\n- Function 对象（类）\n    **函数实际上是功能完整的对象。**\n    **所有函数都应看作 Function 类的实例**\n    所以Function 类可以表示开发者定义的任何函数，类似于java的反射。\n    ```\n    //下面这个函数\n\n    function sayHi(sName, sMessage) {\n      alert(\"Hello \" + sName + sMessage);\n    }\n    //还可以这样定义它：\n    \n    var sayHi = new Function(\"sName\", \"sMessage\", \"alert(\\\"Hello \\\" + sName + sMessage);\");\n    ```\n\n\n---\n## 6. DOM\n1. 获取元素\n    ```\n    var x=document.getElementById(\"intro\");\n    var y=document.getElementsByTagName(\"p\");//返回DOM集合非数组\n    var x=document.getElementsByClassName(\"intro\");\n    document.querySelector(\"p.example\");//获取文档中class=\"example\"的第一个<p>元素\n    querySelectorAll();//返回所有的元素\n    ```\n\n2. 改变 HTML 内容\n    ```\n    document.getElementById(\"p1\").innerHTML=\"新文本!\";\n    document.getElementById(\"p1\").outerHTML=\"<p id='p2'>新文本!</p>\";\n    ```\n\n3. 改变 HTML 属性\n    ```\n    document.getElementById(\"image\").src=\"landscape.jpg\";\n    ```\n\n4. 改变CSS\n    ```\n    document.getElementById(\"p2\").style.color=\"blue\";\n    ```\n5. [HTML DOM事件][1]\n    - onclick\n    - onload 和 onunload（进入或离开页面）（处理cookie）\n    - onchange（对输入字段的验证）\n    - onmouseover 和 onmouseout\n    - onmousedown、onmouseup 以及 onclick\n    - onfocus（输入框获得焦点）\n6. EventListener\n    - addEventListener() 方法\n        ```\n        element.addEventListener(event, function, useCapture);\n        element.addEventListener(\"click\", function(){alert(\"1\");});\n        element.addEventListener(\"click\", function(){myFunction(p1, p2);});\n        ```\n        \n        第一个参数是事件的类型 (如\"click\",无\"on\")。\n        第二个参数是事件触发后调用的函数名（无括号）/匿名函数体。\n        第三个参数true:事件捕获；false:事件冒泡。默认false。可选。\n        可向同一个元素中添加多个事件句柄。\n        用\"匿名函数\"调用带参数的函数。\n    - 事件冒泡或事件捕获\n        在'冒泡'中，内部元素的事件先触发，再触发外部元素事件\n        在'捕获'中，外部元素的事件先触发，再触发内部元素事件\n    - 移除由 addEventListener()方法添加的事件句柄\n        element.removeEventListener(\"mousemove\", myFunction);\n7. 节点\n    ```\n    var para = document.createElement(\"p\");\n    var node = document.createTextNode(\"这是一个新的段落。\");\n    para.appendChild(node);\n    var element = document.getElementById(\"div1\");\n    element.appendChild(para);\n    ```\n    \n    - 创建DOM节点 `document.createElement(\"p\")`\n    - 创建文本节点 `document.createTextNode(\"文本\")`\n    - 添加子元素到尾部 `parent.appendChild(child)`\n    - 添加新元素到开始位置 `insertBefore()`\n    - 删除节点 `child.parentNode.removeChild(child);`\n    - 父节点 `child.parentNode`\n    - 子节点 `childNodes`\n    - 第/最后一个子节点 `firstChild` `lastChild`\n    - 下/上一个兄弟节点 `nextSibling` `previousSibling`\n\n---\n## 7. AJAX\n### 7.1 原生xmlhttp\n例子：\n```\nxmlhttp=new XMLHttpRequest();\nxmlhttp.onreadystatechange=function()\n{\n    if (xmlhttp.readyState==4 && xmlhttp.status==200)\n    {\n\t\tconsole.log(xmlhttp.responseText);\n    }\n}\nxmlhttp.open(\"POST\",\"http://www.runoob.com/try/ajax/demo_post.php\",true);\nxmlhttp.setRequestHeader(\"Content-type\",\"application/json;charset=UTF-8\");\nxmlhttp.send(jsonData);\n```\n- 为防止得到缓存结果，可在地址添加随机参数:\n    `\"/ajax/demo_get.php?t=\" + Math.random()`\n- 如果通过 GET 方法发送信息，请向 URL 添加信息：\n    `\"/ajax/demo_get2.php?fname=Henry&lname=Ford\"`\n- onreadystatechange：\n    存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。\n- readyState：\t\n    存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。\n    \n    0: 请求未初始化\n    1: 服务器连接已建立\n    2: 请求已接收\n    3: 请求处理中\n    4: 请求已完成，且响应已就绪\n- status：\n    200: \"OK\"；404: 未找到页面\n\n- Async = false\n    会等到服务器响应就绪才继续执行\n    缺省值为true\n\n- 回调函数（封装，多次使用）\n    函数A作为参数(函数引用)传递到另一个函数B中，并且在函数B执行函数A。\n    我们就说函数A叫做回调函数。\n    如果没有名称(函数表达式)，就叫做匿名回调函数。\n    ```\n    var xmlhttp;\n    function loadXMLDoc(url,cfunc)\n    {\n        xmlhttp=new XMLHttpRequest();\n        xmlhttp.onreadystatechange=cfunc;\n        xmlhttp.open(\"GET\",url,true);\n        xmlhttp.send();\n    }\n    function myFunction()\n    {\n    \tloadXMLDoc(\"/try/ajax/ajax_info.txt\",function()\n    \t{\n    \t\tif (xmlhttp.readyState==4 && xmlhttp.status==200)\n    \t\t{\n    \t\t\tconsole.log(xmlhttp.responseText);\n    \t\t}\n    \t});\n    }\n    ```\n### 7.2 jQuery\n```\n$.ajax({\n    type: \"post\",\n    url: \"Demo.aspx/SayHello\",\n    data: {},\n    contentType: \"application/json; charset=utf-8\",\n    dataType: \"json\",//预期服务器返回的数据类型\n    success: function(data) {\n        alert(data.d);//返回的数据用data.d获取内容\n    },\n    error: function(err) {\n        alert(err);\n    }\n});\n```\n\n\n\n  [1]: http://www.runoob.com/jsref/dom-obj-event.html","slug":"JS基础","published":1,"updated":"2019-01-21T06:27:25.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642pyb000py0ooyrsgehxh","content":"<hr>\n<h2 id=\"1-Sundry\"><a href=\"#1-Sundry\" class=\"headerlink\" title=\"1. Sundry\"></a>1. Sundry</h2><ul>\n<li>switch()参数可为多种类型</li>\n<li>标签：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outerloop:</span><br><span class=\"line\">for (var i = 0; i &lt; 10; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    innerloop:</span><br><span class=\"line\">    for (var j = 0; j &lt; 10; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (j &gt; 3)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (i == 2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            break innerloop;//跳过了i=2的情况</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (i == 4)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            break outerloop;//i=4时结束</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        document.write(&quot;i=&quot; + i + &quot; j=&quot; + j + &quot;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>constructor 属性返回变量的构造函数的原型</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(3.14).constructor//返回ƒ String() &#123; [native code] &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function isArray(myArray) &#123;</span><br><span class=\"line\">    return myArray.constructor.toString().indexOf(&quot;Array&quot;) &gt; -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>严格模式：<code>&quot;use strict&quot;;</code></p>\n</li>\n<li>Operator + 可用于将变量转换为数字：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var y = &quot;5&quot;;      // y 是一个字符串</span><br><span class=\"line\">var x = + y;      // x 是一个数字</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>Form提交前验证：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form onsubmit=&quot;return validate()&quot;&gt;</span><br><span class=\"line\">//validate方法返回false则不提交</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>变量声明时如果不使用var关键字，那么它就是一个全局变量，即便它在函数内定义。</li>\n<li><p>eval(‘str’)<br>  解析器解析str代码，功能上类似于Function</p>\n</li>\n<li><p>变量、函数提升机制：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var c = 2;</span><br><span class=\"line\">function c()&#123;</span><br><span class=\"line\">　　    console.log(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">c();</span><br><span class=\"line\">//报错，c未定义。</span><br><span class=\"line\">//var c 和函数c被提升，c=2是表达式，后执行。</span><br><span class=\"line\">//所以c()时，c不再是一个函数。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-正则\"><a href=\"#2-正则\" class=\"headerlink\" title=\"2. 正则\"></a>2. 正则</h2><ul>\n<li><code>var patt=/pattern/modifiers;</code></li>\n<li><p>pattern（模式） 以^开头，$结尾</p>\n</li>\n<li><p>test() 方法用于检测一个字符串是否匹配某个模式</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/e/.test(&quot;The best things in life are free!&quot;);</span><br><span class=\"line\">&gt;&gt; true</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>exec() 方法用于检索字符串中的正则表达式的匹配(返回第一个匹配值)  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/e[1-9]/.exec(&quot;The be1st things in life are fre2e!&quot;);</span><br><span class=\"line\">&gt;&gt;e1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"3-错误\"><a href=\"#3-错误\" class=\"headerlink\" title=\"3. 错误\"></a>3. 错误</h2><ul>\n<li>try-catch：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123; </span><br><span class=\"line\">    adddlert(&quot;Welcome guest!&quot;); </span><br><span class=\"line\">&#125; catch(err) &#123; </span><br><span class=\"line\">    txt+=&quot;错误描述：&quot; + err.message; </span><br><span class=\"line\">    alert(txt); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>throw：err即throw  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123; </span><br><span class=\"line\">    if(x == &quot;&quot;)  throw &quot;值为空&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch(err) &#123;</span><br><span class=\"line\">    message.innerHTML = &quot;错误: &quot; + err;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"4-JSON\"><a href=\"#4-JSON\" class=\"headerlink\" title=\"4. JSON\"></a>4. JSON</h2><ul>\n<li><p>将一个 JSON 字符串转换为 JavaScript 对象(使可操作)</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &apos;&#123; &quot;sites&quot; : [&apos; +</span><br><span class=\"line\">    &apos;&#123; &quot;name&quot;:&quot;Runoob&quot; , &quot;url&quot;:&quot;www.runoob.com&quot; &#125;,&apos; +</span><br><span class=\"line\">    &apos;&#123; &quot;name&quot;:&quot;Google&quot; , &quot;url&quot;:&quot;www.google.com&quot; &#125;,&apos; +</span><br><span class=\"line\">    &apos;&#123; &quot;name&quot;:&quot;Taobao&quot; , &quot;url&quot;:&quot;www.taobao.com&quot; &#125; ]&#125;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj = JSON.parse(text);</span><br><span class=\"line\">document.getElementById(&quot;demo&quot;).innerHTML = obj.sites[1].name + &quot; &quot; + obj.sites[1].url;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将 JavaScript 值转换为 JSON 字符串(单行)</p>\n<blockquote>\n<p>JSON.stringify(value[, replacer[, space]]);</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-函数\"><a href=\"#5-函数\" class=\"headerlink\" title=\"5. 函数\"></a>5. 函数</h2><ul>\n<li>显式参数(Parameters)就是形参，隐式参数(Arguments)：实参</li>\n<li><p>实例对象、类对象、局部变量(局部函数)</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(national,age)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.age = age;  //实例对象，每个示例不同</span><br><span class=\"line\">    Person.national = national;  //类对象,所用实例公用</span><br><span class=\"line\">    var bb = 0; //局部变量，外面不能访问（类似局部函数）</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建新方法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//原型属性、方法，此方法可被所有String对象使用</span><br><span class=\"line\">String.prototype.funcName=function()&#123;&#125;</span><br><span class=\"line\">//以字面量方法创建</span><br><span class=\"line\">String.prototype = &#123;</span><br><span class=\"line\">    constructor:String;</span><br><span class=\"line\">    //如果不写，新对象的构造器会重写String的构造器即Object(花括号)</span><br><span class=\"line\">    name:&quot;zs&quot;;</span><br><span class=\"line\">    id:1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//实例属性、方法（实例通过.__proto__访问）</span><br><span class=\"line\">str.funcName=function()&#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数自动调用(只会执行一次)：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">    document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello! 我是自己调用的&quot;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用构造函数调用函数</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 构造函数:</span><br><span class=\"line\">function myFunction(arg1, arg2)&#123;</span><br><span class=\"line\">    this.firstName = arg1;</span><br><span class=\"line\">    this.lastName = arg2;//如果直接当方法调用，this指window对象</span><br><span class=\"line\">    this.fullName = function()&#123;</span><br><span class=\"line\">        return this.firstName + &quot; &quot; + this.lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var x = new myFunction(&quot;John&quot;,&quot;Doe&quot;);</span><br><span class=\"line\">console.log(x.fullName());          // &quot;John Doe&quot;</span><br><span class=\"line\">console.log(x.firstName);           // 返回 &quot;John&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用函数方法调用函数（call() 和 apply()）（对象冒充），this指一参</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function myFunction(a, b) &#123;</span><br><span class=\"line\">    return a * b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myObject = myFunction.call(myObject, 10, 2);     // 返回 20</span><br><span class=\"line\">//或</span><br><span class=\"line\">myArray = [10, 2];</span><br><span class=\"line\">myObject = myFunction.apply(myObject, myArray);  // 二参为参数数组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>闭包（closure）：<ul>\n<li>就是能够读取其他函数内部变量的函数，在JS中，只有子函数可以访问父函数的内部变量。</li>\n<li>即：闭包是可访问上一层函数作用域里变量的函数，即便上一层函数已经关闭。</li>\n</ul>\n<ul>\n<li>所以只要把子函数作为返回值，我们就可以在父函数外部读取它的私有变量且该变量不会随父函数结束而回收。</li>\n<li>实例：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var add = (function () &#123;</span><br><span class=\"line\">    var counter = 0;</span><br><span class=\"line\">    return function () &#123;return counter += 1;&#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">//自我调用使函数只执行一次，设置私有计数器为0。并返回函数表达式。</span><br><span class=\"line\">add();</span><br><span class=\"line\">add();</span><br><span class=\"line\">add();</span><br><span class=\"line\">//计数器为 3</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 优点（应用场景）\n    - 希望一个变量长期驻扎在内存当中；\n    - 避免全局变量的污染；\n    - 私有成员的存在\n</code></pre><ul>\n<li>arguments 对象<br>  在函数代码中，使用特殊对象arguments，开发者无需明确指出参数名，就能访问它们。  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayHi() &#123;</span><br><span class=\"line\">    if (arguments[0] == &quot;bye&quot;) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    alert(arguments[0]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>还可以用 arguments 对象检测函数的参数个数:`arguments.length`\n因为ECMAScript不会验证传递给函数的参数个数是否等于函数定义的参数个数，所以用 arguments 对象判断传递给函数的参数个数，即可模拟函数重载。\n</code></pre><ul>\n<li>Function 对象（类）<br>  <strong>函数实际上是功能完整的对象。</strong><br>  <strong>所有函数都应看作 Function 类的实例</strong><br>  所以Function 类可以表示开发者定义的任何函数，类似于java的反射。  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下面这个函数</span><br><span class=\"line\"></span><br><span class=\"line\">function sayHi(sName, sMessage) &#123;</span><br><span class=\"line\">  alert(&quot;Hello &quot; + sName + sMessage);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//还可以这样定义它：</span><br><span class=\"line\"></span><br><span class=\"line\">var sayHi = new Function(&quot;sName&quot;, &quot;sMessage&quot;, &quot;alert(\\&quot;Hello \\&quot; + sName + sMessage);&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"6-DOM\"><a href=\"#6-DOM\" class=\"headerlink\" title=\"6. DOM\"></a>6. DOM</h2><ol>\n<li><p>获取元素</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x=document.getElementById(&quot;intro&quot;);</span><br><span class=\"line\">var y=document.getElementsByTagName(&quot;p&quot;);//返回DOM集合非数组</span><br><span class=\"line\">var x=document.getElementsByClassName(&quot;intro&quot;);</span><br><span class=\"line\">document.querySelector(&quot;p.example&quot;);//获取文档中class=&quot;example&quot;的第一个&lt;p&gt;元素</span><br><span class=\"line\">querySelectorAll();//返回所有的元素</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改变 HTML 内容</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&quot;p1&quot;).innerHTML=&quot;新文本!&quot;;</span><br><span class=\"line\">document.getElementById(&quot;p1&quot;).outerHTML=&quot;&lt;p id=&apos;p2&apos;&gt;新文本!&lt;/p&gt;&quot;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改变 HTML 属性</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&quot;image&quot;).src=&quot;landscape.jpg&quot;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改变CSS</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&quot;p2&quot;).style.color=&quot;blue&quot;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"http://www.runoob.com/jsref/dom-obj-event.html\" target=\"_blank\" rel=\"noopener\">HTML DOM事件</a></p>\n<ul>\n<li>onclick</li>\n<li>onload 和 onunload（进入或离开页面）（处理cookie）</li>\n<li>onchange（对输入字段的验证）</li>\n<li>onmouseover 和 onmouseout</li>\n<li>onmousedown、onmouseup 以及 onclick</li>\n<li>onfocus（输入框获得焦点）</li>\n</ul>\n</li>\n<li>EventListener<ul>\n<li>addEventListener() 方法  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.addEventListener(event, function, useCapture);</span><br><span class=\"line\">element.addEventListener(&quot;click&quot;, function()&#123;alert(&quot;1&quot;);&#125;);</span><br><span class=\"line\">element.addEventListener(&quot;click&quot;, function()&#123;myFunction(p1, p2);&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code>    第一个参数是事件的类型 (如&quot;click&quot;,无&quot;on&quot;)。\n    第二个参数是事件触发后调用的函数名（无括号）/匿名函数体。\n    第三个参数true:事件捕获；false:事件冒泡。默认false。可选。\n    可向同一个元素中添加多个事件句柄。\n    用&quot;匿名函数&quot;调用带参数的函数。\n- 事件冒泡或事件捕获\n    在&#39;冒泡&#39;中，内部元素的事件先触发，再触发外部元素事件\n    在&#39;捕获&#39;中，外部元素的事件先触发，再触发内部元素事件\n- 移除由 addEventListener()方法添加的事件句柄\n    element.removeEventListener(&quot;mousemove&quot;, myFunction);\n</code></pre><ol>\n<li>节点 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var para = document.createElement(&quot;p&quot;);</span><br><span class=\"line\">var node = document.createTextNode(&quot;这是一个新的段落。&quot;);</span><br><span class=\"line\">para.appendChild(node);</span><br><span class=\"line\">var element = document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">element.appendChild(para);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code>- 创建DOM节点 `document.createElement(&quot;p&quot;)`\n- 创建文本节点 `document.createTextNode(&quot;文本&quot;)`\n- 添加子元素到尾部 `parent.appendChild(child)`\n- 添加新元素到开始位置 `insertBefore()`\n- 删除节点 `child.parentNode.removeChild(child);`\n- 父节点 `child.parentNode`\n- 子节点 `childNodes`\n- 第/最后一个子节点 `firstChild` `lastChild`\n- 下/上一个兄弟节点 `nextSibling` `previousSibling`\n</code></pre><hr>\n<h2 id=\"7-AJAX\"><a href=\"#7-AJAX\" class=\"headerlink\" title=\"7. AJAX\"></a>7. AJAX</h2><h3 id=\"7-1-原生xmlhttp\"><a href=\"#7-1-原生xmlhttp\" class=\"headerlink\" title=\"7.1 原生xmlhttp\"></a>7.1 原生xmlhttp</h3><p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlhttp=new XMLHttpRequest();</span><br><span class=\"line\">xmlhttp.onreadystatechange=function()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tconsole.log(xmlhttp.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xmlhttp.open(&quot;POST&quot;,&quot;http://www.runoob.com/try/ajax/demo_post.php&quot;,true);</span><br><span class=\"line\">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/json;charset=UTF-8&quot;);</span><br><span class=\"line\">xmlhttp.send(jsonData);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>为防止得到缓存结果，可在地址添加随机参数:<br>  <code>&quot;/ajax/demo_get.php?t=&quot; + Math.random()</code></li>\n<li>如果通过 GET 方法发送信息，请向 URL 添加信息：<br>  <code>&quot;/ajax/demo_get2.php?fname=Henry&amp;lname=Ford&quot;</code></li>\n<li>onreadystatechange：<br>  存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</li>\n<li><p>readyState：<br>  存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。</p>\n<p>  0: 请求未初始化<br>  1: 服务器连接已建立<br>  2: 请求已接收<br>  3: 请求处理中<br>  4: 请求已完成，且响应已就绪</p>\n</li>\n<li><p>status：<br>  200: “OK”；404: 未找到页面</p>\n</li>\n<li><p>Async = false<br>  会等到服务器响应就绪才继续执行<br>  缺省值为true</p>\n</li>\n<li><p>回调函数（封装，多次使用）<br>  函数A作为参数(函数引用)传递到另一个函数B中，并且在函数B执行函数A。<br>  我们就说函数A叫做回调函数。<br>  如果没有名称(函数表达式)，就叫做匿名回调函数。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xmlhttp;</span><br><span class=\"line\">function loadXMLDoc(url,cfunc)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    xmlhttp=new XMLHttpRequest();</span><br><span class=\"line\">    xmlhttp.onreadystatechange=cfunc;</span><br><span class=\"line\">    xmlhttp.open(&quot;GET&quot;,url,true);</span><br><span class=\"line\">    xmlhttp.send();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function myFunction()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tloadXMLDoc(&quot;/try/ajax/ajax_info.txt&quot;,function()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tconsole.log(xmlhttp.responseText);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"7-2-jQuery\"><a href=\"#7-2-jQuery\" class=\"headerlink\" title=\"7.2 jQuery\"></a>7.2 jQuery</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    type: &quot;post&quot;,</span><br><span class=\"line\">    url: &quot;Demo.aspx/SayHello&quot;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    contentType: &quot;application/json; charset=utf-8&quot;,</span><br><span class=\"line\">    dataType: &quot;json&quot;,//预期服务器返回的数据类型</span><br><span class=\"line\">    success: function(data) &#123;</span><br><span class=\"line\">        alert(data.d);//返回的数据用data.d获取内容</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error: function(err) &#123;</span><br><span class=\"line\">        alert(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"1-Sundry\"><a href=\"#1-Sundry\" class=\"headerlink\" title=\"1. Sundry\"></a>1. Sundry</h2><ul>\n<li>switch()参数可为多种类型</li>\n<li>标签：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outerloop:</span><br><span class=\"line\">for (var i = 0; i &lt; 10; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    innerloop:</span><br><span class=\"line\">    for (var j = 0; j &lt; 10; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (j &gt; 3)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (i == 2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            break innerloop;//跳过了i=2的情况</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (i == 4)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            break outerloop;//i=4时结束</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        document.write(&quot;i=&quot; + i + &quot; j=&quot; + j + &quot;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>constructor 属性返回变量的构造函数的原型</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(3.14).constructor//返回ƒ String() &#123; [native code] &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function isArray(myArray) &#123;</span><br><span class=\"line\">    return myArray.constructor.toString().indexOf(&quot;Array&quot;) &gt; -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>严格模式：<code>&quot;use strict&quot;;</code></p>\n</li>\n<li>Operator + 可用于将变量转换为数字：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var y = &quot;5&quot;;      // y 是一个字符串</span><br><span class=\"line\">var x = + y;      // x 是一个数字</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>Form提交前验证：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form onsubmit=&quot;return validate()&quot;&gt;</span><br><span class=\"line\">//validate方法返回false则不提交</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>变量声明时如果不使用var关键字，那么它就是一个全局变量，即便它在函数内定义。</li>\n<li><p>eval(‘str’)<br>  解析器解析str代码，功能上类似于Function</p>\n</li>\n<li><p>变量、函数提升机制：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var c = 2;</span><br><span class=\"line\">function c()&#123;</span><br><span class=\"line\">　　    console.log(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">c();</span><br><span class=\"line\">//报错，c未定义。</span><br><span class=\"line\">//var c 和函数c被提升，c=2是表达式，后执行。</span><br><span class=\"line\">//所以c()时，c不再是一个函数。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-正则\"><a href=\"#2-正则\" class=\"headerlink\" title=\"2. 正则\"></a>2. 正则</h2><ul>\n<li><code>var patt=/pattern/modifiers;</code></li>\n<li><p>pattern（模式） 以^开头，$结尾</p>\n</li>\n<li><p>test() 方法用于检测一个字符串是否匹配某个模式</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/e/.test(&quot;The best things in life are free!&quot;);</span><br><span class=\"line\">&gt;&gt; true</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>exec() 方法用于检索字符串中的正则表达式的匹配(返回第一个匹配值)  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/e[1-9]/.exec(&quot;The be1st things in life are fre2e!&quot;);</span><br><span class=\"line\">&gt;&gt;e1</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"3-错误\"><a href=\"#3-错误\" class=\"headerlink\" title=\"3. 错误\"></a>3. 错误</h2><ul>\n<li>try-catch：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123; </span><br><span class=\"line\">    adddlert(&quot;Welcome guest!&quot;); </span><br><span class=\"line\">&#125; catch(err) &#123; </span><br><span class=\"line\">    txt+=&quot;错误描述：&quot; + err.message; </span><br><span class=\"line\">    alert(txt); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>throw：err即throw  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123; </span><br><span class=\"line\">    if(x == &quot;&quot;)  throw &quot;值为空&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch(err) &#123;</span><br><span class=\"line\">    message.innerHTML = &quot;错误: &quot; + err;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"4-JSON\"><a href=\"#4-JSON\" class=\"headerlink\" title=\"4. JSON\"></a>4. JSON</h2><ul>\n<li><p>将一个 JSON 字符串转换为 JavaScript 对象(使可操作)</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &apos;&#123; &quot;sites&quot; : [&apos; +</span><br><span class=\"line\">    &apos;&#123; &quot;name&quot;:&quot;Runoob&quot; , &quot;url&quot;:&quot;www.runoob.com&quot; &#125;,&apos; +</span><br><span class=\"line\">    &apos;&#123; &quot;name&quot;:&quot;Google&quot; , &quot;url&quot;:&quot;www.google.com&quot; &#125;,&apos; +</span><br><span class=\"line\">    &apos;&#123; &quot;name&quot;:&quot;Taobao&quot; , &quot;url&quot;:&quot;www.taobao.com&quot; &#125; ]&#125;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj = JSON.parse(text);</span><br><span class=\"line\">document.getElementById(&quot;demo&quot;).innerHTML = obj.sites[1].name + &quot; &quot; + obj.sites[1].url;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将 JavaScript 值转换为 JSON 字符串(单行)</p>\n<blockquote>\n<p>JSON.stringify(value[, replacer[, space]]);</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-函数\"><a href=\"#5-函数\" class=\"headerlink\" title=\"5. 函数\"></a>5. 函数</h2><ul>\n<li>显式参数(Parameters)就是形参，隐式参数(Arguments)：实参</li>\n<li><p>实例对象、类对象、局部变量(局部函数)</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(national,age)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    this.age = age;  //实例对象，每个示例不同</span><br><span class=\"line\">    Person.national = national;  //类对象,所用实例公用</span><br><span class=\"line\">    var bb = 0; //局部变量，外面不能访问（类似局部函数）</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建新方法</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//原型属性、方法，此方法可被所有String对象使用</span><br><span class=\"line\">String.prototype.funcName=function()&#123;&#125;</span><br><span class=\"line\">//以字面量方法创建</span><br><span class=\"line\">String.prototype = &#123;</span><br><span class=\"line\">    constructor:String;</span><br><span class=\"line\">    //如果不写，新对象的构造器会重写String的构造器即Object(花括号)</span><br><span class=\"line\">    name:&quot;zs&quot;;</span><br><span class=\"line\">    id:1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//实例属性、方法（实例通过.__proto__访问）</span><br><span class=\"line\">str.funcName=function()&#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数自动调用(只会执行一次)：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">(function()&#123;</span><br><span class=\"line\">    document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello! 我是自己调用的&quot;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用构造函数调用函数</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 构造函数:</span><br><span class=\"line\">function myFunction(arg1, arg2)&#123;</span><br><span class=\"line\">    this.firstName = arg1;</span><br><span class=\"line\">    this.lastName = arg2;//如果直接当方法调用，this指window对象</span><br><span class=\"line\">    this.fullName = function()&#123;</span><br><span class=\"line\">        return this.firstName + &quot; &quot; + this.lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var x = new myFunction(&quot;John&quot;,&quot;Doe&quot;);</span><br><span class=\"line\">console.log(x.fullName());          // &quot;John Doe&quot;</span><br><span class=\"line\">console.log(x.firstName);           // 返回 &quot;John&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用函数方法调用函数（call() 和 apply()）（对象冒充），this指一参</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function myFunction(a, b) &#123;</span><br><span class=\"line\">    return a * b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myObject = myFunction.call(myObject, 10, 2);     // 返回 20</span><br><span class=\"line\">//或</span><br><span class=\"line\">myArray = [10, 2];</span><br><span class=\"line\">myObject = myFunction.apply(myObject, myArray);  // 二参为参数数组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>闭包（closure）：<ul>\n<li>就是能够读取其他函数内部变量的函数，在JS中，只有子函数可以访问父函数的内部变量。</li>\n<li>即：闭包是可访问上一层函数作用域里变量的函数，即便上一层函数已经关闭。</li>\n</ul>\n<ul>\n<li>所以只要把子函数作为返回值，我们就可以在父函数外部读取它的私有变量且该变量不会随父函数结束而回收。</li>\n<li>实例：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var add = (function () &#123;</span><br><span class=\"line\">    var counter = 0;</span><br><span class=\"line\">    return function () &#123;return counter += 1;&#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">//自我调用使函数只执行一次，设置私有计数器为0。并返回函数表达式。</span><br><span class=\"line\">add();</span><br><span class=\"line\">add();</span><br><span class=\"line\">add();</span><br><span class=\"line\">//计数器为 3</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>- 优点（应用场景）\n    - 希望一个变量长期驻扎在内存当中；\n    - 避免全局变量的污染；\n    - 私有成员的存在\n</code></pre><ul>\n<li>arguments 对象<br>  在函数代码中，使用特殊对象arguments，开发者无需明确指出参数名，就能访问它们。  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayHi() &#123;</span><br><span class=\"line\">    if (arguments[0] == &quot;bye&quot;) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    alert(arguments[0]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>还可以用 arguments 对象检测函数的参数个数:`arguments.length`\n因为ECMAScript不会验证传递给函数的参数个数是否等于函数定义的参数个数，所以用 arguments 对象判断传递给函数的参数个数，即可模拟函数重载。\n</code></pre><ul>\n<li>Function 对象（类）<br>  <strong>函数实际上是功能完整的对象。</strong><br>  <strong>所有函数都应看作 Function 类的实例</strong><br>  所以Function 类可以表示开发者定义的任何函数，类似于java的反射。  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下面这个函数</span><br><span class=\"line\"></span><br><span class=\"line\">function sayHi(sName, sMessage) &#123;</span><br><span class=\"line\">  alert(&quot;Hello &quot; + sName + sMessage);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//还可以这样定义它：</span><br><span class=\"line\"></span><br><span class=\"line\">var sayHi = new Function(&quot;sName&quot;, &quot;sMessage&quot;, &quot;alert(\\&quot;Hello \\&quot; + sName + sMessage);&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"6-DOM\"><a href=\"#6-DOM\" class=\"headerlink\" title=\"6. DOM\"></a>6. DOM</h2><ol>\n<li><p>获取元素</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x=document.getElementById(&quot;intro&quot;);</span><br><span class=\"line\">var y=document.getElementsByTagName(&quot;p&quot;);//返回DOM集合非数组</span><br><span class=\"line\">var x=document.getElementsByClassName(&quot;intro&quot;);</span><br><span class=\"line\">document.querySelector(&quot;p.example&quot;);//获取文档中class=&quot;example&quot;的第一个&lt;p&gt;元素</span><br><span class=\"line\">querySelectorAll();//返回所有的元素</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改变 HTML 内容</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&quot;p1&quot;).innerHTML=&quot;新文本!&quot;;</span><br><span class=\"line\">document.getElementById(&quot;p1&quot;).outerHTML=&quot;&lt;p id=&apos;p2&apos;&gt;新文本!&lt;/p&gt;&quot;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改变 HTML 属性</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&quot;image&quot;).src=&quot;landscape.jpg&quot;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改变CSS</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&quot;p2&quot;).style.color=&quot;blue&quot;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"http://www.runoob.com/jsref/dom-obj-event.html\" target=\"_blank\" rel=\"noopener\">HTML DOM事件</a></p>\n<ul>\n<li>onclick</li>\n<li>onload 和 onunload（进入或离开页面）（处理cookie）</li>\n<li>onchange（对输入字段的验证）</li>\n<li>onmouseover 和 onmouseout</li>\n<li>onmousedown、onmouseup 以及 onclick</li>\n<li>onfocus（输入框获得焦点）</li>\n</ul>\n</li>\n<li>EventListener<ul>\n<li>addEventListener() 方法  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element.addEventListener(event, function, useCapture);</span><br><span class=\"line\">element.addEventListener(&quot;click&quot;, function()&#123;alert(&quot;1&quot;);&#125;);</span><br><span class=\"line\">element.addEventListener(&quot;click&quot;, function()&#123;myFunction(p1, p2);&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code>    第一个参数是事件的类型 (如&quot;click&quot;,无&quot;on&quot;)。\n    第二个参数是事件触发后调用的函数名（无括号）/匿名函数体。\n    第三个参数true:事件捕获；false:事件冒泡。默认false。可选。\n    可向同一个元素中添加多个事件句柄。\n    用&quot;匿名函数&quot;调用带参数的函数。\n- 事件冒泡或事件捕获\n    在&#39;冒泡&#39;中，内部元素的事件先触发，再触发外部元素事件\n    在&#39;捕获&#39;中，外部元素的事件先触发，再触发内部元素事件\n- 移除由 addEventListener()方法添加的事件句柄\n    element.removeEventListener(&quot;mousemove&quot;, myFunction);\n</code></pre><ol>\n<li>节点 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var para = document.createElement(&quot;p&quot;);</span><br><span class=\"line\">var node = document.createTextNode(&quot;这是一个新的段落。&quot;);</span><br><span class=\"line\">para.appendChild(node);</span><br><span class=\"line\">var element = document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">element.appendChild(para);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code>- 创建DOM节点 `document.createElement(&quot;p&quot;)`\n- 创建文本节点 `document.createTextNode(&quot;文本&quot;)`\n- 添加子元素到尾部 `parent.appendChild(child)`\n- 添加新元素到开始位置 `insertBefore()`\n- 删除节点 `child.parentNode.removeChild(child);`\n- 父节点 `child.parentNode`\n- 子节点 `childNodes`\n- 第/最后一个子节点 `firstChild` `lastChild`\n- 下/上一个兄弟节点 `nextSibling` `previousSibling`\n</code></pre><hr>\n<h2 id=\"7-AJAX\"><a href=\"#7-AJAX\" class=\"headerlink\" title=\"7. AJAX\"></a>7. AJAX</h2><h3 id=\"7-1-原生xmlhttp\"><a href=\"#7-1-原生xmlhttp\" class=\"headerlink\" title=\"7.1 原生xmlhttp\"></a>7.1 原生xmlhttp</h3><p>例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlhttp=new XMLHttpRequest();</span><br><span class=\"line\">xmlhttp.onreadystatechange=function()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tconsole.log(xmlhttp.responseText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xmlhttp.open(&quot;POST&quot;,&quot;http://www.runoob.com/try/ajax/demo_post.php&quot;,true);</span><br><span class=\"line\">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/json;charset=UTF-8&quot;);</span><br><span class=\"line\">xmlhttp.send(jsonData);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>为防止得到缓存结果，可在地址添加随机参数:<br>  <code>&quot;/ajax/demo_get.php?t=&quot; + Math.random()</code></li>\n<li>如果通过 GET 方法发送信息，请向 URL 添加信息：<br>  <code>&quot;/ajax/demo_get2.php?fname=Henry&amp;lname=Ford&quot;</code></li>\n<li>onreadystatechange：<br>  存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</li>\n<li><p>readyState：<br>  存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。</p>\n<p>  0: 请求未初始化<br>  1: 服务器连接已建立<br>  2: 请求已接收<br>  3: 请求处理中<br>  4: 请求已完成，且响应已就绪</p>\n</li>\n<li><p>status：<br>  200: “OK”；404: 未找到页面</p>\n</li>\n<li><p>Async = false<br>  会等到服务器响应就绪才继续执行<br>  缺省值为true</p>\n</li>\n<li><p>回调函数（封装，多次使用）<br>  函数A作为参数(函数引用)传递到另一个函数B中，并且在函数B执行函数A。<br>  我们就说函数A叫做回调函数。<br>  如果没有名称(函数表达式)，就叫做匿名回调函数。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xmlhttp;</span><br><span class=\"line\">function loadXMLDoc(url,cfunc)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    xmlhttp=new XMLHttpRequest();</span><br><span class=\"line\">    xmlhttp.onreadystatechange=cfunc;</span><br><span class=\"line\">    xmlhttp.open(&quot;GET&quot;,url,true);</span><br><span class=\"line\">    xmlhttp.send();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function myFunction()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tloadXMLDoc(&quot;/try/ajax/ajax_info.txt&quot;,function()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tconsole.log(xmlhttp.responseText);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"7-2-jQuery\"><a href=\"#7-2-jQuery\" class=\"headerlink\" title=\"7.2 jQuery\"></a>7.2 jQuery</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    type: &quot;post&quot;,</span><br><span class=\"line\">    url: &quot;Demo.aspx/SayHello&quot;,</span><br><span class=\"line\">    data: &#123;&#125;,</span><br><span class=\"line\">    contentType: &quot;application/json; charset=utf-8&quot;,</span><br><span class=\"line\">    dataType: &quot;json&quot;,//预期服务器返回的数据类型</span><br><span class=\"line\">    success: function(data) &#123;</span><br><span class=\"line\">        alert(data.d);//返回的数据用data.d获取内容</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error: function(err) &#123;</span><br><span class=\"line\">        alert(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"Node.js","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n## 1. NPM\n- 安装：`npm install <Module Name>@可空版本号`\n- 使用：`var express = require('express');`\n- 本地安装 装在CLI当前目录 node_modules 下；全局安装 装在node下\n- 更新：`npm update express`\n- 淘宝镜像：`npm install -g cnpm --registry=https://registry.npm.taobao.org`\n    使用：`cnpm install [name]`\n\n<!-- more -->\n---\n## 2. Sundry\n- Node.js 基本上所有的事件机制都是用设计模式中**观察者模式**实现\n    当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新\n- Node.js 异步编程的直接体现就是回调，Node 所有 API 都支持回调函数。\n\n---\n## 3. 创建服务器\n```\n//添加http依赖\nvar http = require(\"http\");\n\n//创建服务器（匿名形式写入回调）\nhttp.createServer(function(request, response) {\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n}).listen(8888);\n```\n\n---\n## 4. 文件操作file system\n1. 读写文件\n    ```\n    const fs = require('fs');\n    \n    //readFile(文件名,function(err,data))\n    fs.readFile('aaa.txt',function(err,data){\n        if(err){\n            console.log('读取失败');\n        }else{\n            console.log(data.toString());\n        }\n    });\n    \n    //writeFile(文件名,内容,function(err))\n    fs.writeFile('bbb.txt','123',function(err){\n        console.log(err);\n    });\n    ```\n2. 打开文件\n    > fs.open(path, flags[, mode], callback)\n    \n    - path - 文件的路径。\n    - flags - 文件打开的行为。具体值详见下文。\n    - mode - 设置文件模式(权限)，文件创建默认权限为 0666(可读，可写)。\n    - callback - 回调函数，带有两个参数如：callback(err, fd)。\n    ```\n    var fs = require(\"fs\");\n    \n    // 异步打开文件\n    console.log(\"准备打开文件！\");\n    fs.open('input.txt', 'r+', function(err, fd) {\n       if (err) {\n           return console.error(err);\n       }\n      console.log(\"文件打开成功！\");     \n    });\n    ```\n3. 获取文件信息\n    > fs.stat(path, callback)\n\n    ```\n    var fs = require('fs');\n    \n    fs.stat('/Users/liuht/code/itbilu/demo/fs.js', function (err, stats) {\n        console.log(stats.isFile());         //true\n    })\n    ```\n4. 关闭文件\n\n    ```\n    fs.close(fd, function(err){\n        if (err){\n            console.log(err);\n        }\n        console.log(\"文件关闭成功\");\n    });\n    ```\n\n---\n## 5. http数据解析\n### 5.1 GET解析\n- querystring解析(亦用于POST)\n```\nconst querystring = require('querystring');\n\njson = querystring.parse('user=blue&pass=12345&age=18');\nconsole.log(json);\n>> { user: 'blue', pass: '12345', age: '18' }\n```\n- url解析\n```\nconst urlLib = require('url');\n//二参：是否把query进行query转换\nvar obj=urlLib.parse('http://www.zjn.com/index?a=123&b=654',true);\nconsole.log(obj);\n\n>>  Url {\n    protocol: 'http:',\n    slashes: true,\n    auth: null,\n    host: 'www.zjn.com',\n    port: null,\n    hostname: 'www.zjn.com',\n    hash: null,\n    search: '?a=123&b=654',\n    query: { a: '123', b: '654' },\n    pathname: '/index',\n    path: '/index?a=123&b=654',\n    href: 'http://www.zjn.com/index?a=123&b=654' }\n```\n### 5.2 POST\n```\nconst http = require('http');\nconst querystring = require('querystring');\n\nhttp.createServer(function(req,res){\n    //POST-req分段发送\n    var str='';\n    //data-有一段数据到达(多次)\n    var i=0;\n    req.on('data',function(data){\n        console.log(`第${i++}次收数据`)\n        str+=data;\n    });\n    //end-数据全部到达标记(一次)\n    req.on('end',function(){\n        var POST=querystring.parse(str);\n        console.log(POST);\n    });\n}).listen(8080);\n```\n---\n## 6. 模块\n### 6.1 自定义模块\n```\n//mod.js\nvar a = 12;\nexports.b = 23;//输出的对象加前缀exports.\nmodule.exports={b,c=2,d=4};//批量输出\n//1.js\nconst mod1 = require('./mod');//模块在node_modules目录下时./可省\nconsole.log(mod1.a);\nconsole.log(mod1.b);\n\n//输出：\nundefined\n23\n```\n---\n## 7. [事件][1]\n### 7.1 事件绑定\n> eventEmitter.on(event, listener)为事件绑定监听器,监听器为回调函数\n> .emit(event, [arg1],[arg2], [...])触发,参数为监听器参数\n> .once(event,listener)一次性监听器\n\n```\n// 引入 events 模块\nvar events = require('events');\n// 创建 事件触发器 对象\nvar eventEmitter = new events.EventEmitter();\n\n// 2.创建事件处理程序\nvar connectHandler = function connected() {\n    console.log('1.连接成功。');\n    // 3.触发 data_received 事件\n    eventEmitter.emit('data_received');\n}\n\n// 绑定 connection 事件处理程序\neventEmitter.on('connection', connectHandler);\n// 绑定 data_received 事件(使用匿名函数)\neventEmitter.on('data_received', function () {\n    console.log('2.数据接收成功。');\n});\n\n// 1.触发 connection 事件 \neventEmitter.emit('connection');\n\nconsole.log(\"3.程序执行完毕。\");\n```\n> 输出：\n> $ node main.js\n> 1.连接成功。\n> 2.数据接收成功。\n> 3.程序执行完毕。\n\n### 7.2 error 事件\n内置，一般要为会触发 error 事件的对象设置监听器，避免程序崩溃\n```\nreaderStream.on('error', function(err){\n   console.log(err.stack);\n});\n```\n---\n## 8. Buffer\n1. 编码\n    ```\n    //用from创建buffer对象（安全）\n    const buf = Buffer.from('runoob', 'ascii');\n    \n    // 输出 72756e6f6f62\n    console.log(buf.toString('hex'));\n    \n    // 输出 cnVub29i\n    console.log(buf.toString('base64'));\n    ```\n2. 写入缓冲区\n    ```\n    buf.write(string[, offset[, length]][, encoding])\n    ```\n    \n    > string - 写入缓冲区的字符串。\n    > offset - 缓冲区开始写入的索引值，默认为 0 。\n    > length - 写入的字节数，默认为 buffer.length\n    > encoding - 使用的编码。默认为 'utf8' 。\n    > 返回实际写入的大小\n\n---\n## 9. Stream\n- 所有的 Stream 对象都是 EventEmitter 的实例。\n### 9.1 从文件读入流\n```\nvar fs = require(\"fs\");\nvar data = '';\n\n// 创建可读流\nvar readerStream = fs.createReadStream('input.txt');\n\n// 设置编码为 utf8。\nreaderStream.setEncoding('UTF8');\n\n// 处理流事件 --> data, end, and error\nreaderStream.on('data', function(chunk) {\n   data += chunk;\n});\n\nreaderStream.on('end',function(){\n   console.log(data);\n});\n\nreaderStream.on('error', function(err){\n   console.log(err.stack);\n});\n\nconsole.log(\"程序执行完毕\");\n```\n> 程序执行完毕\n> &input.txt的内容\n\n### 9.2 写入流到文件\n```\nvar fs = require(\"fs\");\nvar data = '菜鸟教程官网地址：www.runoob.com';\n\n// 创建一个可以写入的流，写入到文件 output.txt 中\nvar writerStream = fs.createWriteStream('output.txt');\n\n// 使用 utf8 编码写入数据\nwriterStream.write(data,'UTF8');\n\n// 标记文件末尾\nwriterStream.end();\n\n// 处理流事件 --> data, end, and error\nwriterStream.on('finish', function() {\n    console.log(\"写入完成。\");\n});\n\nwriterStream.on('error', function(err){\n   console.log(err.stack);\n});\n```\n### 9.3 管道流\n- 从一个流中获取数据并将数据传递到另外一个流中。\n![此处输入图片的描述][2]\n```\nvar fs = require(\"fs\");\n\n// 创建一个可读流\nvar readerStream = fs.createReadStream('input.txt');\n\n// 创建一个可写流\nvar writerStream = fs.createWriteStream('output.txt');\n\n// 管道读写操作\n// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中\nreaderStream.pipe(writerStream);\n\nconsole.log(\"程序执行完毕\");\n```\n### 9.4 链式流\n: 创建多个流操作链，一般用于管道操作。\n- 压缩文件\n```\nvar fs = require(\"fs\");\nvar zlib = require('zlib');\n\n// 压缩 input.txt 文件为 input.txt.gz\nfs.createReadStream('input.txt')\n  .pipe(zlib.createGzip())\n  .pipe(fs.createWriteStream('input.txt.gz'));\n  \nconsole.log(\"文件压缩完成。\");\n```\n- 解压文件\n```\nvar fs = require(\"fs\");\nvar zlib = require('zlib');\n\n// 解压 input.txt.gz 文件为 input.txt\nfs.createReadStream('input.txt.gz')\n  .pipe(zlib.createGunzip())\n  .pipe(fs.createWriteStream('input.txt'));\n  \nconsole.log(\"文件解压完成。\");\n```\n---\n## 10. express\n非侵入性：保留了原生的功能，添加了一些方法。\n只提供最简单的功能，使用中间件(插件)拓展功能。\n链式操作：多次用`server.use`对请求进行处理(7.3)\n\n- query方法解析get请求：\n```\n//1.添加依赖\nconst express = require('express');\n//2.创建服务\nvar server=express();\n//3.use添加响应，处理请求\nserver.get('/login',function(req,res){\n    //内置query方法\n    var user = req.query['user'];\n    res.send('欢迎'+user,200);//send比原生的write功能更强大，可以放各种类型参数\n    res.end();\n});\n//4.监听端口\nserver.listen(8080);\n```\n### 10.1 三种方法\n- .get() - 处理get请求\n- .post() - 处理post请求\n- .all() - 可处理所有请求\n\n### 10.2 静态资源\n- express-static\n```\nconst express = require('express');\n//1.添加依赖\nconst expressStatic = require('express-static');\n\nvar server = express();\nserver.listen(8080);\n\n//2.use使用插件\n//指定静态资源目录，可从url直接访问\nserver.use(expressStatic('./www'));\n```\n### 10.3 GET/POST解析\n- GET:exoress中req.query['user']直接解析\n- POST:\n    - 用body-parser\n    ```\n    const bosyParser=require('body-parser');\n    \n    //use函数无路径参数时，指接受所有请求\n    server.use(bodyParser.urlencoded({\n    extended:false,     //扩展模式：默认为true，不建议\n    limit:2*1024*1024   //2M\n    }));\n    srver.use('/',function(req,res){\n        console.log(req.body);//POST\n    });\n    ```\n    - 手动实现\n    ```\n    //server.js\n    const bodyParser2=require('./lib/my-body-paser');\n    server.use(bodyParser2);\n    srver.use('/',function(req,res){\n    console.log(reg.body);\n    });\n    \n    //my-body-parser.js\n    const querystring = require('querystring');\n    \n    module.exports=function(req,res,next){\n        var str = '';\n        req.on('data',function(data){\n            str+=data;\n        });\n        req.on('end',function(){\n            req.body=querystring.parse(str);\n            next();\n        });\n    }\n    ```\n### 10.4 链式操作\n```\nsrver.use('/',function(req,res,next){\n    console.log('a');\n    next();//让下一个处理者处理\n});\nsrver.use('/',function(req,res){\n    console.log('b');\n});\n```\n> a\nb\n\n---\n## 11. Cookie & Seesion\n### 11.1 设置、删除Cookie\n```\nserver.use('/aaa/a.html', function (req, res) {\n    //path：在此目录下生效，maxAge：生存毫秒\n    res.cookie('user', 'blue', {path: '/aaa', maxAge: 30 * 24 * 3600 * 1000});\n    //删除\n    res.clearCookie('user');\n    \n    res.send('ok');\n});\n```\n### 11.2 读取Cookie\n```\n//依赖cookie-parser\nconst cookieParser = require('cookie-parser');\n\nserver.use(cookieParser());\n\nserver.use('/', function (req, res) {\n    console.log(req.cookies);\n    \n    res.send('ok');\n});\n```\n### 11.3 签名Cookie\n```\n//依赖cookie-parser\nconst cookieParser = require('cookie-parser');\n//签名\nserver.use(cookieParser('wesdfw4r34tf'));\n\nserver.use('/', function (req, res){\n    res.cookie('user', 'blue', {signed: true});\n    //读取\n    console.log('签名cookie：', req.signedCookies);\n    console.log('无签名cookie：', req.cookies);\n    \n    res.send('ok');\n});\n```\n### 11.4 Session\n- 加密是强制的\n```\nconst cookieParser = require('cookie-parser');\nconst cookieSession = require('cookie-session');\n//密钥\nvar arr=[];\nfor(var i=0;i<10000;i++){\n  arr.push('sig_'+Math.random());\n}\n//会生成(session id)一个sess Cookie和一个sess.sig Cookie\nserver.use(cookieParser());\nserver.use(cookieSession({\n    name: 'sess',\n    keys: arr,\n    maxAge: 2 * 3600 * 1000\n}));\n\nserver.use('/', function (req, res) {\n    //读取、修改\n    if (req.session['count'] == null) {\n        req.session['count'] = 1;\n    } else if(req.session['count'] == 100) {\n        //删除\n        delete req.session;\n    } else {\n        req.session['count']++;\n    }\n    console.log(req.session['count']);\n\n    res.send('ok');\n});\n```\n---\n## 12. 文件上传\n- 文件名会被自动重命名防重名\n```\nconst express = require('express');\nconst multer = require('multer');\nconst fs = require('fs');\n//解析路径\nconst pathLib = require('path');\n\nvar server = express();\n//指定存放路径和文件限制\nserver.use(multer({dest: './www/upload/'}).any());\n\nserver.post('/', function (req, res) {\n    //新文件名\n    var newName = req.files[0].path +\n        pathLib.parse(req.files[0].originalname).ext;\n    //重命名\n    fs.rename(req.files[0].path, newName, function (err) {\n        if (err)\n            res.send('上传失败');\n        else\n            res.send('成功');\n    });\n});\n\nserver.listen(8080);\n```\n---\n## 13. 数据库\nmysql库的connection连接之后不要断开，不然后面无法再使用。可用连接池。\n### 13.1 查\n```\nvar mysql  = require('mysql');  \n\nvar connection = mysql.createConnection({     \n    host     : 'localhost',       \n    user     : 'root',              \n    password : '123456',       \n    port: '3306',                   \n    database: 'test', \n}); \n//连\nconnection.connect();\n\nvar sql = 'SELECT * FROM websites';\n//查\nconnection.query(sql,function (err, result) {\n        if(err){\n          console.log('[SELECT ERROR] - ',err.message);\n          return;\n        }\n \n       console.log('-----------SELECT-----------');\n       console.log(result);\n       console.log('----------------------------\\n\\n');  \n});\n//断\nconnection.end();\n```\n### 13.2 增\n```\nvar addSql = 'INSERT INTO websites(Id,name,url,alexa,country) VALUES(0,?,?,?,?)';\nvar addSqlParams = ['菜鸟工具', 'https://c.runoob.com','23453', 'CN'];\n//增\nconnection.query(addSql,addSqlParams,function (err, result) {\n    if(err){\n        console.log('[INSERT ERROR] - ',err.message);\n        return;\n    }        \n    \n    console.log('-------------INSERT---------------');\n    //console.log('INSERT ID:',result.insertId);        \n    console.log('INSERT ID:',result);        \n    console.log('----------------------------------\\n\\n');  \n});\n```\n### 13.3 改\n```\nvar modSql = 'UPDATE websites SET name = ?,url = ? WHERE Id = ?';\nvar modSqlParams = ['菜鸟移动站', 'https://m.runoob.com',6];\n//改\nconnection.query(modSql,modSqlParams,function (err, result) {\n    if(err){\n        console.log('[UPDATE ERROR] - ',err.message);\n        return;\n    }        \n    console.log('-----------UPDATE-----------');\n    console.log('UPDATE affectedRows',result.affectedRows);\n    console.log('----------------------------\\n\\n');\n});\n```\n### 13.4 删\n```\nvar delSql = 'DELETE FROM websites where id=6';\n//删\nconnection.query(delSql,function (err, result) {\n    if(err){\n        console.log('[DELETE ERROR] - ',err.message);\n        return;\n    }        \n    \n    console.log('-------------DELETE-------------');\n    console.log('DELETE affectedRows',result.affectedRows);\n    console.log('--------------------------------\\n\\n');  \n});\n```\n### 13.5 连接池\n```\nvar mysql = require('mysql');\nvar pool  = mysql.createPool({\n    host: '',\n    user: '',\n    password: '',\n    port: '',\n    database: '',\n});\n\nexports.query = function(sql, cb){\n    pool.getConnection(function(err, connection) {\n        connection.query(sql, cb);\n        connection.release();\n    });\n}\n```\n\n  [1]: https://www.runoob.com/nodejs/nodejs-event.html\n  [2]: http://www.runoob.com/wp-content/uploads/2015/09/bVcla61","source":"_posts/Node.js.md","raw":"---\ntitle: Node.js\ndate: 2019-01-21 10:26:49\ntags: JS\n---\n\n---\n## 1. NPM\n- 安装：`npm install <Module Name>@可空版本号`\n- 使用：`var express = require('express');`\n- 本地安装 装在CLI当前目录 node_modules 下；全局安装 装在node下\n- 更新：`npm update express`\n- 淘宝镜像：`npm install -g cnpm --registry=https://registry.npm.taobao.org`\n    使用：`cnpm install [name]`\n\n<!-- more -->\n---\n## 2. Sundry\n- Node.js 基本上所有的事件机制都是用设计模式中**观察者模式**实现\n    当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新\n- Node.js 异步编程的直接体现就是回调，Node 所有 API 都支持回调函数。\n\n---\n## 3. 创建服务器\n```\n//添加http依赖\nvar http = require(\"http\");\n\n//创建服务器（匿名形式写入回调）\nhttp.createServer(function(request, response) {\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n}).listen(8888);\n```\n\n---\n## 4. 文件操作file system\n1. 读写文件\n    ```\n    const fs = require('fs');\n    \n    //readFile(文件名,function(err,data))\n    fs.readFile('aaa.txt',function(err,data){\n        if(err){\n            console.log('读取失败');\n        }else{\n            console.log(data.toString());\n        }\n    });\n    \n    //writeFile(文件名,内容,function(err))\n    fs.writeFile('bbb.txt','123',function(err){\n        console.log(err);\n    });\n    ```\n2. 打开文件\n    > fs.open(path, flags[, mode], callback)\n    \n    - path - 文件的路径。\n    - flags - 文件打开的行为。具体值详见下文。\n    - mode - 设置文件模式(权限)，文件创建默认权限为 0666(可读，可写)。\n    - callback - 回调函数，带有两个参数如：callback(err, fd)。\n    ```\n    var fs = require(\"fs\");\n    \n    // 异步打开文件\n    console.log(\"准备打开文件！\");\n    fs.open('input.txt', 'r+', function(err, fd) {\n       if (err) {\n           return console.error(err);\n       }\n      console.log(\"文件打开成功！\");     \n    });\n    ```\n3. 获取文件信息\n    > fs.stat(path, callback)\n\n    ```\n    var fs = require('fs');\n    \n    fs.stat('/Users/liuht/code/itbilu/demo/fs.js', function (err, stats) {\n        console.log(stats.isFile());         //true\n    })\n    ```\n4. 关闭文件\n\n    ```\n    fs.close(fd, function(err){\n        if (err){\n            console.log(err);\n        }\n        console.log(\"文件关闭成功\");\n    });\n    ```\n\n---\n## 5. http数据解析\n### 5.1 GET解析\n- querystring解析(亦用于POST)\n```\nconst querystring = require('querystring');\n\njson = querystring.parse('user=blue&pass=12345&age=18');\nconsole.log(json);\n>> { user: 'blue', pass: '12345', age: '18' }\n```\n- url解析\n```\nconst urlLib = require('url');\n//二参：是否把query进行query转换\nvar obj=urlLib.parse('http://www.zjn.com/index?a=123&b=654',true);\nconsole.log(obj);\n\n>>  Url {\n    protocol: 'http:',\n    slashes: true,\n    auth: null,\n    host: 'www.zjn.com',\n    port: null,\n    hostname: 'www.zjn.com',\n    hash: null,\n    search: '?a=123&b=654',\n    query: { a: '123', b: '654' },\n    pathname: '/index',\n    path: '/index?a=123&b=654',\n    href: 'http://www.zjn.com/index?a=123&b=654' }\n```\n### 5.2 POST\n```\nconst http = require('http');\nconst querystring = require('querystring');\n\nhttp.createServer(function(req,res){\n    //POST-req分段发送\n    var str='';\n    //data-有一段数据到达(多次)\n    var i=0;\n    req.on('data',function(data){\n        console.log(`第${i++}次收数据`)\n        str+=data;\n    });\n    //end-数据全部到达标记(一次)\n    req.on('end',function(){\n        var POST=querystring.parse(str);\n        console.log(POST);\n    });\n}).listen(8080);\n```\n---\n## 6. 模块\n### 6.1 自定义模块\n```\n//mod.js\nvar a = 12;\nexports.b = 23;//输出的对象加前缀exports.\nmodule.exports={b,c=2,d=4};//批量输出\n//1.js\nconst mod1 = require('./mod');//模块在node_modules目录下时./可省\nconsole.log(mod1.a);\nconsole.log(mod1.b);\n\n//输出：\nundefined\n23\n```\n---\n## 7. [事件][1]\n### 7.1 事件绑定\n> eventEmitter.on(event, listener)为事件绑定监听器,监听器为回调函数\n> .emit(event, [arg1],[arg2], [...])触发,参数为监听器参数\n> .once(event,listener)一次性监听器\n\n```\n// 引入 events 模块\nvar events = require('events');\n// 创建 事件触发器 对象\nvar eventEmitter = new events.EventEmitter();\n\n// 2.创建事件处理程序\nvar connectHandler = function connected() {\n    console.log('1.连接成功。');\n    // 3.触发 data_received 事件\n    eventEmitter.emit('data_received');\n}\n\n// 绑定 connection 事件处理程序\neventEmitter.on('connection', connectHandler);\n// 绑定 data_received 事件(使用匿名函数)\neventEmitter.on('data_received', function () {\n    console.log('2.数据接收成功。');\n});\n\n// 1.触发 connection 事件 \neventEmitter.emit('connection');\n\nconsole.log(\"3.程序执行完毕。\");\n```\n> 输出：\n> $ node main.js\n> 1.连接成功。\n> 2.数据接收成功。\n> 3.程序执行完毕。\n\n### 7.2 error 事件\n内置，一般要为会触发 error 事件的对象设置监听器，避免程序崩溃\n```\nreaderStream.on('error', function(err){\n   console.log(err.stack);\n});\n```\n---\n## 8. Buffer\n1. 编码\n    ```\n    //用from创建buffer对象（安全）\n    const buf = Buffer.from('runoob', 'ascii');\n    \n    // 输出 72756e6f6f62\n    console.log(buf.toString('hex'));\n    \n    // 输出 cnVub29i\n    console.log(buf.toString('base64'));\n    ```\n2. 写入缓冲区\n    ```\n    buf.write(string[, offset[, length]][, encoding])\n    ```\n    \n    > string - 写入缓冲区的字符串。\n    > offset - 缓冲区开始写入的索引值，默认为 0 。\n    > length - 写入的字节数，默认为 buffer.length\n    > encoding - 使用的编码。默认为 'utf8' 。\n    > 返回实际写入的大小\n\n---\n## 9. Stream\n- 所有的 Stream 对象都是 EventEmitter 的实例。\n### 9.1 从文件读入流\n```\nvar fs = require(\"fs\");\nvar data = '';\n\n// 创建可读流\nvar readerStream = fs.createReadStream('input.txt');\n\n// 设置编码为 utf8。\nreaderStream.setEncoding('UTF8');\n\n// 处理流事件 --> data, end, and error\nreaderStream.on('data', function(chunk) {\n   data += chunk;\n});\n\nreaderStream.on('end',function(){\n   console.log(data);\n});\n\nreaderStream.on('error', function(err){\n   console.log(err.stack);\n});\n\nconsole.log(\"程序执行完毕\");\n```\n> 程序执行完毕\n> &input.txt的内容\n\n### 9.2 写入流到文件\n```\nvar fs = require(\"fs\");\nvar data = '菜鸟教程官网地址：www.runoob.com';\n\n// 创建一个可以写入的流，写入到文件 output.txt 中\nvar writerStream = fs.createWriteStream('output.txt');\n\n// 使用 utf8 编码写入数据\nwriterStream.write(data,'UTF8');\n\n// 标记文件末尾\nwriterStream.end();\n\n// 处理流事件 --> data, end, and error\nwriterStream.on('finish', function() {\n    console.log(\"写入完成。\");\n});\n\nwriterStream.on('error', function(err){\n   console.log(err.stack);\n});\n```\n### 9.3 管道流\n- 从一个流中获取数据并将数据传递到另外一个流中。\n![此处输入图片的描述][2]\n```\nvar fs = require(\"fs\");\n\n// 创建一个可读流\nvar readerStream = fs.createReadStream('input.txt');\n\n// 创建一个可写流\nvar writerStream = fs.createWriteStream('output.txt');\n\n// 管道读写操作\n// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中\nreaderStream.pipe(writerStream);\n\nconsole.log(\"程序执行完毕\");\n```\n### 9.4 链式流\n: 创建多个流操作链，一般用于管道操作。\n- 压缩文件\n```\nvar fs = require(\"fs\");\nvar zlib = require('zlib');\n\n// 压缩 input.txt 文件为 input.txt.gz\nfs.createReadStream('input.txt')\n  .pipe(zlib.createGzip())\n  .pipe(fs.createWriteStream('input.txt.gz'));\n  \nconsole.log(\"文件压缩完成。\");\n```\n- 解压文件\n```\nvar fs = require(\"fs\");\nvar zlib = require('zlib');\n\n// 解压 input.txt.gz 文件为 input.txt\nfs.createReadStream('input.txt.gz')\n  .pipe(zlib.createGunzip())\n  .pipe(fs.createWriteStream('input.txt'));\n  \nconsole.log(\"文件解压完成。\");\n```\n---\n## 10. express\n非侵入性：保留了原生的功能，添加了一些方法。\n只提供最简单的功能，使用中间件(插件)拓展功能。\n链式操作：多次用`server.use`对请求进行处理(7.3)\n\n- query方法解析get请求：\n```\n//1.添加依赖\nconst express = require('express');\n//2.创建服务\nvar server=express();\n//3.use添加响应，处理请求\nserver.get('/login',function(req,res){\n    //内置query方法\n    var user = req.query['user'];\n    res.send('欢迎'+user,200);//send比原生的write功能更强大，可以放各种类型参数\n    res.end();\n});\n//4.监听端口\nserver.listen(8080);\n```\n### 10.1 三种方法\n- .get() - 处理get请求\n- .post() - 处理post请求\n- .all() - 可处理所有请求\n\n### 10.2 静态资源\n- express-static\n```\nconst express = require('express');\n//1.添加依赖\nconst expressStatic = require('express-static');\n\nvar server = express();\nserver.listen(8080);\n\n//2.use使用插件\n//指定静态资源目录，可从url直接访问\nserver.use(expressStatic('./www'));\n```\n### 10.3 GET/POST解析\n- GET:exoress中req.query['user']直接解析\n- POST:\n    - 用body-parser\n    ```\n    const bosyParser=require('body-parser');\n    \n    //use函数无路径参数时，指接受所有请求\n    server.use(bodyParser.urlencoded({\n    extended:false,     //扩展模式：默认为true，不建议\n    limit:2*1024*1024   //2M\n    }));\n    srver.use('/',function(req,res){\n        console.log(req.body);//POST\n    });\n    ```\n    - 手动实现\n    ```\n    //server.js\n    const bodyParser2=require('./lib/my-body-paser');\n    server.use(bodyParser2);\n    srver.use('/',function(req,res){\n    console.log(reg.body);\n    });\n    \n    //my-body-parser.js\n    const querystring = require('querystring');\n    \n    module.exports=function(req,res,next){\n        var str = '';\n        req.on('data',function(data){\n            str+=data;\n        });\n        req.on('end',function(){\n            req.body=querystring.parse(str);\n            next();\n        });\n    }\n    ```\n### 10.4 链式操作\n```\nsrver.use('/',function(req,res,next){\n    console.log('a');\n    next();//让下一个处理者处理\n});\nsrver.use('/',function(req,res){\n    console.log('b');\n});\n```\n> a\nb\n\n---\n## 11. Cookie & Seesion\n### 11.1 设置、删除Cookie\n```\nserver.use('/aaa/a.html', function (req, res) {\n    //path：在此目录下生效，maxAge：生存毫秒\n    res.cookie('user', 'blue', {path: '/aaa', maxAge: 30 * 24 * 3600 * 1000});\n    //删除\n    res.clearCookie('user');\n    \n    res.send('ok');\n});\n```\n### 11.2 读取Cookie\n```\n//依赖cookie-parser\nconst cookieParser = require('cookie-parser');\n\nserver.use(cookieParser());\n\nserver.use('/', function (req, res) {\n    console.log(req.cookies);\n    \n    res.send('ok');\n});\n```\n### 11.3 签名Cookie\n```\n//依赖cookie-parser\nconst cookieParser = require('cookie-parser');\n//签名\nserver.use(cookieParser('wesdfw4r34tf'));\n\nserver.use('/', function (req, res){\n    res.cookie('user', 'blue', {signed: true});\n    //读取\n    console.log('签名cookie：', req.signedCookies);\n    console.log('无签名cookie：', req.cookies);\n    \n    res.send('ok');\n});\n```\n### 11.4 Session\n- 加密是强制的\n```\nconst cookieParser = require('cookie-parser');\nconst cookieSession = require('cookie-session');\n//密钥\nvar arr=[];\nfor(var i=0;i<10000;i++){\n  arr.push('sig_'+Math.random());\n}\n//会生成(session id)一个sess Cookie和一个sess.sig Cookie\nserver.use(cookieParser());\nserver.use(cookieSession({\n    name: 'sess',\n    keys: arr,\n    maxAge: 2 * 3600 * 1000\n}));\n\nserver.use('/', function (req, res) {\n    //读取、修改\n    if (req.session['count'] == null) {\n        req.session['count'] = 1;\n    } else if(req.session['count'] == 100) {\n        //删除\n        delete req.session;\n    } else {\n        req.session['count']++;\n    }\n    console.log(req.session['count']);\n\n    res.send('ok');\n});\n```\n---\n## 12. 文件上传\n- 文件名会被自动重命名防重名\n```\nconst express = require('express');\nconst multer = require('multer');\nconst fs = require('fs');\n//解析路径\nconst pathLib = require('path');\n\nvar server = express();\n//指定存放路径和文件限制\nserver.use(multer({dest: './www/upload/'}).any());\n\nserver.post('/', function (req, res) {\n    //新文件名\n    var newName = req.files[0].path +\n        pathLib.parse(req.files[0].originalname).ext;\n    //重命名\n    fs.rename(req.files[0].path, newName, function (err) {\n        if (err)\n            res.send('上传失败');\n        else\n            res.send('成功');\n    });\n});\n\nserver.listen(8080);\n```\n---\n## 13. 数据库\nmysql库的connection连接之后不要断开，不然后面无法再使用。可用连接池。\n### 13.1 查\n```\nvar mysql  = require('mysql');  \n\nvar connection = mysql.createConnection({     \n    host     : 'localhost',       \n    user     : 'root',              \n    password : '123456',       \n    port: '3306',                   \n    database: 'test', \n}); \n//连\nconnection.connect();\n\nvar sql = 'SELECT * FROM websites';\n//查\nconnection.query(sql,function (err, result) {\n        if(err){\n          console.log('[SELECT ERROR] - ',err.message);\n          return;\n        }\n \n       console.log('-----------SELECT-----------');\n       console.log(result);\n       console.log('----------------------------\\n\\n');  \n});\n//断\nconnection.end();\n```\n### 13.2 增\n```\nvar addSql = 'INSERT INTO websites(Id,name,url,alexa,country) VALUES(0,?,?,?,?)';\nvar addSqlParams = ['菜鸟工具', 'https://c.runoob.com','23453', 'CN'];\n//增\nconnection.query(addSql,addSqlParams,function (err, result) {\n    if(err){\n        console.log('[INSERT ERROR] - ',err.message);\n        return;\n    }        \n    \n    console.log('-------------INSERT---------------');\n    //console.log('INSERT ID:',result.insertId);        \n    console.log('INSERT ID:',result);        \n    console.log('----------------------------------\\n\\n');  \n});\n```\n### 13.3 改\n```\nvar modSql = 'UPDATE websites SET name = ?,url = ? WHERE Id = ?';\nvar modSqlParams = ['菜鸟移动站', 'https://m.runoob.com',6];\n//改\nconnection.query(modSql,modSqlParams,function (err, result) {\n    if(err){\n        console.log('[UPDATE ERROR] - ',err.message);\n        return;\n    }        \n    console.log('-----------UPDATE-----------');\n    console.log('UPDATE affectedRows',result.affectedRows);\n    console.log('----------------------------\\n\\n');\n});\n```\n### 13.4 删\n```\nvar delSql = 'DELETE FROM websites where id=6';\n//删\nconnection.query(delSql,function (err, result) {\n    if(err){\n        console.log('[DELETE ERROR] - ',err.message);\n        return;\n    }        \n    \n    console.log('-------------DELETE-------------');\n    console.log('DELETE affectedRows',result.affectedRows);\n    console.log('--------------------------------\\n\\n');  \n});\n```\n### 13.5 连接池\n```\nvar mysql = require('mysql');\nvar pool  = mysql.createPool({\n    host: '',\n    user: '',\n    password: '',\n    port: '',\n    database: '',\n});\n\nexports.query = function(sql, cb){\n    pool.getConnection(function(err, connection) {\n        connection.query(sql, cb);\n        connection.release();\n    });\n}\n```\n\n  [1]: https://www.runoob.com/nodejs/nodejs-event.html\n  [2]: http://www.runoob.com/wp-content/uploads/2015/09/bVcla61","slug":"Node.js","published":1,"updated":"2019-01-21T06:27:25.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642pyc000qy0ooxjy7x0v4","content":"<hr>\n<h2 id=\"1-NPM\"><a href=\"#1-NPM\" class=\"headerlink\" title=\"1. NPM\"></a>1. NPM</h2><ul>\n<li>安装：<code>npm install &lt;Module Name&gt;@可空版本号</code></li>\n<li>使用：<code>var express = require(&#39;express&#39;);</code></li>\n<li>本地安装 装在CLI当前目录 node_modules 下；全局安装 装在node下</li>\n<li>更新：<code>npm update express</code></li>\n<li>淘宝镜像：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>  使用：<code>cnpm install [name]</code></li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h2 id=\"2-Sundry\"><a href=\"#2-Sundry\" class=\"headerlink\" title=\"2. Sundry\"></a>2. Sundry</h2><ul>\n<li>Node.js 基本上所有的事件机制都是用设计模式中<strong>观察者模式</strong>实现<br>  当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新</li>\n<li>Node.js 异步编程的直接体现就是回调，Node 所有 API 都支持回调函数。</li>\n</ul>\n<hr>\n<h2 id=\"3-创建服务器\"><a href=\"#3-创建服务器\" class=\"headerlink\" title=\"3. 创建服务器\"></a>3. 创建服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加http依赖</span><br><span class=\"line\">var http = require(&quot;http&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">//创建服务器（匿名形式写入回调）</span><br><span class=\"line\">http.createServer(function(request, response) &#123;</span><br><span class=\"line\">    response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class=\"line\">    response.write(&quot;Hello World&quot;);</span><br><span class=\"line\">    response.end();</span><br><span class=\"line\">&#125;).listen(8888);</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-文件操作file-system\"><a href=\"#4-文件操作file-system\" class=\"headerlink\" title=\"4. 文件操作file system\"></a>4. 文件操作file system</h2><ol>\n<li><p>读写文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&apos;fs&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//readFile(文件名,function(err,data))</span><br><span class=\"line\">fs.readFile(&apos;aaa.txt&apos;,function(err,data)&#123;</span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        console.log(&apos;读取失败&apos;);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        console.log(data.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//writeFile(文件名,内容,function(err))</span><br><span class=\"line\">fs.writeFile(&apos;bbb.txt&apos;,&apos;123&apos;,function(err)&#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开文件</p>\n<blockquote>\n<p>fs.open(path, flags[, mode], callback)</p>\n</blockquote>\n<ul>\n<li>path - 文件的路径。</li>\n<li>flags - 文件打开的行为。具体值详见下文。</li>\n<li>mode - 设置文件模式(权限)，文件创建默认权限为 0666(可读，可写)。</li>\n<li>callback - 回调函数，带有两个参数如：callback(err, fd)。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 异步打开文件</span><br><span class=\"line\">console.log(&quot;准备打开文件！&quot;);</span><br><span class=\"line\">fs.open(&apos;input.txt&apos;, &apos;r+&apos;, function(err, fd) &#123;</span><br><span class=\"line\">   if (err) &#123;</span><br><span class=\"line\">       return console.error(err);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  console.log(&quot;文件打开成功！&quot;);     </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>获取文件信息</p>\n<blockquote>\n<p>fs.stat(path, callback)</p>\n</blockquote>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.stat(&apos;/Users/liuht/code/itbilu/demo/fs.js&apos;, function (err, stats) &#123;</span><br><span class=\"line\">    console.log(stats.isFile());         //true</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.close(fd, function(err)&#123;</span><br><span class=\"line\">    if (err)&#123;</span><br><span class=\"line\">        console.log(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&quot;文件关闭成功&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"5-http数据解析\"><a href=\"#5-http数据解析\" class=\"headerlink\" title=\"5. http数据解析\"></a>5. http数据解析</h2><h3 id=\"5-1-GET解析\"><a href=\"#5-1-GET解析\" class=\"headerlink\" title=\"5.1 GET解析\"></a>5.1 GET解析</h3><ul>\n<li><p>querystring解析(亦用于POST)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">json = querystring.parse(&apos;user=blue&amp;pass=12345&amp;age=18&apos;);</span><br><span class=\"line\">console.log(json);</span><br><span class=\"line\">&gt;&gt; &#123; user: &apos;blue&apos;, pass: &apos;12345&apos;, age: &apos;18&apos; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>url解析</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const urlLib = require(&apos;url&apos;);</span><br><span class=\"line\">//二参：是否把query进行query转换</span><br><span class=\"line\">var obj=urlLib.parse(&apos;http://www.zjn.com/index?a=123&amp;b=654&apos;,true);</span><br><span class=\"line\">console.log(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;  Url &#123;</span><br><span class=\"line\">    protocol: &apos;http:&apos;,</span><br><span class=\"line\">    slashes: true,</span><br><span class=\"line\">    auth: null,</span><br><span class=\"line\">    host: &apos;www.zjn.com&apos;,</span><br><span class=\"line\">    port: null,</span><br><span class=\"line\">    hostname: &apos;www.zjn.com&apos;,</span><br><span class=\"line\">    hash: null,</span><br><span class=\"line\">    search: &apos;?a=123&amp;b=654&apos;,</span><br><span class=\"line\">    query: &#123; a: &apos;123&apos;, b: &apos;654&apos; &#125;,</span><br><span class=\"line\">    pathname: &apos;/index&apos;,</span><br><span class=\"line\">    path: &apos;/index?a=123&amp;b=654&apos;,</span><br><span class=\"line\">    href: &apos;http://www.zjn.com/index?a=123&amp;b=654&apos; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-2-POST\"><a href=\"#5-2-POST\" class=\"headerlink\" title=\"5.2 POST\"></a>5.2 POST</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(&apos;http&apos;);</span><br><span class=\"line\">const querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    //POST-req分段发送</span><br><span class=\"line\">    var str=&apos;&apos;;</span><br><span class=\"line\">    //data-有一段数据到达(多次)</span><br><span class=\"line\">    var i=0;</span><br><span class=\"line\">    req.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">        console.log(`第$&#123;i++&#125;次收数据`)</span><br><span class=\"line\">        str+=data;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    //end-数据全部到达标记(一次)</span><br><span class=\"line\">    req.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">        var POST=querystring.parse(str);</span><br><span class=\"line\">        console.log(POST);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"6-模块\"><a href=\"#6-模块\" class=\"headerlink\" title=\"6. 模块\"></a>6. 模块</h2><h3 id=\"6-1-自定义模块\"><a href=\"#6-1-自定义模块\" class=\"headerlink\" title=\"6.1 自定义模块\"></a>6.1 自定义模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//mod.js</span><br><span class=\"line\">var a = 12;</span><br><span class=\"line\">exports.b = 23;//输出的对象加前缀exports.</span><br><span class=\"line\">module.exports=&#123;b,c=2,d=4&#125;;//批量输出</span><br><span class=\"line\">//1.js</span><br><span class=\"line\">const mod1 = require(&apos;./mod&apos;);//模块在node_modules目录下时./可省</span><br><span class=\"line\">console.log(mod1.a);</span><br><span class=\"line\">console.log(mod1.b);</span><br><span class=\"line\"></span><br><span class=\"line\">//输出：</span><br><span class=\"line\">undefined</span><br><span class=\"line\">23</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"7-事件\"><a href=\"#7-事件\" class=\"headerlink\" title=\"7. 事件\"></a>7. <a href=\"https://www.runoob.com/nodejs/nodejs-event.html\" target=\"_blank\" rel=\"noopener\">事件</a></h2><h3 id=\"7-1-事件绑定\"><a href=\"#7-1-事件绑定\" class=\"headerlink\" title=\"7.1 事件绑定\"></a>7.1 事件绑定</h3><blockquote>\n<p>eventEmitter.on(event, listener)为事件绑定监听器,监听器为回调函数<br>.emit(event, [arg1],[arg2], […])触发,参数为监听器参数<br>.once(event,listener)一次性监听器</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入 events 模块</span><br><span class=\"line\">var events = require(&apos;events&apos;);</span><br><span class=\"line\">// 创建 事件触发器 对象</span><br><span class=\"line\">var eventEmitter = new events.EventEmitter();</span><br><span class=\"line\"></span><br><span class=\"line\">// 2.创建事件处理程序</span><br><span class=\"line\">var connectHandler = function connected() &#123;</span><br><span class=\"line\">    console.log(&apos;1.连接成功。&apos;);</span><br><span class=\"line\">    // 3.触发 data_received 事件</span><br><span class=\"line\">    eventEmitter.emit(&apos;data_received&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 绑定 connection 事件处理程序</span><br><span class=\"line\">eventEmitter.on(&apos;connection&apos;, connectHandler);</span><br><span class=\"line\">// 绑定 data_received 事件(使用匿名函数)</span><br><span class=\"line\">eventEmitter.on(&apos;data_received&apos;, function () &#123;</span><br><span class=\"line\">    console.log(&apos;2.数据接收成功。&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 1.触发 connection 事件 </span><br><span class=\"line\">eventEmitter.emit(&apos;connection&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&quot;3.程序执行完毕。&quot;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输出：<br>$ node main.js<br>1.连接成功。<br>2.数据接收成功。<br>3.程序执行完毕。</p>\n</blockquote>\n<h3 id=\"7-2-error-事件\"><a href=\"#7-2-error-事件\" class=\"headerlink\" title=\"7.2 error 事件\"></a>7.2 error 事件</h3><p>内置，一般要为会触发 error 事件的对象设置监听器，避免程序崩溃<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">readerStream.on(&apos;error&apos;, function(err)&#123;</span><br><span class=\"line\">   console.log(err.stack);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"8-Buffer\"><a href=\"#8-Buffer\" class=\"headerlink\" title=\"8. Buffer\"></a>8. Buffer</h2><ol>\n<li><p>编码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用from创建buffer对象（安全）</span><br><span class=\"line\">const buf = Buffer.from(&apos;runoob&apos;, &apos;ascii&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出 72756e6f6f62</span><br><span class=\"line\">console.log(buf.toString(&apos;hex&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出 cnVub29i</span><br><span class=\"line\">console.log(buf.toString(&apos;base64&apos;));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写入缓冲区</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf.write(string[, offset[, length]][, encoding])</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code>&gt; string - 写入缓冲区的字符串。\n&gt; offset - 缓冲区开始写入的索引值，默认为 0 。\n&gt; length - 写入的字节数，默认为 buffer.length\n&gt; encoding - 使用的编码。默认为 &#39;utf8&#39; 。\n&gt; 返回实际写入的大小\n</code></pre><hr>\n<h2 id=\"9-Stream\"><a href=\"#9-Stream\" class=\"headerlink\" title=\"9. Stream\"></a>9. Stream</h2><ul>\n<li>所有的 Stream 对象都是 EventEmitter 的实例。<h3 id=\"9-1-从文件读入流\"><a href=\"#9-1-从文件读入流\" class=\"headerlink\" title=\"9.1 从文件读入流\"></a>9.1 从文件读入流</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var data = &apos;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建可读流</span><br><span class=\"line\">var readerStream = fs.createReadStream(&apos;input.txt&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置编码为 utf8。</span><br><span class=\"line\">readerStream.setEncoding(&apos;UTF8&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 处理流事件 --&gt; data, end, and error</span><br><span class=\"line\">readerStream.on(&apos;data&apos;, function(chunk) &#123;</span><br><span class=\"line\">   data += chunk;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">readerStream.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">   console.log(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">readerStream.on(&apos;error&apos;, function(err)&#123;</span><br><span class=\"line\">   console.log(err.stack);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&quot;程序执行完毕&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>程序执行完毕<br>&amp;input.txt的内容</p>\n</blockquote>\n<h3 id=\"9-2-写入流到文件\"><a href=\"#9-2-写入流到文件\" class=\"headerlink\" title=\"9.2 写入流到文件\"></a>9.2 写入流到文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var data = &apos;菜鸟教程官网地址：www.runoob.com&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个可以写入的流，写入到文件 output.txt 中</span><br><span class=\"line\">var writerStream = fs.createWriteStream(&apos;output.txt&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用 utf8 编码写入数据</span><br><span class=\"line\">writerStream.write(data,&apos;UTF8&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 标记文件末尾</span><br><span class=\"line\">writerStream.end();</span><br><span class=\"line\"></span><br><span class=\"line\">// 处理流事件 --&gt; data, end, and error</span><br><span class=\"line\">writerStream.on(&apos;finish&apos;, function() &#123;</span><br><span class=\"line\">    console.log(&quot;写入完成。&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">writerStream.on(&apos;error&apos;, function(err)&#123;</span><br><span class=\"line\">   console.log(err.stack);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-3-管道流\"><a href=\"#9-3-管道流\" class=\"headerlink\" title=\"9.3 管道流\"></a>9.3 管道流</h3><ul>\n<li>从一个流中获取数据并将数据传递到另外一个流中。<br><img src=\"http://www.runoob.com/wp-content/uploads/2015/09/bVcla61\" alt=\"此处输入图片的描述\"><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个可读流</span><br><span class=\"line\">var readerStream = fs.createReadStream(&apos;input.txt&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个可写流</span><br><span class=\"line\">var writerStream = fs.createWriteStream(&apos;output.txt&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 管道读写操作</span><br><span class=\"line\">// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中</span><br><span class=\"line\">readerStream.pipe(writerStream);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&quot;程序执行完毕&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"9-4-链式流\"><a href=\"#9-4-链式流\" class=\"headerlink\" title=\"9.4 链式流\"></a>9.4 链式流</h3><p>: 创建多个流操作链，一般用于管道操作。</p>\n<ul>\n<li><p>压缩文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var zlib = require(&apos;zlib&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 压缩 input.txt 文件为 input.txt.gz</span><br><span class=\"line\">fs.createReadStream(&apos;input.txt&apos;)</span><br><span class=\"line\">  .pipe(zlib.createGzip())</span><br><span class=\"line\">  .pipe(fs.createWriteStream(&apos;input.txt.gz&apos;));</span><br><span class=\"line\">  </span><br><span class=\"line\">console.log(&quot;文件压缩完成。&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var zlib = require(&apos;zlib&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 解压 input.txt.gz 文件为 input.txt</span><br><span class=\"line\">fs.createReadStream(&apos;input.txt.gz&apos;)</span><br><span class=\"line\">  .pipe(zlib.createGunzip())</span><br><span class=\"line\">  .pipe(fs.createWriteStream(&apos;input.txt&apos;));</span><br><span class=\"line\">  </span><br><span class=\"line\">console.log(&quot;文件解压完成。&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"10-express\"><a href=\"#10-express\" class=\"headerlink\" title=\"10. express\"></a>10. express</h2><p>非侵入性：保留了原生的功能，添加了一些方法。<br>只提供最简单的功能，使用中间件(插件)拓展功能。<br>链式操作：多次用<code>server.use</code>对请求进行处理(7.3)</p>\n<ul>\n<li>query方法解析get请求：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.添加依赖</span><br><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\">//2.创建服务</span><br><span class=\"line\">var server=express();</span><br><span class=\"line\">//3.use添加响应，处理请求</span><br><span class=\"line\">server.get(&apos;/login&apos;,function(req,res)&#123;</span><br><span class=\"line\">    //内置query方法</span><br><span class=\"line\">    var user = req.query[&apos;user&apos;];</span><br><span class=\"line\">    res.send(&apos;欢迎&apos;+user,200);//send比原生的write功能更强大，可以放各种类型参数</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//4.监听端口</span><br><span class=\"line\">server.listen(8080);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"10-1-三种方法\"><a href=\"#10-1-三种方法\" class=\"headerlink\" title=\"10.1 三种方法\"></a>10.1 三种方法</h3><ul>\n<li>.get() - 处理get请求</li>\n<li>.post() - 处理post请求</li>\n<li>.all() - 可处理所有请求</li>\n</ul>\n<h3 id=\"10-2-静态资源\"><a href=\"#10-2-静态资源\" class=\"headerlink\" title=\"10.2 静态资源\"></a>10.2 静态资源</h3><ul>\n<li>express-static<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\">//1.添加依赖</span><br><span class=\"line\">const expressStatic = require(&apos;express-static&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">server.listen(8080);</span><br><span class=\"line\"></span><br><span class=\"line\">//2.use使用插件</span><br><span class=\"line\">//指定静态资源目录，可从url直接访问</span><br><span class=\"line\">server.use(expressStatic(&apos;./www&apos;));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"10-3-GET-POST解析\"><a href=\"#10-3-GET-POST解析\" class=\"headerlink\" title=\"10.3 GET/POST解析\"></a>10.3 GET/POST解析</h3><ul>\n<li>GET:exoress中req.query[‘user’]直接解析</li>\n<li><p>POST:</p>\n<ul>\n<li><p>用body-parser</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const bosyParser=require(&apos;body-parser&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//use函数无路径参数时，指接受所有请求</span><br><span class=\"line\">server.use(bodyParser.urlencoded(&#123;</span><br><span class=\"line\">extended:false,     //扩展模式：默认为true，不建议</span><br><span class=\"line\">limit:2*1024*1024   //2M</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">srver.use(&apos;/&apos;,function(req,res)&#123;</span><br><span class=\"line\">    console.log(req.body);//POST</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>手动实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//server.js</span><br><span class=\"line\">const bodyParser2=require(&apos;./lib/my-body-paser&apos;);</span><br><span class=\"line\">server.use(bodyParser2);</span><br><span class=\"line\">srver.use(&apos;/&apos;,function(req,res)&#123;</span><br><span class=\"line\">console.log(reg.body);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//my-body-parser.js</span><br><span class=\"line\">const querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports=function(req,res,next)&#123;</span><br><span class=\"line\">    var str = &apos;&apos;;</span><br><span class=\"line\">    req.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">        str+=data;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    req.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">        req.body=querystring.parse(str);</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"10-4-链式操作\"><a href=\"#10-4-链式操作\" class=\"headerlink\" title=\"10.4 链式操作\"></a>10.4 链式操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srver.use(&apos;/&apos;,function(req,res,next)&#123;</span><br><span class=\"line\">    console.log(&apos;a&apos;);</span><br><span class=\"line\">    next();//让下一个处理者处理</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">srver.use(&apos;/&apos;,function(req,res)&#123;</span><br><span class=\"line\">    console.log(&apos;b&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>a<br>b</p>\n</blockquote>\n<hr>\n<h2 id=\"11-Cookie-amp-Seesion\"><a href=\"#11-Cookie-amp-Seesion\" class=\"headerlink\" title=\"11. Cookie &amp; Seesion\"></a>11. Cookie &amp; Seesion</h2><h3 id=\"11-1-设置、删除Cookie\"><a href=\"#11-1-设置、删除Cookie\" class=\"headerlink\" title=\"11.1 设置、删除Cookie\"></a>11.1 设置、删除Cookie</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.use(&apos;/aaa/a.html&apos;, function (req, res) &#123;</span><br><span class=\"line\">    //path：在此目录下生效，maxAge：生存毫秒</span><br><span class=\"line\">    res.cookie(&apos;user&apos;, &apos;blue&apos;, &#123;path: &apos;/aaa&apos;, maxAge: 30 * 24 * 3600 * 1000&#125;);</span><br><span class=\"line\">    //删除</span><br><span class=\"line\">    res.clearCookie(&apos;user&apos;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    res.send(&apos;ok&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-2-读取Cookie\"><a href=\"#11-2-读取Cookie\" class=\"headerlink\" title=\"11.2 读取Cookie\"></a>11.2 读取Cookie</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//依赖cookie-parser</span><br><span class=\"line\">const cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(cookieParser());</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(&apos;/&apos;, function (req, res) &#123;</span><br><span class=\"line\">    console.log(req.cookies);</span><br><span class=\"line\">    </span><br><span class=\"line\">    res.send(&apos;ok&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-3-签名Cookie\"><a href=\"#11-3-签名Cookie\" class=\"headerlink\" title=\"11.3 签名Cookie\"></a>11.3 签名Cookie</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//依赖cookie-parser</span><br><span class=\"line\">const cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class=\"line\">//签名</span><br><span class=\"line\">server.use(cookieParser(&apos;wesdfw4r34tf&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(&apos;/&apos;, function (req, res)&#123;</span><br><span class=\"line\">    res.cookie(&apos;user&apos;, &apos;blue&apos;, &#123;signed: true&#125;);</span><br><span class=\"line\">    //读取</span><br><span class=\"line\">    console.log(&apos;签名cookie：&apos;, req.signedCookies);</span><br><span class=\"line\">    console.log(&apos;无签名cookie：&apos;, req.cookies);</span><br><span class=\"line\">    </span><br><span class=\"line\">    res.send(&apos;ok&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-4-Session\"><a href=\"#11-4-Session\" class=\"headerlink\" title=\"11.4 Session\"></a>11.4 Session</h3><ul>\n<li>加密是强制的<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class=\"line\">const cookieSession = require(&apos;cookie-session&apos;);</span><br><span class=\"line\">//密钥</span><br><span class=\"line\">var arr=[];</span><br><span class=\"line\">for(var i=0;i&lt;10000;i++)&#123;</span><br><span class=\"line\">  arr.push(&apos;sig_&apos;+Math.random());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//会生成(session id)一个sess Cookie和一个sess.sig Cookie</span><br><span class=\"line\">server.use(cookieParser());</span><br><span class=\"line\">server.use(cookieSession(&#123;</span><br><span class=\"line\">    name: &apos;sess&apos;,</span><br><span class=\"line\">    keys: arr,</span><br><span class=\"line\">    maxAge: 2 * 3600 * 1000</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(&apos;/&apos;, function (req, res) &#123;</span><br><span class=\"line\">    //读取、修改</span><br><span class=\"line\">    if (req.session[&apos;count&apos;] == null) &#123;</span><br><span class=\"line\">        req.session[&apos;count&apos;] = 1;</span><br><span class=\"line\">    &#125; else if(req.session[&apos;count&apos;] == 100) &#123;</span><br><span class=\"line\">        //删除</span><br><span class=\"line\">        delete req.session;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        req.session[&apos;count&apos;]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(req.session[&apos;count&apos;]);</span><br><span class=\"line\"></span><br><span class=\"line\">    res.send(&apos;ok&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"12-文件上传\"><a href=\"#12-文件上传\" class=\"headerlink\" title=\"12. 文件上传\"></a>12. 文件上传</h2><ul>\n<li>文件名会被自动重命名防重名<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\">const multer = require(&apos;multer&apos;);</span><br><span class=\"line\">const fs = require(&apos;fs&apos;);</span><br><span class=\"line\">//解析路径</span><br><span class=\"line\">const pathLib = require(&apos;path&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">//指定存放路径和文件限制</span><br><span class=\"line\">server.use(multer(&#123;dest: &apos;./www/upload/&apos;&#125;).any());</span><br><span class=\"line\"></span><br><span class=\"line\">server.post(&apos;/&apos;, function (req, res) &#123;</span><br><span class=\"line\">    //新文件名</span><br><span class=\"line\">    var newName = req.files[0].path +</span><br><span class=\"line\">        pathLib.parse(req.files[0].originalname).ext;</span><br><span class=\"line\">    //重命名</span><br><span class=\"line\">    fs.rename(req.files[0].path, newName, function (err) &#123;</span><br><span class=\"line\">        if (err)</span><br><span class=\"line\">            res.send(&apos;上传失败&apos;);</span><br><span class=\"line\">        else</span><br><span class=\"line\">            res.send(&apos;成功&apos;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(8080);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"13-数据库\"><a href=\"#13-数据库\" class=\"headerlink\" title=\"13. 数据库\"></a>13. 数据库</h2><p>mysql库的connection连接之后不要断开，不然后面无法再使用。可用连接池。</p>\n<h3 id=\"13-1-查\"><a href=\"#13-1-查\" class=\"headerlink\" title=\"13.1 查\"></a>13.1 查</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql  = require(&apos;mysql&apos;);  </span><br><span class=\"line\"></span><br><span class=\"line\">var connection = mysql.createConnection(&#123;     </span><br><span class=\"line\">    host     : &apos;localhost&apos;,       </span><br><span class=\"line\">    user     : &apos;root&apos;,              </span><br><span class=\"line\">    password : &apos;123456&apos;,       </span><br><span class=\"line\">    port: &apos;3306&apos;,                   </span><br><span class=\"line\">    database: &apos;test&apos;, </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">//连</span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\"></span><br><span class=\"line\">var sql = &apos;SELECT * FROM websites&apos;;</span><br><span class=\"line\">//查</span><br><span class=\"line\">connection.query(sql,function (err, result) &#123;</span><br><span class=\"line\">        if(err)&#123;</span><br><span class=\"line\">          console.log(&apos;[SELECT ERROR] - &apos;,err.message);</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">       console.log(&apos;-----------SELECT-----------&apos;);</span><br><span class=\"line\">       console.log(result);</span><br><span class=\"line\">       console.log(&apos;----------------------------\\n\\n&apos;);  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//断</span><br><span class=\"line\">connection.end();</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-2-增\"><a href=\"#13-2-增\" class=\"headerlink\" title=\"13.2 增\"></a>13.2 增</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var addSql = &apos;INSERT INTO websites(Id,name,url,alexa,country) VALUES(0,?,?,?,?)&apos;;</span><br><span class=\"line\">var addSqlParams = [&apos;菜鸟工具&apos;, &apos;https://c.runoob.com&apos;,&apos;23453&apos;, &apos;CN&apos;];</span><br><span class=\"line\">//增</span><br><span class=\"line\">connection.query(addSql,addSqlParams,function (err, result) &#123;</span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        console.log(&apos;[INSERT ERROR] - &apos;,err.message);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    </span><br><span class=\"line\">    console.log(&apos;-------------INSERT---------------&apos;);</span><br><span class=\"line\">    //console.log(&apos;INSERT ID:&apos;,result.insertId);        </span><br><span class=\"line\">    console.log(&apos;INSERT ID:&apos;,result);        </span><br><span class=\"line\">    console.log(&apos;----------------------------------\\n\\n&apos;);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-3-改\"><a href=\"#13-3-改\" class=\"headerlink\" title=\"13.3 改\"></a>13.3 改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var modSql = &apos;UPDATE websites SET name = ?,url = ? WHERE Id = ?&apos;;</span><br><span class=\"line\">var modSqlParams = [&apos;菜鸟移动站&apos;, &apos;https://m.runoob.com&apos;,6];</span><br><span class=\"line\">//改</span><br><span class=\"line\">connection.query(modSql,modSqlParams,function (err, result) &#123;</span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        console.log(&apos;[UPDATE ERROR] - &apos;,err.message);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    console.log(&apos;-----------UPDATE-----------&apos;);</span><br><span class=\"line\">    console.log(&apos;UPDATE affectedRows&apos;,result.affectedRows);</span><br><span class=\"line\">    console.log(&apos;----------------------------\\n\\n&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-4-删\"><a href=\"#13-4-删\" class=\"headerlink\" title=\"13.4 删\"></a>13.4 删</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var delSql = &apos;DELETE FROM websites where id=6&apos;;</span><br><span class=\"line\">//删</span><br><span class=\"line\">connection.query(delSql,function (err, result) &#123;</span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        console.log(&apos;[DELETE ERROR] - &apos;,err.message);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    </span><br><span class=\"line\">    console.log(&apos;-------------DELETE-------------&apos;);</span><br><span class=\"line\">    console.log(&apos;DELETE affectedRows&apos;,result.affectedRows);</span><br><span class=\"line\">    console.log(&apos;--------------------------------\\n\\n&apos;);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-5-连接池\"><a href=\"#13-5-连接池\" class=\"headerlink\" title=\"13.5 连接池\"></a>13.5 连接池</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql = require(&apos;mysql&apos;);</span><br><span class=\"line\">var pool  = mysql.createPool(&#123;</span><br><span class=\"line\">    host: &apos;&apos;,</span><br><span class=\"line\">    user: &apos;&apos;,</span><br><span class=\"line\">    password: &apos;&apos;,</span><br><span class=\"line\">    port: &apos;&apos;,</span><br><span class=\"line\">    database: &apos;&apos;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">exports.query = function(sql, cb)&#123;</span><br><span class=\"line\">    pool.getConnection(function(err, connection) &#123;</span><br><span class=\"line\">        connection.query(sql, cb);</span><br><span class=\"line\">        connection.release();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"1-NPM\"><a href=\"#1-NPM\" class=\"headerlink\" title=\"1. NPM\"></a>1. NPM</h2><ul>\n<li>安装：<code>npm install &lt;Module Name&gt;@可空版本号</code></li>\n<li>使用：<code>var express = require(&#39;express&#39;);</code></li>\n<li>本地安装 装在CLI当前目录 node_modules 下；全局安装 装在node下</li>\n<li>更新：<code>npm update express</code></li>\n<li>淘宝镜像：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>  使用：<code>cnpm install [name]</code></li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><h2 id=\"2-Sundry\"><a href=\"#2-Sundry\" class=\"headerlink\" title=\"2. Sundry\"></a>2. Sundry</h2><ul>\n<li>Node.js 基本上所有的事件机制都是用设计模式中<strong>观察者模式</strong>实现<br>  当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新</li>\n<li>Node.js 异步编程的直接体现就是回调，Node 所有 API 都支持回调函数。</li>\n</ul>\n<hr>\n<h2 id=\"3-创建服务器\"><a href=\"#3-创建服务器\" class=\"headerlink\" title=\"3. 创建服务器\"></a>3. 创建服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加http依赖</span><br><span class=\"line\">var http = require(&quot;http&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">//创建服务器（匿名形式写入回调）</span><br><span class=\"line\">http.createServer(function(request, response) &#123;</span><br><span class=\"line\">    response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class=\"line\">    response.write(&quot;Hello World&quot;);</span><br><span class=\"line\">    response.end();</span><br><span class=\"line\">&#125;).listen(8888);</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"4-文件操作file-system\"><a href=\"#4-文件操作file-system\" class=\"headerlink\" title=\"4. 文件操作file system\"></a>4. 文件操作file system</h2><ol>\n<li><p>读写文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const fs = require(&apos;fs&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//readFile(文件名,function(err,data))</span><br><span class=\"line\">fs.readFile(&apos;aaa.txt&apos;,function(err,data)&#123;</span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        console.log(&apos;读取失败&apos;);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        console.log(data.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//writeFile(文件名,内容,function(err))</span><br><span class=\"line\">fs.writeFile(&apos;bbb.txt&apos;,&apos;123&apos;,function(err)&#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开文件</p>\n<blockquote>\n<p>fs.open(path, flags[, mode], callback)</p>\n</blockquote>\n<ul>\n<li>path - 文件的路径。</li>\n<li>flags - 文件打开的行为。具体值详见下文。</li>\n<li>mode - 设置文件模式(权限)，文件创建默认权限为 0666(可读，可写)。</li>\n<li>callback - 回调函数，带有两个参数如：callback(err, fd)。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 异步打开文件</span><br><span class=\"line\">console.log(&quot;准备打开文件！&quot;);</span><br><span class=\"line\">fs.open(&apos;input.txt&apos;, &apos;r+&apos;, function(err, fd) &#123;</span><br><span class=\"line\">   if (err) &#123;</span><br><span class=\"line\">       return console.error(err);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  console.log(&quot;文件打开成功！&quot;);     </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>获取文件信息</p>\n<blockquote>\n<p>fs.stat(path, callback)</p>\n</blockquote>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&apos;fs&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.stat(&apos;/Users/liuht/code/itbilu/demo/fs.js&apos;, function (err, stats) &#123;</span><br><span class=\"line\">    console.log(stats.isFile());         //true</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.close(fd, function(err)&#123;</span><br><span class=\"line\">    if (err)&#123;</span><br><span class=\"line\">        console.log(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&quot;文件关闭成功&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"5-http数据解析\"><a href=\"#5-http数据解析\" class=\"headerlink\" title=\"5. http数据解析\"></a>5. http数据解析</h2><h3 id=\"5-1-GET解析\"><a href=\"#5-1-GET解析\" class=\"headerlink\" title=\"5.1 GET解析\"></a>5.1 GET解析</h3><ul>\n<li><p>querystring解析(亦用于POST)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">json = querystring.parse(&apos;user=blue&amp;pass=12345&amp;age=18&apos;);</span><br><span class=\"line\">console.log(json);</span><br><span class=\"line\">&gt;&gt; &#123; user: &apos;blue&apos;, pass: &apos;12345&apos;, age: &apos;18&apos; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>url解析</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const urlLib = require(&apos;url&apos;);</span><br><span class=\"line\">//二参：是否把query进行query转换</span><br><span class=\"line\">var obj=urlLib.parse(&apos;http://www.zjn.com/index?a=123&amp;b=654&apos;,true);</span><br><span class=\"line\">console.log(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;  Url &#123;</span><br><span class=\"line\">    protocol: &apos;http:&apos;,</span><br><span class=\"line\">    slashes: true,</span><br><span class=\"line\">    auth: null,</span><br><span class=\"line\">    host: &apos;www.zjn.com&apos;,</span><br><span class=\"line\">    port: null,</span><br><span class=\"line\">    hostname: &apos;www.zjn.com&apos;,</span><br><span class=\"line\">    hash: null,</span><br><span class=\"line\">    search: &apos;?a=123&amp;b=654&apos;,</span><br><span class=\"line\">    query: &#123; a: &apos;123&apos;, b: &apos;654&apos; &#125;,</span><br><span class=\"line\">    pathname: &apos;/index&apos;,</span><br><span class=\"line\">    path: &apos;/index?a=123&amp;b=654&apos;,</span><br><span class=\"line\">    href: &apos;http://www.zjn.com/index?a=123&amp;b=654&apos; &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-2-POST\"><a href=\"#5-2-POST\" class=\"headerlink\" title=\"5.2 POST\"></a>5.2 POST</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(&apos;http&apos;);</span><br><span class=\"line\">const querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(function(req,res)&#123;</span><br><span class=\"line\">    //POST-req分段发送</span><br><span class=\"line\">    var str=&apos;&apos;;</span><br><span class=\"line\">    //data-有一段数据到达(多次)</span><br><span class=\"line\">    var i=0;</span><br><span class=\"line\">    req.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">        console.log(`第$&#123;i++&#125;次收数据`)</span><br><span class=\"line\">        str+=data;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    //end-数据全部到达标记(一次)</span><br><span class=\"line\">    req.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">        var POST=querystring.parse(str);</span><br><span class=\"line\">        console.log(POST);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"6-模块\"><a href=\"#6-模块\" class=\"headerlink\" title=\"6. 模块\"></a>6. 模块</h2><h3 id=\"6-1-自定义模块\"><a href=\"#6-1-自定义模块\" class=\"headerlink\" title=\"6.1 自定义模块\"></a>6.1 自定义模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//mod.js</span><br><span class=\"line\">var a = 12;</span><br><span class=\"line\">exports.b = 23;//输出的对象加前缀exports.</span><br><span class=\"line\">module.exports=&#123;b,c=2,d=4&#125;;//批量输出</span><br><span class=\"line\">//1.js</span><br><span class=\"line\">const mod1 = require(&apos;./mod&apos;);//模块在node_modules目录下时./可省</span><br><span class=\"line\">console.log(mod1.a);</span><br><span class=\"line\">console.log(mod1.b);</span><br><span class=\"line\"></span><br><span class=\"line\">//输出：</span><br><span class=\"line\">undefined</span><br><span class=\"line\">23</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"7-事件\"><a href=\"#7-事件\" class=\"headerlink\" title=\"7. 事件\"></a>7. <a href=\"https://www.runoob.com/nodejs/nodejs-event.html\" target=\"_blank\" rel=\"noopener\">事件</a></h2><h3 id=\"7-1-事件绑定\"><a href=\"#7-1-事件绑定\" class=\"headerlink\" title=\"7.1 事件绑定\"></a>7.1 事件绑定</h3><blockquote>\n<p>eventEmitter.on(event, listener)为事件绑定监听器,监听器为回调函数<br>.emit(event, [arg1],[arg2], […])触发,参数为监听器参数<br>.once(event,listener)一次性监听器</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入 events 模块</span><br><span class=\"line\">var events = require(&apos;events&apos;);</span><br><span class=\"line\">// 创建 事件触发器 对象</span><br><span class=\"line\">var eventEmitter = new events.EventEmitter();</span><br><span class=\"line\"></span><br><span class=\"line\">// 2.创建事件处理程序</span><br><span class=\"line\">var connectHandler = function connected() &#123;</span><br><span class=\"line\">    console.log(&apos;1.连接成功。&apos;);</span><br><span class=\"line\">    // 3.触发 data_received 事件</span><br><span class=\"line\">    eventEmitter.emit(&apos;data_received&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 绑定 connection 事件处理程序</span><br><span class=\"line\">eventEmitter.on(&apos;connection&apos;, connectHandler);</span><br><span class=\"line\">// 绑定 data_received 事件(使用匿名函数)</span><br><span class=\"line\">eventEmitter.on(&apos;data_received&apos;, function () &#123;</span><br><span class=\"line\">    console.log(&apos;2.数据接收成功。&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 1.触发 connection 事件 </span><br><span class=\"line\">eventEmitter.emit(&apos;connection&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&quot;3.程序执行完毕。&quot;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输出：<br>$ node main.js<br>1.连接成功。<br>2.数据接收成功。<br>3.程序执行完毕。</p>\n</blockquote>\n<h3 id=\"7-2-error-事件\"><a href=\"#7-2-error-事件\" class=\"headerlink\" title=\"7.2 error 事件\"></a>7.2 error 事件</h3><p>内置，一般要为会触发 error 事件的对象设置监听器，避免程序崩溃<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">readerStream.on(&apos;error&apos;, function(err)&#123;</span><br><span class=\"line\">   console.log(err.stack);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"8-Buffer\"><a href=\"#8-Buffer\" class=\"headerlink\" title=\"8. Buffer\"></a>8. Buffer</h2><ol>\n<li><p>编码</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用from创建buffer对象（安全）</span><br><span class=\"line\">const buf = Buffer.from(&apos;runoob&apos;, &apos;ascii&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出 72756e6f6f62</span><br><span class=\"line\">console.log(buf.toString(&apos;hex&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出 cnVub29i</span><br><span class=\"line\">console.log(buf.toString(&apos;base64&apos;));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写入缓冲区</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buf.write(string[, offset[, length]][, encoding])</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<pre><code>&gt; string - 写入缓冲区的字符串。\n&gt; offset - 缓冲区开始写入的索引值，默认为 0 。\n&gt; length - 写入的字节数，默认为 buffer.length\n&gt; encoding - 使用的编码。默认为 &#39;utf8&#39; 。\n&gt; 返回实际写入的大小\n</code></pre><hr>\n<h2 id=\"9-Stream\"><a href=\"#9-Stream\" class=\"headerlink\" title=\"9. Stream\"></a>9. Stream</h2><ul>\n<li>所有的 Stream 对象都是 EventEmitter 的实例。<h3 id=\"9-1-从文件读入流\"><a href=\"#9-1-从文件读入流\" class=\"headerlink\" title=\"9.1 从文件读入流\"></a>9.1 从文件读入流</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var data = &apos;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建可读流</span><br><span class=\"line\">var readerStream = fs.createReadStream(&apos;input.txt&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置编码为 utf8。</span><br><span class=\"line\">readerStream.setEncoding(&apos;UTF8&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 处理流事件 --&gt; data, end, and error</span><br><span class=\"line\">readerStream.on(&apos;data&apos;, function(chunk) &#123;</span><br><span class=\"line\">   data += chunk;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">readerStream.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">   console.log(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">readerStream.on(&apos;error&apos;, function(err)&#123;</span><br><span class=\"line\">   console.log(err.stack);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&quot;程序执行完毕&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>程序执行完毕<br>&amp;input.txt的内容</p>\n</blockquote>\n<h3 id=\"9-2-写入流到文件\"><a href=\"#9-2-写入流到文件\" class=\"headerlink\" title=\"9.2 写入流到文件\"></a>9.2 写入流到文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var data = &apos;菜鸟教程官网地址：www.runoob.com&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个可以写入的流，写入到文件 output.txt 中</span><br><span class=\"line\">var writerStream = fs.createWriteStream(&apos;output.txt&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用 utf8 编码写入数据</span><br><span class=\"line\">writerStream.write(data,&apos;UTF8&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 标记文件末尾</span><br><span class=\"line\">writerStream.end();</span><br><span class=\"line\"></span><br><span class=\"line\">// 处理流事件 --&gt; data, end, and error</span><br><span class=\"line\">writerStream.on(&apos;finish&apos;, function() &#123;</span><br><span class=\"line\">    console.log(&quot;写入完成。&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">writerStream.on(&apos;error&apos;, function(err)&#123;</span><br><span class=\"line\">   console.log(err.stack);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-3-管道流\"><a href=\"#9-3-管道流\" class=\"headerlink\" title=\"9.3 管道流\"></a>9.3 管道流</h3><ul>\n<li>从一个流中获取数据并将数据传递到另外一个流中。<br><img src=\"http://www.runoob.com/wp-content/uploads/2015/09/bVcla61\" alt=\"此处输入图片的描述\"><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个可读流</span><br><span class=\"line\">var readerStream = fs.createReadStream(&apos;input.txt&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个可写流</span><br><span class=\"line\">var writerStream = fs.createWriteStream(&apos;output.txt&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 管道读写操作</span><br><span class=\"line\">// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中</span><br><span class=\"line\">readerStream.pipe(writerStream);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&quot;程序执行完毕&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"9-4-链式流\"><a href=\"#9-4-链式流\" class=\"headerlink\" title=\"9.4 链式流\"></a>9.4 链式流</h3><p>: 创建多个流操作链，一般用于管道操作。</p>\n<ul>\n<li><p>压缩文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var zlib = require(&apos;zlib&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 压缩 input.txt 文件为 input.txt.gz</span><br><span class=\"line\">fs.createReadStream(&apos;input.txt&apos;)</span><br><span class=\"line\">  .pipe(zlib.createGzip())</span><br><span class=\"line\">  .pipe(fs.createWriteStream(&apos;input.txt.gz&apos;));</span><br><span class=\"line\">  </span><br><span class=\"line\">console.log(&quot;文件压缩完成。&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\">var zlib = require(&apos;zlib&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 解压 input.txt.gz 文件为 input.txt</span><br><span class=\"line\">fs.createReadStream(&apos;input.txt.gz&apos;)</span><br><span class=\"line\">  .pipe(zlib.createGunzip())</span><br><span class=\"line\">  .pipe(fs.createWriteStream(&apos;input.txt&apos;));</span><br><span class=\"line\">  </span><br><span class=\"line\">console.log(&quot;文件解压完成。&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"10-express\"><a href=\"#10-express\" class=\"headerlink\" title=\"10. express\"></a>10. express</h2><p>非侵入性：保留了原生的功能，添加了一些方法。<br>只提供最简单的功能，使用中间件(插件)拓展功能。<br>链式操作：多次用<code>server.use</code>对请求进行处理(7.3)</p>\n<ul>\n<li>query方法解析get请求：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.添加依赖</span><br><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\">//2.创建服务</span><br><span class=\"line\">var server=express();</span><br><span class=\"line\">//3.use添加响应，处理请求</span><br><span class=\"line\">server.get(&apos;/login&apos;,function(req,res)&#123;</span><br><span class=\"line\">    //内置query方法</span><br><span class=\"line\">    var user = req.query[&apos;user&apos;];</span><br><span class=\"line\">    res.send(&apos;欢迎&apos;+user,200);//send比原生的write功能更强大，可以放各种类型参数</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//4.监听端口</span><br><span class=\"line\">server.listen(8080);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"10-1-三种方法\"><a href=\"#10-1-三种方法\" class=\"headerlink\" title=\"10.1 三种方法\"></a>10.1 三种方法</h3><ul>\n<li>.get() - 处理get请求</li>\n<li>.post() - 处理post请求</li>\n<li>.all() - 可处理所有请求</li>\n</ul>\n<h3 id=\"10-2-静态资源\"><a href=\"#10-2-静态资源\" class=\"headerlink\" title=\"10.2 静态资源\"></a>10.2 静态资源</h3><ul>\n<li>express-static<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\">//1.添加依赖</span><br><span class=\"line\">const expressStatic = require(&apos;express-static&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">server.listen(8080);</span><br><span class=\"line\"></span><br><span class=\"line\">//2.use使用插件</span><br><span class=\"line\">//指定静态资源目录，可从url直接访问</span><br><span class=\"line\">server.use(expressStatic(&apos;./www&apos;));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"10-3-GET-POST解析\"><a href=\"#10-3-GET-POST解析\" class=\"headerlink\" title=\"10.3 GET/POST解析\"></a>10.3 GET/POST解析</h3><ul>\n<li>GET:exoress中req.query[‘user’]直接解析</li>\n<li><p>POST:</p>\n<ul>\n<li><p>用body-parser</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const bosyParser=require(&apos;body-parser&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//use函数无路径参数时，指接受所有请求</span><br><span class=\"line\">server.use(bodyParser.urlencoded(&#123;</span><br><span class=\"line\">extended:false,     //扩展模式：默认为true，不建议</span><br><span class=\"line\">limit:2*1024*1024   //2M</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">srver.use(&apos;/&apos;,function(req,res)&#123;</span><br><span class=\"line\">    console.log(req.body);//POST</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>手动实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//server.js</span><br><span class=\"line\">const bodyParser2=require(&apos;./lib/my-body-paser&apos;);</span><br><span class=\"line\">server.use(bodyParser2);</span><br><span class=\"line\">srver.use(&apos;/&apos;,function(req,res)&#123;</span><br><span class=\"line\">console.log(reg.body);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//my-body-parser.js</span><br><span class=\"line\">const querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports=function(req,res,next)&#123;</span><br><span class=\"line\">    var str = &apos;&apos;;</span><br><span class=\"line\">    req.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">        str+=data;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    req.on(&apos;end&apos;,function()&#123;</span><br><span class=\"line\">        req.body=querystring.parse(str);</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"10-4-链式操作\"><a href=\"#10-4-链式操作\" class=\"headerlink\" title=\"10.4 链式操作\"></a>10.4 链式操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srver.use(&apos;/&apos;,function(req,res,next)&#123;</span><br><span class=\"line\">    console.log(&apos;a&apos;);</span><br><span class=\"line\">    next();//让下一个处理者处理</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">srver.use(&apos;/&apos;,function(req,res)&#123;</span><br><span class=\"line\">    console.log(&apos;b&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>a<br>b</p>\n</blockquote>\n<hr>\n<h2 id=\"11-Cookie-amp-Seesion\"><a href=\"#11-Cookie-amp-Seesion\" class=\"headerlink\" title=\"11. Cookie &amp; Seesion\"></a>11. Cookie &amp; Seesion</h2><h3 id=\"11-1-设置、删除Cookie\"><a href=\"#11-1-设置、删除Cookie\" class=\"headerlink\" title=\"11.1 设置、删除Cookie\"></a>11.1 设置、删除Cookie</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.use(&apos;/aaa/a.html&apos;, function (req, res) &#123;</span><br><span class=\"line\">    //path：在此目录下生效，maxAge：生存毫秒</span><br><span class=\"line\">    res.cookie(&apos;user&apos;, &apos;blue&apos;, &#123;path: &apos;/aaa&apos;, maxAge: 30 * 24 * 3600 * 1000&#125;);</span><br><span class=\"line\">    //删除</span><br><span class=\"line\">    res.clearCookie(&apos;user&apos;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    res.send(&apos;ok&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-2-读取Cookie\"><a href=\"#11-2-读取Cookie\" class=\"headerlink\" title=\"11.2 读取Cookie\"></a>11.2 读取Cookie</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//依赖cookie-parser</span><br><span class=\"line\">const cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(cookieParser());</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(&apos;/&apos;, function (req, res) &#123;</span><br><span class=\"line\">    console.log(req.cookies);</span><br><span class=\"line\">    </span><br><span class=\"line\">    res.send(&apos;ok&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-3-签名Cookie\"><a href=\"#11-3-签名Cookie\" class=\"headerlink\" title=\"11.3 签名Cookie\"></a>11.3 签名Cookie</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//依赖cookie-parser</span><br><span class=\"line\">const cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class=\"line\">//签名</span><br><span class=\"line\">server.use(cookieParser(&apos;wesdfw4r34tf&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(&apos;/&apos;, function (req, res)&#123;</span><br><span class=\"line\">    res.cookie(&apos;user&apos;, &apos;blue&apos;, &#123;signed: true&#125;);</span><br><span class=\"line\">    //读取</span><br><span class=\"line\">    console.log(&apos;签名cookie：&apos;, req.signedCookies);</span><br><span class=\"line\">    console.log(&apos;无签名cookie：&apos;, req.cookies);</span><br><span class=\"line\">    </span><br><span class=\"line\">    res.send(&apos;ok&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-4-Session\"><a href=\"#11-4-Session\" class=\"headerlink\" title=\"11.4 Session\"></a>11.4 Session</h3><ul>\n<li>加密是强制的<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class=\"line\">const cookieSession = require(&apos;cookie-session&apos;);</span><br><span class=\"line\">//密钥</span><br><span class=\"line\">var arr=[];</span><br><span class=\"line\">for(var i=0;i&lt;10000;i++)&#123;</span><br><span class=\"line\">  arr.push(&apos;sig_&apos;+Math.random());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//会生成(session id)一个sess Cookie和一个sess.sig Cookie</span><br><span class=\"line\">server.use(cookieParser());</span><br><span class=\"line\">server.use(cookieSession(&#123;</span><br><span class=\"line\">    name: &apos;sess&apos;,</span><br><span class=\"line\">    keys: arr,</span><br><span class=\"line\">    maxAge: 2 * 3600 * 1000</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(&apos;/&apos;, function (req, res) &#123;</span><br><span class=\"line\">    //读取、修改</span><br><span class=\"line\">    if (req.session[&apos;count&apos;] == null) &#123;</span><br><span class=\"line\">        req.session[&apos;count&apos;] = 1;</span><br><span class=\"line\">    &#125; else if(req.session[&apos;count&apos;] == 100) &#123;</span><br><span class=\"line\">        //删除</span><br><span class=\"line\">        delete req.session;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        req.session[&apos;count&apos;]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(req.session[&apos;count&apos;]);</span><br><span class=\"line\"></span><br><span class=\"line\">    res.send(&apos;ok&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"12-文件上传\"><a href=\"#12-文件上传\" class=\"headerlink\" title=\"12. 文件上传\"></a>12. 文件上传</h2><ul>\n<li>文件名会被自动重命名防重名<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\">const multer = require(&apos;multer&apos;);</span><br><span class=\"line\">const fs = require(&apos;fs&apos;);</span><br><span class=\"line\">//解析路径</span><br><span class=\"line\">const pathLib = require(&apos;path&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">//指定存放路径和文件限制</span><br><span class=\"line\">server.use(multer(&#123;dest: &apos;./www/upload/&apos;&#125;).any());</span><br><span class=\"line\"></span><br><span class=\"line\">server.post(&apos;/&apos;, function (req, res) &#123;</span><br><span class=\"line\">    //新文件名</span><br><span class=\"line\">    var newName = req.files[0].path +</span><br><span class=\"line\">        pathLib.parse(req.files[0].originalname).ext;</span><br><span class=\"line\">    //重命名</span><br><span class=\"line\">    fs.rename(req.files[0].path, newName, function (err) &#123;</span><br><span class=\"line\">        if (err)</span><br><span class=\"line\">            res.send(&apos;上传失败&apos;);</span><br><span class=\"line\">        else</span><br><span class=\"line\">            res.send(&apos;成功&apos;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(8080);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"13-数据库\"><a href=\"#13-数据库\" class=\"headerlink\" title=\"13. 数据库\"></a>13. 数据库</h2><p>mysql库的connection连接之后不要断开，不然后面无法再使用。可用连接池。</p>\n<h3 id=\"13-1-查\"><a href=\"#13-1-查\" class=\"headerlink\" title=\"13.1 查\"></a>13.1 查</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql  = require(&apos;mysql&apos;);  </span><br><span class=\"line\"></span><br><span class=\"line\">var connection = mysql.createConnection(&#123;     </span><br><span class=\"line\">    host     : &apos;localhost&apos;,       </span><br><span class=\"line\">    user     : &apos;root&apos;,              </span><br><span class=\"line\">    password : &apos;123456&apos;,       </span><br><span class=\"line\">    port: &apos;3306&apos;,                   </span><br><span class=\"line\">    database: &apos;test&apos;, </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">//连</span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\"></span><br><span class=\"line\">var sql = &apos;SELECT * FROM websites&apos;;</span><br><span class=\"line\">//查</span><br><span class=\"line\">connection.query(sql,function (err, result) &#123;</span><br><span class=\"line\">        if(err)&#123;</span><br><span class=\"line\">          console.log(&apos;[SELECT ERROR] - &apos;,err.message);</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">       console.log(&apos;-----------SELECT-----------&apos;);</span><br><span class=\"line\">       console.log(result);</span><br><span class=\"line\">       console.log(&apos;----------------------------\\n\\n&apos;);  </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//断</span><br><span class=\"line\">connection.end();</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-2-增\"><a href=\"#13-2-增\" class=\"headerlink\" title=\"13.2 增\"></a>13.2 增</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var addSql = &apos;INSERT INTO websites(Id,name,url,alexa,country) VALUES(0,?,?,?,?)&apos;;</span><br><span class=\"line\">var addSqlParams = [&apos;菜鸟工具&apos;, &apos;https://c.runoob.com&apos;,&apos;23453&apos;, &apos;CN&apos;];</span><br><span class=\"line\">//增</span><br><span class=\"line\">connection.query(addSql,addSqlParams,function (err, result) &#123;</span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        console.log(&apos;[INSERT ERROR] - &apos;,err.message);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    </span><br><span class=\"line\">    console.log(&apos;-------------INSERT---------------&apos;);</span><br><span class=\"line\">    //console.log(&apos;INSERT ID:&apos;,result.insertId);        </span><br><span class=\"line\">    console.log(&apos;INSERT ID:&apos;,result);        </span><br><span class=\"line\">    console.log(&apos;----------------------------------\\n\\n&apos;);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-3-改\"><a href=\"#13-3-改\" class=\"headerlink\" title=\"13.3 改\"></a>13.3 改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var modSql = &apos;UPDATE websites SET name = ?,url = ? WHERE Id = ?&apos;;</span><br><span class=\"line\">var modSqlParams = [&apos;菜鸟移动站&apos;, &apos;https://m.runoob.com&apos;,6];</span><br><span class=\"line\">//改</span><br><span class=\"line\">connection.query(modSql,modSqlParams,function (err, result) &#123;</span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        console.log(&apos;[UPDATE ERROR] - &apos;,err.message);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    console.log(&apos;-----------UPDATE-----------&apos;);</span><br><span class=\"line\">    console.log(&apos;UPDATE affectedRows&apos;,result.affectedRows);</span><br><span class=\"line\">    console.log(&apos;----------------------------\\n\\n&apos;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-4-删\"><a href=\"#13-4-删\" class=\"headerlink\" title=\"13.4 删\"></a>13.4 删</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var delSql = &apos;DELETE FROM websites where id=6&apos;;</span><br><span class=\"line\">//删</span><br><span class=\"line\">connection.query(delSql,function (err, result) &#123;</span><br><span class=\"line\">    if(err)&#123;</span><br><span class=\"line\">        console.log(&apos;[DELETE ERROR] - &apos;,err.message);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    </span><br><span class=\"line\">    console.log(&apos;-------------DELETE-------------&apos;);</span><br><span class=\"line\">    console.log(&apos;DELETE affectedRows&apos;,result.affectedRows);</span><br><span class=\"line\">    console.log(&apos;--------------------------------\\n\\n&apos;);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-5-连接池\"><a href=\"#13-5-连接池\" class=\"headerlink\" title=\"13.5 连接池\"></a>13.5 连接池</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mysql = require(&apos;mysql&apos;);</span><br><span class=\"line\">var pool  = mysql.createPool(&#123;</span><br><span class=\"line\">    host: &apos;&apos;,</span><br><span class=\"line\">    user: &apos;&apos;,</span><br><span class=\"line\">    password: &apos;&apos;,</span><br><span class=\"line\">    port: &apos;&apos;,</span><br><span class=\"line\">    database: &apos;&apos;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">exports.query = function(sql, cb)&#123;</span><br><span class=\"line\">    pool.getConnection(function(err, connection) &#123;</span><br><span class=\"line\">        connection.query(sql, cb);</span><br><span class=\"line\">        connection.release();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"PHP语法与基础","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n## 1. 常用函数\n---\n### 1.1 函数定义与使用\n```\nfunction sum($a, $b) {\n    echo $a + $b;\n}\nsum(1,2);\n```\n<!-- more -->\n---\n### 1.2 维度打击函数\nserialize方法将对象序列化为字符串，用于存储或者传递数据，然后在需要的时候通过unserialize将字符串反序列化成对象进行使用。\n```\nclass Car {\n    public $name = 'car';\n}\n$a = new Car();\n$str = serialize($a); //对象序列化成字符串\necho $str.'<br>';\n$b = unserialize($str); //反序列化为对象\nvar_dump($b);\n```\n---\n### 1.3 `clone()`复制对象\n```\nclass Car {\n    public $name = 'car';\n    \n    public function __clone() {\n        $obj = new Car();\n        $obj->name = $this->name;\n    }\n}\n$a = new Car();\n$a->name = 'new car';\n$b = clone $a;\nvar_dump($b);\n```\n---\n### 1.4 `isset()` 检测变量是否设置（null）\nPHP和C类似，0 \"0\" false \"\" 都以0保存，当然它们的类型不同。===下可区别。\n```\nif(isset($arr0))\n    print_r($arr0);\n```\n---\n### 1.5 输出\n`var_dump()` 打印类型\n`print_r()` 打印复合类型 如数组 对象\n`print()` 输出字符串\n`echo()` 普通输出，不能输出数组\n\n---\n### 1.6 `foreach()` 遍历\n```php\n<?php\n$students = array(\n'2010'=>'令狐冲',\n'2011'=>'林平之',\n'2012'=>'曲洋',\n'2013'=>'任盈盈',\n'2014'=>'向问天',\n'2015'=>'任我行',\n'2016'=>'冲虚',\n'2017'=>'方正',\n'2018'=>'岳不群',\n'2019'=>'宁中则',\n);//10个学生的学号和姓名，用数组存储\n\n//使用循环结构遍历数组,获取学号和姓名  \n\nforeach($students as $v)\n{\n    echo $v;//输出 姓名\n    echo \"<br />\";\n}\nforeach($students as $key =>$v){ \n    echo $key.\":\".$v;//输出 学号：姓名\n\techo \"<br />\";\n}\n?>\n```\n---\n### 1.7 字符串函数\n\n`str_replace(find,replace,string,count)`替换\nfind\t必需。规定要查找的值。\nreplace\t必需。规定替换 find 中的值的值。\nstring\t必需。规定被搜索的字符串。\ncount\t可选。一个变量，对替换数进行计数。\n\n`trim()`去两端空格\nrtrim去右边空格，ltrim去左边空格。\n\n`strlen()` `mb_strlen(str,lang)`尺子\nstrlen是英文尺子，mb是其他尺子。\nlang是编码格式，utf-8即 \"utf8\" 。\n\n`substr(str,start,length)` `mb_substr(str,start,length,lang)`截肢\n```\n$str='i love you';//截取love这几个字母\necho substr($str, 2, 4);//为什么开始位置是2呢，因为substr函数计算字符串位置是从0开始的，也就是0的位置是i,1的位置是空格，l的位置是2。从位置2开始取4个字符，就是love。\n\n$str='我爱你，中国';//截取中国两个字\necho mb_substr($str,4,2,'utf8');//为什么开始位置是4呢，和上一个例子一样，因为mb_substr函数计算汉字位置是从0开始的，也就是0的位置是我,1的位置是爱，4的位置是中。从位置4开始取2个汉字，就是中国。中文编码一般是utf8格式\n```\n\n`strpos(字典,字,start[可选])`查找定位\n\n`sprintf('%01.2f', $str);`格式化字符串\n%   开始\n0   位数不足时用0填充\n1   最短位数为1(含小数点)，不足用填充位填补\n.   小数点\n2   小数点后保留两位\nf   float\n\n`implode()` `explode()`字符串数组分割转换\n```\n$str = 'apple,banana';\nprint_r(explode(',', $str));//结果显示array('apple','banana')\n\n$arr = array('Hello', 'World!');\nprint_r(implode('', $arr));//结果显示Hello World!\n```\n\n`addslashes()`转义\n```\n$str = \"what's your name?\";\necho addslashes($str);//输出：what\\'s your name?\n```\n\n`preg_match()`正则\n```\n$p = '/apple/';\n$str = \"apple banna\";\nif (preg_match($p, $str)) {\n    echo 'matched';\n}\n```\n\n<br/>\n---\n### 1.7 `exists`类\n```\nfunction func() {\n    echo 'exists';\n}\n$name = 'func';\nif (function_exists('func') ) {//判断函数是否存在\n    $name();\n}\n\nclass MyClass{\n}\nif (class_exists('MyClass')) {// 使用前检查类是否存在\n    $myclass = new MyClass();\n}\n\n$filename = 'test.txt';\nif (!file_exists($filename)) {\n    echo $filename . ' not exists.';\n}\n```\n---\n## 2. Array数组\n---\n### 2.1 定义及初始化\n```php\n$arr = array();\n$fruit = array(\"苹果\",\"香蕉\",\"菠萝\");\nprint_r($fruit);//输出的是人能看懂的数组结构\n\n$arr[0]='苹果';//赋值方法1\n\n$arr = array('0'=>'苹果');//方法2 左键右值\n\n$arr = array('苹果','55');//方法3\n\nforeach($this->tags as $tag)\n    $ids[] = $this->_saveTag($tag);//方法4 连续赋值，键值会自增\n```\n---\n### 2.2 数组的分类\n* 索引数组 - 带有数字索引的数组\n```\n$arr = array(0=>'苹果');\n```\n* 关联数组 - 带有指定键的数组(使用字符串为键名)\n```\n$arr = array('0'=>'苹果');\n```\n* 多维数组 - 包含一个或多个数组的数组\n\n---\n### 2.3 访问数组内容\n```\n$arr0 = $arr['0'];//或$arr[0]即索引数组\n\nforeach($fruit as $k=>$v){\n    echo \"数组中的第$i个值为$fruit[$i]\";//必须用双引号\n    echo \"数组中的第\".$i.\"个值为\".$fruit[$i];//或者用连接符\n}\n```\n---\n## 3. PHP类和对象\n---\n### 3.1 类和对象的定义\n```\n<?php\n//定义一个类\nclass Car {\n    public $name = '汽车';      //默认\n    static $color2 = '白色';    //静态属性\n    protected $corlor = '黑色'; //受保护的\n    private $price = '100000';  //私有\n    function getName() {\n        return $this->name;     //伪变量调用当前对象的属性\n    }\n    public function getPrice() {\n        return $this->price;    //内部方法可以访问私有属性\n    }\n}\n\n$car = new Car();       //实例化一个car对象\n$car->name = '奥迪A6';  //设置对象的属性值\necho $car->getName();   //调用对象的方法 输出对象的名字\necho Car::$color2;      //使用::类名+双冒号直接访问静态对象（不能用this）\n//echo $car->color;     //错误 受保护的属性不允许外部调用\n//echo $car->price;     //错误 私有属性不允许外部调用\n```\n---\n### 3.2 静态成员\n+ 静态方法中，$this伪变量不允许使用。\n+ 可以使用self，parent，static在内部调用静态方法与属性。\n+ 使用::类名+双冒号直接访问静态对象\n```\nclass Car {\n    private static $speed = 10;\n    \n    public static function getSpeed() {\n        return self::$speed;\n    }\n    \n    public static function speedUp() {\n        return self::$speed+=10;\n    }\n}\nclass BigCar extends Car {\n    public static function start() {\n        parent::speedUp();\n    }\n}\n\nBigCar::start();\necho BigCar::getSpeed();\n```\n---\n### 3.3 受保护的方法的使用\n例一：如果构造函数定义成了私有方法，则不允许直接实例化对象了，这时候一般通过静态方法进行实例化。(这样的方法可以控制对象的创建，只允许有一个全局唯一的对象。)\n```\nclass Car {\n    private function __construct() {\n        echo 'object create';\n    }\n\n    private static $_object = null; //因为只在getInstance()里使用一次，且内容私密所以是private\n    public static function getInstance() {\n        if (empty(self::$_object)) {\n            self::$_object = new Car(); //内部方法可以调用私有方法，因此这里可以创建对象；静态::\n        }\n        return self::$_object;\n    }\n}\n//$car = new Car();         //这里不允许直接实例化对象\n$car = Car::getInstance();  //通过静态方法来获得一个实例\n```\n例二：\n`speedUp()`被保护，所以用同类内部的`start()`方法来调用`speedUp()`。\n```\nclass Car {\n    private $speed = 0;\n    \n    public function getSpeed() {\n        return $this->speed;\n    }\n    \n    protected function speedUp() {\n        $this->speed += 10;\n    }\n    \n    //增加start方法，使他能够调用受保护的方法speedUp实现加速10\n    public function start(){\n       $this->speedUp();\n    }\n}\n$car = new Car();\n$car->start();\necho $car->getSpeed();\n```\n---\n### 3.4 构造函数\n具有构造函数的类，会在每次对象创建的时候调用该函数，因此常用来在对象创建的时候进行一些初始化工作。\n例一：\n```\nclass Car {\n   function __construct() {\n       print \"构造函数被调用\\n\";\n   }\n}\n$car = new Car(); //实例化的时候 会自动调用构造函数__construct，这里会输出一个字符串\n```\n例二：在子类中如果定义了__construct则不会调用父类的__construct，如果需要同时调用父类的构造函数，需要使用parent::__construct()显式的调用。\n```\nclass Car {\n   function __construct() {\n       print \"父类构造函数被调用\\n\";\n   }\n}\nclass Truck extends Car {\n   function __construct() {\n       print \"子类构造函数被调用\\n\";\n       parent::__construct();\n   }\n}\n$car = new Truck();\n```\n---\n### 3.5 析构函数\n使用__destruct()进行定义，析构函数指的是当某个对象的所有引用被删除，或者对象被显式的销毁时会执行的函数。\n```\nclass Car {\n   function __construct() {\n       print \"构造函数被调用 \\n\";\n   }\n   function __destruct() {\n       print \"析构函数被调用 \\n\";\n   }\n}\n$car = new Car(); //实例化时会调用构造函数\necho '使用后，准备销毁car对象 \\n';\nunset($car); //销毁时会调用析构函数\n```\n---\n## 4. 其他\n---\n### 4.1 Tips\n#### 4.1.1 对象比较\n当同一个类的两个实例的所有属性都相等时，可以使用比较运算符==进行判断，当需要判断两个变量是否为同一个对象的引用时，可以使用全等运算符===进行判断。\n#### 4.1.2 命名空间的别名\n```\nuse ****\\Response as Res;\n\n$r = new Res('Oops', 400);\n$r->send();\n```\n####4.1.3 全局命名空间\n如Exception类，\n```\n$ex = new Exception();  //错，PHP会在当前命名空间中寻找exception类\n\nthrow new \\Exception(); //对，\\告诉PHP在全局命名空间中寻找该类\n```\n---\n### 4.2 `list()`语言结构\n```php\n<?php\nfunction numbers() {\n    return array(\"狗\",\"猪\",\"猫\");\n}\nlist ($a, $b, $c) = numbers();\necho \"我们的宠物有一只$a,一只$b以及一只 $c\"\n?>\n```\n---\n### 4.3 `const()`语言结构\n+ const用于类成员变量的定义，一经定义，不可修改。Define不可以用于类成员变量的定义，可用于全局常量。\n+ Const不能再条件语句中定义常量\n```\nif (...){\n    const FOO = 'BAR';    // 无效的invalid\n}\nif (...) {\n    define('FOO', 'BAR'); // 有效的valid\n}\n```\n+ const采用普通的常量名称，define可以采用表达式作为名称\n```\nconst  FOO = 'BAR';\nfor ($i = 0; $i < 32; ++$i) {\n    define('BIT_'.$i, 1 << $i);\n}\n```\n+ const只能接受静态的标量，而define可以采用任何表达式\n```\nconst BIT_5 = 1 << 5;    // 无效的invalid\ndefine('BIT_5', 1 << 5); // 有效的valid\n```\n+ const定义的常量时大小写敏感，而define可以通过第三个参数（为true表示大小写不敏感）来指定大小写是否敏感。\n```\ndefine('FOO', 'BAR', true);\necho FOO; // BAR\necho foo; // BAR\n```\n---\n### 4.4 可变函数\n+ 所谓可变函数，即通过变量的值来调用函数，因为变量的值是可变的，所以可以通过改变一个变量的值来实现调用不同的函数。\n+ 经常会用在回调函数、函数列表，或者根据动态参数来调用不同的函数。\n+ 可变函数的调用方法为变量名加括号。\n```\nfunction func() {\n    echo 'my function called.';\n}\n$name = 'func';\n//调用可变函数\n$name();\n```\n---\n### 4.5 双冒号::作用域限定操作符的使用\n+ 用变量在类定义外部访问\n```\nclass Fruit {\n    const CONST_VALUE = 'Fruit Color';\n}\n$classname = 'Fruit';\necho $classname::CONST_VALUE; //使用变量代替类名\necho Fruit::CONST_VALUE;\n```\n+ 在类定义外部使用（const）\n+ 子类调用父类类方法\n```php\nclass Fruit\n{\n    static function color()\n    {\n        return \"color\";\n    }\n\n    static function showColor()\n    {\n        echo \"show \" . self::color();\n    }\n}\n\nclass Apple extends Fruit\n{\n    static function color()\n    {\n        return \"red\";\n    }\n}\nApple::showColor();// output is \"show color\"!\n```\n+ 重写的属性方法\n+ 静态\n```\nclass Fruit {\n    const CONST_VALUE = 'Fruit Color';\n}\n\nclass Apple extends Fruit\n{\n    public static $color = 'Red';\n\n    public static function doubleColon() {\n        echo parent::CONST_VALUE;\n        echo self::$color;\n    }\n}\nApple::doubleColon();\n```\n---\n### 4.6 接口-例\n`DocumentStore`类 实现从不同来源收集文本，下面是它的代码实现过程\n接口在其中的作用就是给`HtmlDocument`和`StreamDocument`提供统一的实现方法\n其他人只要知道如何实现接口，就可以完美使用、设计、拓展`DocumentStore`类\n#### 4.6.1 接口的定义\n定义Documentable接口：\n```\ninterface Documentable\n{\n    public function getId();\n    \n    public function getContent();\n}\n//该定义表明：实现Documentable接口的任何对象都必须提供一个公开的getId()和getContent()\n//作用：可以定义多个不同的实现方式\n```\n#### 4.6.2 接口的代码实现\n定义HtmlDocument类：\n```\nclass HtmlDocument implements Documentable\n{\n    protected $url;\n    \n    public function __construct($url)\n    {\n        $this->url = $url;\n    }\n    \n    public function getId()\n    {\n        return $this->url;\n    }\n    \n    public function getContent();\n    {\n        //balabala\n        \n        return $html;\n    }\n}\n```\n定义StreamDocument类：\n```\nclass HtmlDocument implements Documentable\n{\n    protected $balabala;\n    \n    public function __construct($url)\n    {\n        //balabala\n    }\n    \n    public function getId()\n    {\n        //balabala\n    }\n    \n    public function getContent();\n    {\n        //balabala\n        \n        return $streamContent;\n    }\n}\n```\n#### 4.6.3 将多个同一接口的实现方法进行整合\n定义文档存储类`DocumentStore`\n```\nclass DocumentStore\n{\n    protected $data = [];//用于存储的数组\n    \n    public function addDocument(Documentable $document)//存入文档\n    {\n        //传入实现方法对象，调用其统一的方法\n        $key = $document->getId();          //键\n        $value = $document->getContent();   //值\n        $this->data[$key] = $value;         //保存\n    }\n    \n    public function getDocuments()//取出文档\n    {\n        return $this->data;\n    }\n}\n```\n#### 4.6.4 如何使用`DocumentStore`类\n```\n<?php\n//创建文档存储对象\n$documentStore = new DocumentStore();\n\n//添加HTML文档\n$htmlDoc = new HtmlDocument('https://php.net');\n$documentStore->addDocument($htmlDoc);\n\n//添加流文档\nstreamDoc = new StreamDocument(fopen('stream.txt', 'rb'));//使用不一样的方法对象\n$documentStore->addDocument($htmlDoc);//一样的调用代码\n\nprint_r($documentStore->getDocuments());//输出看看\n```","source":"_posts/PHP语法与基础.md","raw":"---\ntitle: PHP语法与基础\ndate: 2019-01-21 10:26:49\ntags: PHP\n---\n\n---\n## 1. 常用函数\n---\n### 1.1 函数定义与使用\n```\nfunction sum($a, $b) {\n    echo $a + $b;\n}\nsum(1,2);\n```\n<!-- more -->\n---\n### 1.2 维度打击函数\nserialize方法将对象序列化为字符串，用于存储或者传递数据，然后在需要的时候通过unserialize将字符串反序列化成对象进行使用。\n```\nclass Car {\n    public $name = 'car';\n}\n$a = new Car();\n$str = serialize($a); //对象序列化成字符串\necho $str.'<br>';\n$b = unserialize($str); //反序列化为对象\nvar_dump($b);\n```\n---\n### 1.3 `clone()`复制对象\n```\nclass Car {\n    public $name = 'car';\n    \n    public function __clone() {\n        $obj = new Car();\n        $obj->name = $this->name;\n    }\n}\n$a = new Car();\n$a->name = 'new car';\n$b = clone $a;\nvar_dump($b);\n```\n---\n### 1.4 `isset()` 检测变量是否设置（null）\nPHP和C类似，0 \"0\" false \"\" 都以0保存，当然它们的类型不同。===下可区别。\n```\nif(isset($arr0))\n    print_r($arr0);\n```\n---\n### 1.5 输出\n`var_dump()` 打印类型\n`print_r()` 打印复合类型 如数组 对象\n`print()` 输出字符串\n`echo()` 普通输出，不能输出数组\n\n---\n### 1.6 `foreach()` 遍历\n```php\n<?php\n$students = array(\n'2010'=>'令狐冲',\n'2011'=>'林平之',\n'2012'=>'曲洋',\n'2013'=>'任盈盈',\n'2014'=>'向问天',\n'2015'=>'任我行',\n'2016'=>'冲虚',\n'2017'=>'方正',\n'2018'=>'岳不群',\n'2019'=>'宁中则',\n);//10个学生的学号和姓名，用数组存储\n\n//使用循环结构遍历数组,获取学号和姓名  \n\nforeach($students as $v)\n{\n    echo $v;//输出 姓名\n    echo \"<br />\";\n}\nforeach($students as $key =>$v){ \n    echo $key.\":\".$v;//输出 学号：姓名\n\techo \"<br />\";\n}\n?>\n```\n---\n### 1.7 字符串函数\n\n`str_replace(find,replace,string,count)`替换\nfind\t必需。规定要查找的值。\nreplace\t必需。规定替换 find 中的值的值。\nstring\t必需。规定被搜索的字符串。\ncount\t可选。一个变量，对替换数进行计数。\n\n`trim()`去两端空格\nrtrim去右边空格，ltrim去左边空格。\n\n`strlen()` `mb_strlen(str,lang)`尺子\nstrlen是英文尺子，mb是其他尺子。\nlang是编码格式，utf-8即 \"utf8\" 。\n\n`substr(str,start,length)` `mb_substr(str,start,length,lang)`截肢\n```\n$str='i love you';//截取love这几个字母\necho substr($str, 2, 4);//为什么开始位置是2呢，因为substr函数计算字符串位置是从0开始的，也就是0的位置是i,1的位置是空格，l的位置是2。从位置2开始取4个字符，就是love。\n\n$str='我爱你，中国';//截取中国两个字\necho mb_substr($str,4,2,'utf8');//为什么开始位置是4呢，和上一个例子一样，因为mb_substr函数计算汉字位置是从0开始的，也就是0的位置是我,1的位置是爱，4的位置是中。从位置4开始取2个汉字，就是中国。中文编码一般是utf8格式\n```\n\n`strpos(字典,字,start[可选])`查找定位\n\n`sprintf('%01.2f', $str);`格式化字符串\n%   开始\n0   位数不足时用0填充\n1   最短位数为1(含小数点)，不足用填充位填补\n.   小数点\n2   小数点后保留两位\nf   float\n\n`implode()` `explode()`字符串数组分割转换\n```\n$str = 'apple,banana';\nprint_r(explode(',', $str));//结果显示array('apple','banana')\n\n$arr = array('Hello', 'World!');\nprint_r(implode('', $arr));//结果显示Hello World!\n```\n\n`addslashes()`转义\n```\n$str = \"what's your name?\";\necho addslashes($str);//输出：what\\'s your name?\n```\n\n`preg_match()`正则\n```\n$p = '/apple/';\n$str = \"apple banna\";\nif (preg_match($p, $str)) {\n    echo 'matched';\n}\n```\n\n<br/>\n---\n### 1.7 `exists`类\n```\nfunction func() {\n    echo 'exists';\n}\n$name = 'func';\nif (function_exists('func') ) {//判断函数是否存在\n    $name();\n}\n\nclass MyClass{\n}\nif (class_exists('MyClass')) {// 使用前检查类是否存在\n    $myclass = new MyClass();\n}\n\n$filename = 'test.txt';\nif (!file_exists($filename)) {\n    echo $filename . ' not exists.';\n}\n```\n---\n## 2. Array数组\n---\n### 2.1 定义及初始化\n```php\n$arr = array();\n$fruit = array(\"苹果\",\"香蕉\",\"菠萝\");\nprint_r($fruit);//输出的是人能看懂的数组结构\n\n$arr[0]='苹果';//赋值方法1\n\n$arr = array('0'=>'苹果');//方法2 左键右值\n\n$arr = array('苹果','55');//方法3\n\nforeach($this->tags as $tag)\n    $ids[] = $this->_saveTag($tag);//方法4 连续赋值，键值会自增\n```\n---\n### 2.2 数组的分类\n* 索引数组 - 带有数字索引的数组\n```\n$arr = array(0=>'苹果');\n```\n* 关联数组 - 带有指定键的数组(使用字符串为键名)\n```\n$arr = array('0'=>'苹果');\n```\n* 多维数组 - 包含一个或多个数组的数组\n\n---\n### 2.3 访问数组内容\n```\n$arr0 = $arr['0'];//或$arr[0]即索引数组\n\nforeach($fruit as $k=>$v){\n    echo \"数组中的第$i个值为$fruit[$i]\";//必须用双引号\n    echo \"数组中的第\".$i.\"个值为\".$fruit[$i];//或者用连接符\n}\n```\n---\n## 3. PHP类和对象\n---\n### 3.1 类和对象的定义\n```\n<?php\n//定义一个类\nclass Car {\n    public $name = '汽车';      //默认\n    static $color2 = '白色';    //静态属性\n    protected $corlor = '黑色'; //受保护的\n    private $price = '100000';  //私有\n    function getName() {\n        return $this->name;     //伪变量调用当前对象的属性\n    }\n    public function getPrice() {\n        return $this->price;    //内部方法可以访问私有属性\n    }\n}\n\n$car = new Car();       //实例化一个car对象\n$car->name = '奥迪A6';  //设置对象的属性值\necho $car->getName();   //调用对象的方法 输出对象的名字\necho Car::$color2;      //使用::类名+双冒号直接访问静态对象（不能用this）\n//echo $car->color;     //错误 受保护的属性不允许外部调用\n//echo $car->price;     //错误 私有属性不允许外部调用\n```\n---\n### 3.2 静态成员\n+ 静态方法中，$this伪变量不允许使用。\n+ 可以使用self，parent，static在内部调用静态方法与属性。\n+ 使用::类名+双冒号直接访问静态对象\n```\nclass Car {\n    private static $speed = 10;\n    \n    public static function getSpeed() {\n        return self::$speed;\n    }\n    \n    public static function speedUp() {\n        return self::$speed+=10;\n    }\n}\nclass BigCar extends Car {\n    public static function start() {\n        parent::speedUp();\n    }\n}\n\nBigCar::start();\necho BigCar::getSpeed();\n```\n---\n### 3.3 受保护的方法的使用\n例一：如果构造函数定义成了私有方法，则不允许直接实例化对象了，这时候一般通过静态方法进行实例化。(这样的方法可以控制对象的创建，只允许有一个全局唯一的对象。)\n```\nclass Car {\n    private function __construct() {\n        echo 'object create';\n    }\n\n    private static $_object = null; //因为只在getInstance()里使用一次，且内容私密所以是private\n    public static function getInstance() {\n        if (empty(self::$_object)) {\n            self::$_object = new Car(); //内部方法可以调用私有方法，因此这里可以创建对象；静态::\n        }\n        return self::$_object;\n    }\n}\n//$car = new Car();         //这里不允许直接实例化对象\n$car = Car::getInstance();  //通过静态方法来获得一个实例\n```\n例二：\n`speedUp()`被保护，所以用同类内部的`start()`方法来调用`speedUp()`。\n```\nclass Car {\n    private $speed = 0;\n    \n    public function getSpeed() {\n        return $this->speed;\n    }\n    \n    protected function speedUp() {\n        $this->speed += 10;\n    }\n    \n    //增加start方法，使他能够调用受保护的方法speedUp实现加速10\n    public function start(){\n       $this->speedUp();\n    }\n}\n$car = new Car();\n$car->start();\necho $car->getSpeed();\n```\n---\n### 3.4 构造函数\n具有构造函数的类，会在每次对象创建的时候调用该函数，因此常用来在对象创建的时候进行一些初始化工作。\n例一：\n```\nclass Car {\n   function __construct() {\n       print \"构造函数被调用\\n\";\n   }\n}\n$car = new Car(); //实例化的时候 会自动调用构造函数__construct，这里会输出一个字符串\n```\n例二：在子类中如果定义了__construct则不会调用父类的__construct，如果需要同时调用父类的构造函数，需要使用parent::__construct()显式的调用。\n```\nclass Car {\n   function __construct() {\n       print \"父类构造函数被调用\\n\";\n   }\n}\nclass Truck extends Car {\n   function __construct() {\n       print \"子类构造函数被调用\\n\";\n       parent::__construct();\n   }\n}\n$car = new Truck();\n```\n---\n### 3.5 析构函数\n使用__destruct()进行定义，析构函数指的是当某个对象的所有引用被删除，或者对象被显式的销毁时会执行的函数。\n```\nclass Car {\n   function __construct() {\n       print \"构造函数被调用 \\n\";\n   }\n   function __destruct() {\n       print \"析构函数被调用 \\n\";\n   }\n}\n$car = new Car(); //实例化时会调用构造函数\necho '使用后，准备销毁car对象 \\n';\nunset($car); //销毁时会调用析构函数\n```\n---\n## 4. 其他\n---\n### 4.1 Tips\n#### 4.1.1 对象比较\n当同一个类的两个实例的所有属性都相等时，可以使用比较运算符==进行判断，当需要判断两个变量是否为同一个对象的引用时，可以使用全等运算符===进行判断。\n#### 4.1.2 命名空间的别名\n```\nuse ****\\Response as Res;\n\n$r = new Res('Oops', 400);\n$r->send();\n```\n####4.1.3 全局命名空间\n如Exception类，\n```\n$ex = new Exception();  //错，PHP会在当前命名空间中寻找exception类\n\nthrow new \\Exception(); //对，\\告诉PHP在全局命名空间中寻找该类\n```\n---\n### 4.2 `list()`语言结构\n```php\n<?php\nfunction numbers() {\n    return array(\"狗\",\"猪\",\"猫\");\n}\nlist ($a, $b, $c) = numbers();\necho \"我们的宠物有一只$a,一只$b以及一只 $c\"\n?>\n```\n---\n### 4.3 `const()`语言结构\n+ const用于类成员变量的定义，一经定义，不可修改。Define不可以用于类成员变量的定义，可用于全局常量。\n+ Const不能再条件语句中定义常量\n```\nif (...){\n    const FOO = 'BAR';    // 无效的invalid\n}\nif (...) {\n    define('FOO', 'BAR'); // 有效的valid\n}\n```\n+ const采用普通的常量名称，define可以采用表达式作为名称\n```\nconst  FOO = 'BAR';\nfor ($i = 0; $i < 32; ++$i) {\n    define('BIT_'.$i, 1 << $i);\n}\n```\n+ const只能接受静态的标量，而define可以采用任何表达式\n```\nconst BIT_5 = 1 << 5;    // 无效的invalid\ndefine('BIT_5', 1 << 5); // 有效的valid\n```\n+ const定义的常量时大小写敏感，而define可以通过第三个参数（为true表示大小写不敏感）来指定大小写是否敏感。\n```\ndefine('FOO', 'BAR', true);\necho FOO; // BAR\necho foo; // BAR\n```\n---\n### 4.4 可变函数\n+ 所谓可变函数，即通过变量的值来调用函数，因为变量的值是可变的，所以可以通过改变一个变量的值来实现调用不同的函数。\n+ 经常会用在回调函数、函数列表，或者根据动态参数来调用不同的函数。\n+ 可变函数的调用方法为变量名加括号。\n```\nfunction func() {\n    echo 'my function called.';\n}\n$name = 'func';\n//调用可变函数\n$name();\n```\n---\n### 4.5 双冒号::作用域限定操作符的使用\n+ 用变量在类定义外部访问\n```\nclass Fruit {\n    const CONST_VALUE = 'Fruit Color';\n}\n$classname = 'Fruit';\necho $classname::CONST_VALUE; //使用变量代替类名\necho Fruit::CONST_VALUE;\n```\n+ 在类定义外部使用（const）\n+ 子类调用父类类方法\n```php\nclass Fruit\n{\n    static function color()\n    {\n        return \"color\";\n    }\n\n    static function showColor()\n    {\n        echo \"show \" . self::color();\n    }\n}\n\nclass Apple extends Fruit\n{\n    static function color()\n    {\n        return \"red\";\n    }\n}\nApple::showColor();// output is \"show color\"!\n```\n+ 重写的属性方法\n+ 静态\n```\nclass Fruit {\n    const CONST_VALUE = 'Fruit Color';\n}\n\nclass Apple extends Fruit\n{\n    public static $color = 'Red';\n\n    public static function doubleColon() {\n        echo parent::CONST_VALUE;\n        echo self::$color;\n    }\n}\nApple::doubleColon();\n```\n---\n### 4.6 接口-例\n`DocumentStore`类 实现从不同来源收集文本，下面是它的代码实现过程\n接口在其中的作用就是给`HtmlDocument`和`StreamDocument`提供统一的实现方法\n其他人只要知道如何实现接口，就可以完美使用、设计、拓展`DocumentStore`类\n#### 4.6.1 接口的定义\n定义Documentable接口：\n```\ninterface Documentable\n{\n    public function getId();\n    \n    public function getContent();\n}\n//该定义表明：实现Documentable接口的任何对象都必须提供一个公开的getId()和getContent()\n//作用：可以定义多个不同的实现方式\n```\n#### 4.6.2 接口的代码实现\n定义HtmlDocument类：\n```\nclass HtmlDocument implements Documentable\n{\n    protected $url;\n    \n    public function __construct($url)\n    {\n        $this->url = $url;\n    }\n    \n    public function getId()\n    {\n        return $this->url;\n    }\n    \n    public function getContent();\n    {\n        //balabala\n        \n        return $html;\n    }\n}\n```\n定义StreamDocument类：\n```\nclass HtmlDocument implements Documentable\n{\n    protected $balabala;\n    \n    public function __construct($url)\n    {\n        //balabala\n    }\n    \n    public function getId()\n    {\n        //balabala\n    }\n    \n    public function getContent();\n    {\n        //balabala\n        \n        return $streamContent;\n    }\n}\n```\n#### 4.6.3 将多个同一接口的实现方法进行整合\n定义文档存储类`DocumentStore`\n```\nclass DocumentStore\n{\n    protected $data = [];//用于存储的数组\n    \n    public function addDocument(Documentable $document)//存入文档\n    {\n        //传入实现方法对象，调用其统一的方法\n        $key = $document->getId();          //键\n        $value = $document->getContent();   //值\n        $this->data[$key] = $value;         //保存\n    }\n    \n    public function getDocuments()//取出文档\n    {\n        return $this->data;\n    }\n}\n```\n#### 4.6.4 如何使用`DocumentStore`类\n```\n<?php\n//创建文档存储对象\n$documentStore = new DocumentStore();\n\n//添加HTML文档\n$htmlDoc = new HtmlDocument('https://php.net');\n$documentStore->addDocument($htmlDoc);\n\n//添加流文档\nstreamDoc = new StreamDocument(fopen('stream.txt', 'rb'));//使用不一样的方法对象\n$documentStore->addDocument($htmlDoc);//一样的调用代码\n\nprint_r($documentStore->getDocuments());//输出看看\n```","slug":"PHP语法与基础","published":1,"updated":"2019-01-21T06:35:43.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642pye000sy0ooitv6ief8","content":"<hr>\n<h2 id=\"1-常用函数\"><a href=\"#1-常用函数\" class=\"headerlink\" title=\"1. 常用函数\"></a>1. 常用函数</h2><hr>\n<h3 id=\"1-1-函数定义与使用\"><a href=\"#1-1-函数定义与使用\" class=\"headerlink\" title=\"1.1 函数定义与使用\"></a>1.1 函数定义与使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum($a, $b) &#123;</span><br><span class=\"line\">    echo $a + $b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(1,2);</span><br></pre></td></tr></table></figure>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h3 id=\"1-2-维度打击函数\"><a href=\"#1-2-维度打击函数\" class=\"headerlink\" title=\"1.2 维度打击函数\"></a>1.2 维度打击函数</h3><p>serialize方法将对象序列化为字符串，用于存储或者传递数据，然后在需要的时候通过unserialize将字符串反序列化成对象进行使用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">    public $name = &apos;car&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$a = new Car();</span><br><span class=\"line\">$str = serialize($a); //对象序列化成字符串</span><br><span class=\"line\">echo $str.&apos;&lt;br&gt;&apos;;</span><br><span class=\"line\">$b = unserialize($str); //反序列化为对象</span><br><span class=\"line\">var_dump($b);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"1-3-clone-复制对象\"><a href=\"#1-3-clone-复制对象\" class=\"headerlink\" title=\"1.3 clone()复制对象\"></a>1.3 <code>clone()</code>复制对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">    public $name = &apos;car&apos;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function __clone() &#123;</span><br><span class=\"line\">        $obj = new Car();</span><br><span class=\"line\">        $obj-&gt;name = $this-&gt;name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$a = new Car();</span><br><span class=\"line\">$a-&gt;name = &apos;new car&apos;;</span><br><span class=\"line\">$b = clone $a;</span><br><span class=\"line\">var_dump($b);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"1-4-isset-检测变量是否设置（null）\"><a href=\"#1-4-isset-检测变量是否设置（null）\" class=\"headerlink\" title=\"1.4 isset() 检测变量是否设置（null）\"></a>1.4 <code>isset()</code> 检测变量是否设置（null）</h3><p>PHP和C类似，0 “0” false “” 都以0保存，当然它们的类型不同。===下可区别。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(isset($arr0))</span><br><span class=\"line\">    print_r($arr0);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"1-5-输出\"><a href=\"#1-5-输出\" class=\"headerlink\" title=\"1.5 输出\"></a>1.5 输出</h3><p><code>var_dump()</code> 打印类型<br><code>print_r()</code> 打印复合类型 如数组 对象<br><code>print()</code> 输出字符串<br><code>echo()</code> 普通输出，不能输出数组</p>\n<hr>\n<h3 id=\"1-6-foreach-遍历\"><a href=\"#1-6-foreach-遍历\" class=\"headerlink\" title=\"1.6 foreach() 遍历\"></a>1.6 <code>foreach()</code> 遍历</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$students = <span class=\"keyword\">array</span>(</span><br><span class=\"line\"><span class=\"string\">'2010'</span>=&gt;<span class=\"string\">'令狐冲'</span>,</span><br><span class=\"line\"><span class=\"string\">'2011'</span>=&gt;<span class=\"string\">'林平之'</span>,</span><br><span class=\"line\"><span class=\"string\">'2012'</span>=&gt;<span class=\"string\">'曲洋'</span>,</span><br><span class=\"line\"><span class=\"string\">'2013'</span>=&gt;<span class=\"string\">'任盈盈'</span>,</span><br><span class=\"line\"><span class=\"string\">'2014'</span>=&gt;<span class=\"string\">'向问天'</span>,</span><br><span class=\"line\"><span class=\"string\">'2015'</span>=&gt;<span class=\"string\">'任我行'</span>,</span><br><span class=\"line\"><span class=\"string\">'2016'</span>=&gt;<span class=\"string\">'冲虚'</span>,</span><br><span class=\"line\"><span class=\"string\">'2017'</span>=&gt;<span class=\"string\">'方正'</span>,</span><br><span class=\"line\"><span class=\"string\">'2018'</span>=&gt;<span class=\"string\">'岳不群'</span>,</span><br><span class=\"line\"><span class=\"string\">'2019'</span>=&gt;<span class=\"string\">'宁中则'</span>,</span><br><span class=\"line\">);<span class=\"comment\">//10个学生的学号和姓名，用数组存储</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用循环结构遍历数组,获取学号和姓名  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($students <span class=\"keyword\">as</span> $v)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v;<span class=\"comment\">//输出 姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($students <span class=\"keyword\">as</span> $key =&gt;$v)&#123; </span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $key.<span class=\"string\">\":\"</span>.$v;<span class=\"comment\">//输出 学号：姓名</span></span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"1-7-字符串函数\"><a href=\"#1-7-字符串函数\" class=\"headerlink\" title=\"1.7 字符串函数\"></a>1.7 字符串函数</h3><p><code>str_replace(find,replace,string,count)</code>替换<br>find    必需。规定要查找的值。<br>replace    必需。规定替换 find 中的值的值。<br>string    必需。规定被搜索的字符串。<br>count    可选。一个变量，对替换数进行计数。</p>\n<p><code>trim()</code>去两端空格<br>rtrim去右边空格，ltrim去左边空格。</p>\n<p><code>strlen()</code> <code>mb_strlen(str,lang)</code>尺子<br>strlen是英文尺子，mb是其他尺子。<br>lang是编码格式，utf-8即 “utf8” 。</p>\n<p><code>substr(str,start,length)</code> <code>mb_substr(str,start,length,lang)</code>截肢<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$str=&apos;i love you&apos;;//截取love这几个字母</span><br><span class=\"line\">echo substr($str, 2, 4);//为什么开始位置是2呢，因为substr函数计算字符串位置是从0开始的，也就是0的位置是i,1的位置是空格，l的位置是2。从位置2开始取4个字符，就是love。</span><br><span class=\"line\"></span><br><span class=\"line\">$str=&apos;我爱你，中国&apos;;//截取中国两个字</span><br><span class=\"line\">echo mb_substr($str,4,2,&apos;utf8&apos;);//为什么开始位置是4呢，和上一个例子一样，因为mb_substr函数计算汉字位置是从0开始的，也就是0的位置是我,1的位置是爱，4的位置是中。从位置4开始取2个汉字，就是中国。中文编码一般是utf8格式</span><br></pre></td></tr></table></figure></p>\n<p><code>strpos(字典,字,start[可选])</code>查找定位</p>\n<p><code>sprintf(&#39;%01.2f&#39;, $str);</code>格式化字符串<br>%   开始<br>0   位数不足时用0填充<br>1   最短位数为1(含小数点)，不足用填充位填补<br>.   小数点<br>2   小数点后保留两位<br>f   float</p>\n<p><code>implode()</code> <code>explode()</code>字符串数组分割转换<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$str = &apos;apple,banana&apos;;</span><br><span class=\"line\">print_r(explode(&apos;,&apos;, $str));//结果显示array(&apos;apple&apos;,&apos;banana&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = array(&apos;Hello&apos;, &apos;World!&apos;);</span><br><span class=\"line\">print_r(implode(&apos;&apos;, $arr));//结果显示Hello World!</span><br></pre></td></tr></table></figure></p>\n<p><code>addslashes()</code>转义<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$str = &quot;what&apos;s your name?&quot;;</span><br><span class=\"line\">echo addslashes($str);//输出：what\\&apos;s your name?</span><br></pre></td></tr></table></figure></p>\n<p><code>preg_match()</code>正则<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$p = &apos;/apple/&apos;;</span><br><span class=\"line\">$str = &quot;apple banna&quot;;</span><br><span class=\"line\">if (preg_match($p, $str)) &#123;</span><br><span class=\"line\">    echo &apos;matched&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a><br></h2><h3 id=\"1-7-exists类\"><a href=\"#1-7-exists类\" class=\"headerlink\" title=\"1.7 exists类\"></a>1.7 <code>exists</code>类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function func() &#123;</span><br><span class=\"line\">    echo &apos;exists&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$name = &apos;func&apos;;</span><br><span class=\"line\">if (function_exists(&apos;func&apos;) ) &#123;//判断函数是否存在</span><br><span class=\"line\">    $name();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyClass&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (class_exists(&apos;MyClass&apos;)) &#123;// 使用前检查类是否存在</span><br><span class=\"line\">    $myclass = new MyClass();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$filename = &apos;test.txt&apos;;</span><br><span class=\"line\">if (!file_exists($filename)) &#123;</span><br><span class=\"line\">    echo $filename . &apos; not exists.&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"2-Array数组\"><a href=\"#2-Array数组\" class=\"headerlink\" title=\"2. Array数组\"></a>2. Array数组</h2><hr>\n<h3 id=\"2-1-定义及初始化\"><a href=\"#2-1-定义及初始化\" class=\"headerlink\" title=\"2.1 定义及初始化\"></a>2.1 定义及初始化</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">$fruit = <span class=\"keyword\">array</span>(<span class=\"string\">\"苹果\"</span>,<span class=\"string\">\"香蕉\"</span>,<span class=\"string\">\"菠萝\"</span>);</span><br><span class=\"line\">print_r($fruit);<span class=\"comment\">//输出的是人能看懂的数组结构</span></span><br><span class=\"line\"></span><br><span class=\"line\">$arr[<span class=\"number\">0</span>]=<span class=\"string\">'苹果'</span>;<span class=\"comment\">//赋值方法1</span></span><br><span class=\"line\"></span><br><span class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">'0'</span>=&gt;<span class=\"string\">'苹果'</span>);<span class=\"comment\">//方法2 左键右值</span></span><br><span class=\"line\"></span><br><span class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">'苹果'</span>,<span class=\"string\">'55'</span>);<span class=\"comment\">//方法3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">$this</span>-&gt;tags <span class=\"keyword\">as</span> $tag)</span><br><span class=\"line\">    $ids[] = <span class=\"keyword\">$this</span>-&gt;_saveTag($tag);<span class=\"comment\">//方法4 连续赋值，键值会自增</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"2-2-数组的分类\"><a href=\"#2-2-数组的分类\" class=\"headerlink\" title=\"2.2 数组的分类\"></a>2.2 数组的分类</h3><ul>\n<li><p>索引数组 - 带有数字索引的数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = array(0=&gt;&apos;苹果&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关联数组 - 带有指定键的数组(使用字符串为键名)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = array(&apos;0&apos;=&gt;&apos;苹果&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多维数组 - 包含一个或多个数组的数组</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-3-访问数组内容\"><a href=\"#2-3-访问数组内容\" class=\"headerlink\" title=\"2.3 访问数组内容\"></a>2.3 访问数组内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr0 = $arr[&apos;0&apos;];//或$arr[0]即索引数组</span><br><span class=\"line\"></span><br><span class=\"line\">foreach($fruit as $k=&gt;$v)&#123;</span><br><span class=\"line\">    echo &quot;数组中的第$i个值为$fruit[$i]&quot;;//必须用双引号</span><br><span class=\"line\">    echo &quot;数组中的第&quot;.$i.&quot;个值为&quot;.$fruit[$i];//或者用连接符</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"3-PHP类和对象\"><a href=\"#3-PHP类和对象\" class=\"headerlink\" title=\"3. PHP类和对象\"></a>3. PHP类和对象</h2><hr>\n<h3 id=\"3-1-类和对象的定义\"><a href=\"#3-1-类和对象的定义\" class=\"headerlink\" title=\"3.1 类和对象的定义\"></a>3.1 类和对象的定义</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">//定义一个类</span><br><span class=\"line\">class Car &#123;</span><br><span class=\"line\">    public $name = &apos;汽车&apos;;      //默认</span><br><span class=\"line\">    static $color2 = &apos;白色&apos;;    //静态属性</span><br><span class=\"line\">    protected $corlor = &apos;黑色&apos;; //受保护的</span><br><span class=\"line\">    private $price = &apos;100000&apos;;  //私有</span><br><span class=\"line\">    function getName() &#123;</span><br><span class=\"line\">        return $this-&gt;name;     //伪变量调用当前对象的属性</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function getPrice() &#123;</span><br><span class=\"line\">        return $this-&gt;price;    //内部方法可以访问私有属性</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$car = new Car();       //实例化一个car对象</span><br><span class=\"line\">$car-&gt;name = &apos;奥迪A6&apos;;  //设置对象的属性值</span><br><span class=\"line\">echo $car-&gt;getName();   //调用对象的方法 输出对象的名字</span><br><span class=\"line\">echo Car::$color2;      //使用::类名+双冒号直接访问静态对象（不能用this）</span><br><span class=\"line\">//echo $car-&gt;color;     //错误 受保护的属性不允许外部调用</span><br><span class=\"line\">//echo $car-&gt;price;     //错误 私有属性不允许外部调用</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3-2-静态成员\"><a href=\"#3-2-静态成员\" class=\"headerlink\" title=\"3.2 静态成员\"></a>3.2 静态成员</h3><ul>\n<li>静态方法中，$this伪变量不允许使用。</li>\n<li>可以使用self，parent，static在内部调用静态方法与属性。</li>\n<li>使用::类名+双冒号直接访问静态对象<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">    private static $speed = 10;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static function getSpeed() &#123;</span><br><span class=\"line\">        return self::$speed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static function speedUp() &#123;</span><br><span class=\"line\">        return self::$speed+=10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class BigCar extends Car &#123;</span><br><span class=\"line\">    public static function start() &#123;</span><br><span class=\"line\">        parent::speedUp();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BigCar::start();</span><br><span class=\"line\">echo BigCar::getSpeed();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"3-3-受保护的方法的使用\"><a href=\"#3-3-受保护的方法的使用\" class=\"headerlink\" title=\"3.3 受保护的方法的使用\"></a>3.3 受保护的方法的使用</h3><p>例一：如果构造函数定义成了私有方法，则不允许直接实例化对象了，这时候一般通过静态方法进行实例化。(这样的方法可以控制对象的创建，只允许有一个全局唯一的对象。)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">    private function __construct() &#123;</span><br><span class=\"line\">        echo &apos;object create&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static $_object = null; //因为只在getInstance()里使用一次，且内容私密所以是private</span><br><span class=\"line\">    public static function getInstance() &#123;</span><br><span class=\"line\">        if (empty(self::$_object)) &#123;</span><br><span class=\"line\">            self::$_object = new Car(); //内部方法可以调用私有方法，因此这里可以创建对象；静态::</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return self::$_object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//$car = new Car();         //这里不允许直接实例化对象</span><br><span class=\"line\">$car = Car::getInstance();  //通过静态方法来获得一个实例</span><br></pre></td></tr></table></figure></p>\n<p>例二：<br><code>speedUp()</code>被保护，所以用同类内部的<code>start()</code>方法来调用<code>speedUp()</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">    private $speed = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function getSpeed() &#123;</span><br><span class=\"line\">        return $this-&gt;speed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    protected function speedUp() &#123;</span><br><span class=\"line\">        $this-&gt;speed += 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //增加start方法，使他能够调用受保护的方法speedUp实现加速10</span><br><span class=\"line\">    public function start()&#123;</span><br><span class=\"line\">       $this-&gt;speedUp();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$car = new Car();</span><br><span class=\"line\">$car-&gt;start();</span><br><span class=\"line\">echo $car-&gt;getSpeed();</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"3-4-构造函数\"><a href=\"#3-4-构造函数\" class=\"headerlink\" title=\"3.4 构造函数\"></a>3.4 构造函数</h3><p>具有构造函数的类，会在每次对象创建的时候调用该函数，因此常用来在对象创建的时候进行一些初始化工作。<br>例一：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">   function __construct() &#123;</span><br><span class=\"line\">       print &quot;构造函数被调用\\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$car = new Car(); //实例化的时候 会自动调用构造函数__construct，这里会输出一个字符串</span><br></pre></td></tr></table></figure></p>\n<p>例二：在子类中如果定义了<strong>construct则不会调用父类的</strong>construct，如果需要同时调用父类的构造函数，需要使用parent::__construct()显式的调用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">   function __construct() &#123;</span><br><span class=\"line\">       print &quot;父类构造函数被调用\\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Truck extends Car &#123;</span><br><span class=\"line\">   function __construct() &#123;</span><br><span class=\"line\">       print &quot;子类构造函数被调用\\n&quot;;</span><br><span class=\"line\">       parent::__construct();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$car = new Truck();</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"3-5-析构函数\"><a href=\"#3-5-析构函数\" class=\"headerlink\" title=\"3.5 析构函数\"></a>3.5 析构函数</h3><p>使用__destruct()进行定义，析构函数指的是当某个对象的所有引用被删除，或者对象被显式的销毁时会执行的函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">   function __construct() &#123;</span><br><span class=\"line\">       print &quot;构造函数被调用 \\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   function __destruct() &#123;</span><br><span class=\"line\">       print &quot;析构函数被调用 \\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$car = new Car(); //实例化时会调用构造函数</span><br><span class=\"line\">echo &apos;使用后，准备销毁car对象 \\n&apos;;</span><br><span class=\"line\">unset($car); //销毁时会调用析构函数</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"4-其他\"><a href=\"#4-其他\" class=\"headerlink\" title=\"4. 其他\"></a>4. 其他</h2><hr>\n<h3 id=\"4-1-Tips\"><a href=\"#4-1-Tips\" class=\"headerlink\" title=\"4.1 Tips\"></a>4.1 Tips</h3><h4 id=\"4-1-1-对象比较\"><a href=\"#4-1-1-对象比较\" class=\"headerlink\" title=\"4.1.1 对象比较\"></a>4.1.1 对象比较</h4><p>当同一个类的两个实例的所有属性都相等时，可以使用比较运算符==进行判断，当需要判断两个变量是否为同一个对象的引用时，可以使用全等运算符===进行判断。</p>\n<h4 id=\"4-1-2-命名空间的别名\"><a href=\"#4-1-2-命名空间的别名\" class=\"headerlink\" title=\"4.1.2 命名空间的别名\"></a>4.1.2 命名空间的别名</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use ****\\Response as Res;</span><br><span class=\"line\"></span><br><span class=\"line\">$r = new Res(&apos;Oops&apos;, 400);</span><br><span class=\"line\">$r-&gt;send();</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-1-3-全局命名空间\"><a href=\"#4-1-3-全局命名空间\" class=\"headerlink\" title=\"4.1.3 全局命名空间\"></a>4.1.3 全局命名空间</h4><p>如Exception类，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ex = new Exception();  //错，PHP会在当前命名空间中寻找exception类</span><br><span class=\"line\"></span><br><span class=\"line\">throw new \\Exception(); //对，\\告诉PHP在全局命名空间中寻找该类</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"4-2-list-语言结构\"><a href=\"#4-2-list-语言结构\" class=\"headerlink\" title=\"4.2 list()语言结构\"></a>4.2 <code>list()</code>语言结构</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">numbers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"string\">\"狗\"</span>,<span class=\"string\">\"猪\"</span>,<span class=\"string\">\"猫\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">list</span> ($a, $b, $c) = numbers();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"我们的宠物有一只$a,一只$b以及一只 $c\"</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"4-3-const-语言结构\"><a href=\"#4-3-const-语言结构\" class=\"headerlink\" title=\"4.3 const()语言结构\"></a>4.3 <code>const()</code>语言结构</h3><ul>\n<li>const用于类成员变量的定义，一经定义，不可修改。Define不可以用于类成员变量的定义，可用于全局常量。</li>\n<li><p>Const不能再条件语句中定义常量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (...)&#123;</span><br><span class=\"line\">    const FOO = &apos;BAR&apos;;    // 无效的invalid</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (...) &#123;</span><br><span class=\"line\">    define(&apos;FOO&apos;, &apos;BAR&apos;); // 有效的valid</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>const采用普通的常量名称，define可以采用表达式作为名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const  FOO = &apos;BAR&apos;;</span><br><span class=\"line\">for ($i = 0; $i &lt; 32; ++$i) &#123;</span><br><span class=\"line\">    define(&apos;BIT_&apos;.$i, 1 &lt;&lt; $i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>const只能接受静态的标量，而define可以采用任何表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const BIT_5 = 1 &lt;&lt; 5;    // 无效的invalid</span><br><span class=\"line\">define(&apos;BIT_5&apos;, 1 &lt;&lt; 5); // 有效的valid</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>const定义的常量时大小写敏感，而define可以通过第三个参数（为true表示大小写不敏感）来指定大小写是否敏感。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(&apos;FOO&apos;, &apos;BAR&apos;, true);</span><br><span class=\"line\">echo FOO; // BAR</span><br><span class=\"line\">echo foo; // BAR</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"4-4-可变函数\"><a href=\"#4-4-可变函数\" class=\"headerlink\" title=\"4.4 可变函数\"></a>4.4 可变函数</h3><ul>\n<li>所谓可变函数，即通过变量的值来调用函数，因为变量的值是可变的，所以可以通过改变一个变量的值来实现调用不同的函数。</li>\n<li>经常会用在回调函数、函数列表，或者根据动态参数来调用不同的函数。</li>\n<li>可变函数的调用方法为变量名加括号。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function func() &#123;</span><br><span class=\"line\">    echo &apos;my function called.&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$name = &apos;func&apos;;</span><br><span class=\"line\">//调用可变函数</span><br><span class=\"line\">$name();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"4-5-双冒号-作用域限定操作符的使用\"><a href=\"#4-5-双冒号-作用域限定操作符的使用\" class=\"headerlink\" title=\"4.5 双冒号::作用域限定操作符的使用\"></a>4.5 双冒号::作用域限定操作符的使用</h3><ul>\n<li><p>用变量在类定义外部访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Fruit &#123;</span><br><span class=\"line\">    const CONST_VALUE = &apos;Fruit Color&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$classname = &apos;Fruit&apos;;</span><br><span class=\"line\">echo $classname::CONST_VALUE; //使用变量代替类名</span><br><span class=\"line\">echo Fruit::CONST_VALUE;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在类定义外部使用（const）</p>\n</li>\n<li><p>子类调用父类类方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fruit</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">color</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"color\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showColor</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"show \"</span> . <span class=\"keyword\">self</span>::color();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">color</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Apple::showColor();<span class=\"comment\">// output is \"show color\"!</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重写的属性方法</p>\n</li>\n<li>静态<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Fruit &#123;</span><br><span class=\"line\">    const CONST_VALUE = &apos;Fruit Color&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Apple extends Fruit</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static $color = &apos;Red&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function doubleColon() &#123;</span><br><span class=\"line\">        echo parent::CONST_VALUE;</span><br><span class=\"line\">        echo self::$color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Apple::doubleColon();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"4-6-接口-例\"><a href=\"#4-6-接口-例\" class=\"headerlink\" title=\"4.6 接口-例\"></a>4.6 接口-例</h3><p><code>DocumentStore</code>类 实现从不同来源收集文本，下面是它的代码实现过程<br>接口在其中的作用就是给<code>HtmlDocument</code>和<code>StreamDocument</code>提供统一的实现方法<br>其他人只要知道如何实现接口，就可以完美使用、设计、拓展<code>DocumentStore</code>类</p>\n<h4 id=\"4-6-1-接口的定义\"><a href=\"#4-6-1-接口的定义\" class=\"headerlink\" title=\"4.6.1 接口的定义\"></a>4.6.1 接口的定义</h4><p>定义Documentable接口：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Documentable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function getId();</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function getContent();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//该定义表明：实现Documentable接口的任何对象都必须提供一个公开的getId()和getContent()</span><br><span class=\"line\">//作用：可以定义多个不同的实现方式</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-6-2-接口的代码实现\"><a href=\"#4-6-2-接口的代码实现\" class=\"headerlink\" title=\"4.6.2 接口的代码实现\"></a>4.6.2 接口的代码实现</h4><p>定义HtmlDocument类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HtmlDocument implements Documentable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $url;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function __construct($url)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;url = $url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function getId()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $this-&gt;url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function getContent();</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //balabala</span><br><span class=\"line\">        </span><br><span class=\"line\">        return $html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>定义StreamDocument类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HtmlDocument implements Documentable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $balabala;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function __construct($url)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //balabala</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function getId()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //balabala</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function getContent();</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //balabala</span><br><span class=\"line\">        </span><br><span class=\"line\">        return $streamContent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-6-3-将多个同一接口的实现方法进行整合\"><a href=\"#4-6-3-将多个同一接口的实现方法进行整合\" class=\"headerlink\" title=\"4.6.3 将多个同一接口的实现方法进行整合\"></a>4.6.3 将多个同一接口的实现方法进行整合</h4><p>定义文档存储类<code>DocumentStore</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DocumentStore</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $data = [];//用于存储的数组</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function addDocument(Documentable $document)//存入文档</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //传入实现方法对象，调用其统一的方法</span><br><span class=\"line\">        $key = $document-&gt;getId();          //键</span><br><span class=\"line\">        $value = $document-&gt;getContent();   //值</span><br><span class=\"line\">        $this-&gt;data[$key] = $value;         //保存</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function getDocuments()//取出文档</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $this-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-6-4-如何使用DocumentStore类\"><a href=\"#4-6-4-如何使用DocumentStore类\" class=\"headerlink\" title=\"4.6.4 如何使用DocumentStore类\"></a>4.6.4 如何使用<code>DocumentStore</code>类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">//创建文档存储对象</span><br><span class=\"line\">$documentStore = new DocumentStore();</span><br><span class=\"line\"></span><br><span class=\"line\">//添加HTML文档</span><br><span class=\"line\">$htmlDoc = new HtmlDocument(&apos;https://php.net&apos;);</span><br><span class=\"line\">$documentStore-&gt;addDocument($htmlDoc);</span><br><span class=\"line\"></span><br><span class=\"line\">//添加流文档</span><br><span class=\"line\">streamDoc = new StreamDocument(fopen(&apos;stream.txt&apos;, &apos;rb&apos;));//使用不一样的方法对象</span><br><span class=\"line\">$documentStore-&gt;addDocument($htmlDoc);//一样的调用代码</span><br><span class=\"line\"></span><br><span class=\"line\">print_r($documentStore-&gt;getDocuments());//输出看看</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"1-常用函数\"><a href=\"#1-常用函数\" class=\"headerlink\" title=\"1. 常用函数\"></a>1. 常用函数</h2><hr>\n<h3 id=\"1-1-函数定义与使用\"><a href=\"#1-1-函数定义与使用\" class=\"headerlink\" title=\"1.1 函数定义与使用\"></a>1.1 函数定义与使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum($a, $b) &#123;</span><br><span class=\"line\">    echo $a + $b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(1,2);</span><br></pre></td></tr></table></figure>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><h3 id=\"1-2-维度打击函数\"><a href=\"#1-2-维度打击函数\" class=\"headerlink\" title=\"1.2 维度打击函数\"></a>1.2 维度打击函数</h3><p>serialize方法将对象序列化为字符串，用于存储或者传递数据，然后在需要的时候通过unserialize将字符串反序列化成对象进行使用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">    public $name = &apos;car&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$a = new Car();</span><br><span class=\"line\">$str = serialize($a); //对象序列化成字符串</span><br><span class=\"line\">echo $str.&apos;&lt;br&gt;&apos;;</span><br><span class=\"line\">$b = unserialize($str); //反序列化为对象</span><br><span class=\"line\">var_dump($b);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"1-3-clone-复制对象\"><a href=\"#1-3-clone-复制对象\" class=\"headerlink\" title=\"1.3 clone()复制对象\"></a>1.3 <code>clone()</code>复制对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">    public $name = &apos;car&apos;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function __clone() &#123;</span><br><span class=\"line\">        $obj = new Car();</span><br><span class=\"line\">        $obj-&gt;name = $this-&gt;name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$a = new Car();</span><br><span class=\"line\">$a-&gt;name = &apos;new car&apos;;</span><br><span class=\"line\">$b = clone $a;</span><br><span class=\"line\">var_dump($b);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"1-4-isset-检测变量是否设置（null）\"><a href=\"#1-4-isset-检测变量是否设置（null）\" class=\"headerlink\" title=\"1.4 isset() 检测变量是否设置（null）\"></a>1.4 <code>isset()</code> 检测变量是否设置（null）</h3><p>PHP和C类似，0 “0” false “” 都以0保存，当然它们的类型不同。===下可区别。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(isset($arr0))</span><br><span class=\"line\">    print_r($arr0);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"1-5-输出\"><a href=\"#1-5-输出\" class=\"headerlink\" title=\"1.5 输出\"></a>1.5 输出</h3><p><code>var_dump()</code> 打印类型<br><code>print_r()</code> 打印复合类型 如数组 对象<br><code>print()</code> 输出字符串<br><code>echo()</code> 普通输出，不能输出数组</p>\n<hr>\n<h3 id=\"1-6-foreach-遍历\"><a href=\"#1-6-foreach-遍历\" class=\"headerlink\" title=\"1.6 foreach() 遍历\"></a>1.6 <code>foreach()</code> 遍历</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$students = <span class=\"keyword\">array</span>(</span><br><span class=\"line\"><span class=\"string\">'2010'</span>=&gt;<span class=\"string\">'令狐冲'</span>,</span><br><span class=\"line\"><span class=\"string\">'2011'</span>=&gt;<span class=\"string\">'林平之'</span>,</span><br><span class=\"line\"><span class=\"string\">'2012'</span>=&gt;<span class=\"string\">'曲洋'</span>,</span><br><span class=\"line\"><span class=\"string\">'2013'</span>=&gt;<span class=\"string\">'任盈盈'</span>,</span><br><span class=\"line\"><span class=\"string\">'2014'</span>=&gt;<span class=\"string\">'向问天'</span>,</span><br><span class=\"line\"><span class=\"string\">'2015'</span>=&gt;<span class=\"string\">'任我行'</span>,</span><br><span class=\"line\"><span class=\"string\">'2016'</span>=&gt;<span class=\"string\">'冲虚'</span>,</span><br><span class=\"line\"><span class=\"string\">'2017'</span>=&gt;<span class=\"string\">'方正'</span>,</span><br><span class=\"line\"><span class=\"string\">'2018'</span>=&gt;<span class=\"string\">'岳不群'</span>,</span><br><span class=\"line\"><span class=\"string\">'2019'</span>=&gt;<span class=\"string\">'宁中则'</span>,</span><br><span class=\"line\">);<span class=\"comment\">//10个学生的学号和姓名，用数组存储</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用循环结构遍历数组,获取学号和姓名  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($students <span class=\"keyword\">as</span> $v)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v;<span class=\"comment\">//输出 姓名</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($students <span class=\"keyword\">as</span> $key =&gt;$v)&#123; </span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $key.<span class=\"string\">\":\"</span>.$v;<span class=\"comment\">//输出 学号：姓名</span></span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br /&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"1-7-字符串函数\"><a href=\"#1-7-字符串函数\" class=\"headerlink\" title=\"1.7 字符串函数\"></a>1.7 字符串函数</h3><p><code>str_replace(find,replace,string,count)</code>替换<br>find    必需。规定要查找的值。<br>replace    必需。规定替换 find 中的值的值。<br>string    必需。规定被搜索的字符串。<br>count    可选。一个变量，对替换数进行计数。</p>\n<p><code>trim()</code>去两端空格<br>rtrim去右边空格，ltrim去左边空格。</p>\n<p><code>strlen()</code> <code>mb_strlen(str,lang)</code>尺子<br>strlen是英文尺子，mb是其他尺子。<br>lang是编码格式，utf-8即 “utf8” 。</p>\n<p><code>substr(str,start,length)</code> <code>mb_substr(str,start,length,lang)</code>截肢<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$str=&apos;i love you&apos;;//截取love这几个字母</span><br><span class=\"line\">echo substr($str, 2, 4);//为什么开始位置是2呢，因为substr函数计算字符串位置是从0开始的，也就是0的位置是i,1的位置是空格，l的位置是2。从位置2开始取4个字符，就是love。</span><br><span class=\"line\"></span><br><span class=\"line\">$str=&apos;我爱你，中国&apos;;//截取中国两个字</span><br><span class=\"line\">echo mb_substr($str,4,2,&apos;utf8&apos;);//为什么开始位置是4呢，和上一个例子一样，因为mb_substr函数计算汉字位置是从0开始的，也就是0的位置是我,1的位置是爱，4的位置是中。从位置4开始取2个汉字，就是中国。中文编码一般是utf8格式</span><br></pre></td></tr></table></figure></p>\n<p><code>strpos(字典,字,start[可选])</code>查找定位</p>\n<p><code>sprintf(&#39;%01.2f&#39;, $str);</code>格式化字符串<br>%   开始<br>0   位数不足时用0填充<br>1   最短位数为1(含小数点)，不足用填充位填补<br>.   小数点<br>2   小数点后保留两位<br>f   float</p>\n<p><code>implode()</code> <code>explode()</code>字符串数组分割转换<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$str = &apos;apple,banana&apos;;</span><br><span class=\"line\">print_r(explode(&apos;,&apos;, $str));//结果显示array(&apos;apple&apos;,&apos;banana&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = array(&apos;Hello&apos;, &apos;World!&apos;);</span><br><span class=\"line\">print_r(implode(&apos;&apos;, $arr));//结果显示Hello World!</span><br></pre></td></tr></table></figure></p>\n<p><code>addslashes()</code>转义<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$str = &quot;what&apos;s your name?&quot;;</span><br><span class=\"line\">echo addslashes($str);//输出：what\\&apos;s your name?</span><br></pre></td></tr></table></figure></p>\n<p><code>preg_match()</code>正则<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$p = &apos;/apple/&apos;;</span><br><span class=\"line\">$str = &quot;apple banna&quot;;</span><br><span class=\"line\">if (preg_match($p, $str)) &#123;</span><br><span class=\"line\">    echo &apos;matched&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a><br></h2><h3 id=\"1-7-exists类\"><a href=\"#1-7-exists类\" class=\"headerlink\" title=\"1.7 exists类\"></a>1.7 <code>exists</code>类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function func() &#123;</span><br><span class=\"line\">    echo &apos;exists&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$name = &apos;func&apos;;</span><br><span class=\"line\">if (function_exists(&apos;func&apos;) ) &#123;//判断函数是否存在</span><br><span class=\"line\">    $name();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyClass&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (class_exists(&apos;MyClass&apos;)) &#123;// 使用前检查类是否存在</span><br><span class=\"line\">    $myclass = new MyClass();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$filename = &apos;test.txt&apos;;</span><br><span class=\"line\">if (!file_exists($filename)) &#123;</span><br><span class=\"line\">    echo $filename . &apos; not exists.&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"2-Array数组\"><a href=\"#2-Array数组\" class=\"headerlink\" title=\"2. Array数组\"></a>2. Array数组</h2><hr>\n<h3 id=\"2-1-定义及初始化\"><a href=\"#2-1-定义及初始化\" class=\"headerlink\" title=\"2.1 定义及初始化\"></a>2.1 定义及初始化</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">$fruit = <span class=\"keyword\">array</span>(<span class=\"string\">\"苹果\"</span>,<span class=\"string\">\"香蕉\"</span>,<span class=\"string\">\"菠萝\"</span>);</span><br><span class=\"line\">print_r($fruit);<span class=\"comment\">//输出的是人能看懂的数组结构</span></span><br><span class=\"line\"></span><br><span class=\"line\">$arr[<span class=\"number\">0</span>]=<span class=\"string\">'苹果'</span>;<span class=\"comment\">//赋值方法1</span></span><br><span class=\"line\"></span><br><span class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">'0'</span>=&gt;<span class=\"string\">'苹果'</span>);<span class=\"comment\">//方法2 左键右值</span></span><br><span class=\"line\"></span><br><span class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">'苹果'</span>,<span class=\"string\">'55'</span>);<span class=\"comment\">//方法3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">$this</span>-&gt;tags <span class=\"keyword\">as</span> $tag)</span><br><span class=\"line\">    $ids[] = <span class=\"keyword\">$this</span>-&gt;_saveTag($tag);<span class=\"comment\">//方法4 连续赋值，键值会自增</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"2-2-数组的分类\"><a href=\"#2-2-数组的分类\" class=\"headerlink\" title=\"2.2 数组的分类\"></a>2.2 数组的分类</h3><ul>\n<li><p>索引数组 - 带有数字索引的数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = array(0=&gt;&apos;苹果&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关联数组 - 带有指定键的数组(使用字符串为键名)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = array(&apos;0&apos;=&gt;&apos;苹果&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多维数组 - 包含一个或多个数组的数组</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-3-访问数组内容\"><a href=\"#2-3-访问数组内容\" class=\"headerlink\" title=\"2.3 访问数组内容\"></a>2.3 访问数组内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr0 = $arr[&apos;0&apos;];//或$arr[0]即索引数组</span><br><span class=\"line\"></span><br><span class=\"line\">foreach($fruit as $k=&gt;$v)&#123;</span><br><span class=\"line\">    echo &quot;数组中的第$i个值为$fruit[$i]&quot;;//必须用双引号</span><br><span class=\"line\">    echo &quot;数组中的第&quot;.$i.&quot;个值为&quot;.$fruit[$i];//或者用连接符</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"3-PHP类和对象\"><a href=\"#3-PHP类和对象\" class=\"headerlink\" title=\"3. PHP类和对象\"></a>3. PHP类和对象</h2><hr>\n<h3 id=\"3-1-类和对象的定义\"><a href=\"#3-1-类和对象的定义\" class=\"headerlink\" title=\"3.1 类和对象的定义\"></a>3.1 类和对象的定义</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">//定义一个类</span><br><span class=\"line\">class Car &#123;</span><br><span class=\"line\">    public $name = &apos;汽车&apos;;      //默认</span><br><span class=\"line\">    static $color2 = &apos;白色&apos;;    //静态属性</span><br><span class=\"line\">    protected $corlor = &apos;黑色&apos;; //受保护的</span><br><span class=\"line\">    private $price = &apos;100000&apos;;  //私有</span><br><span class=\"line\">    function getName() &#123;</span><br><span class=\"line\">        return $this-&gt;name;     //伪变量调用当前对象的属性</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function getPrice() &#123;</span><br><span class=\"line\">        return $this-&gt;price;    //内部方法可以访问私有属性</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$car = new Car();       //实例化一个car对象</span><br><span class=\"line\">$car-&gt;name = &apos;奥迪A6&apos;;  //设置对象的属性值</span><br><span class=\"line\">echo $car-&gt;getName();   //调用对象的方法 输出对象的名字</span><br><span class=\"line\">echo Car::$color2;      //使用::类名+双冒号直接访问静态对象（不能用this）</span><br><span class=\"line\">//echo $car-&gt;color;     //错误 受保护的属性不允许外部调用</span><br><span class=\"line\">//echo $car-&gt;price;     //错误 私有属性不允许外部调用</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3-2-静态成员\"><a href=\"#3-2-静态成员\" class=\"headerlink\" title=\"3.2 静态成员\"></a>3.2 静态成员</h3><ul>\n<li>静态方法中，$this伪变量不允许使用。</li>\n<li>可以使用self，parent，static在内部调用静态方法与属性。</li>\n<li>使用::类名+双冒号直接访问静态对象<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">    private static $speed = 10;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static function getSpeed() &#123;</span><br><span class=\"line\">        return self::$speed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static function speedUp() &#123;</span><br><span class=\"line\">        return self::$speed+=10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class BigCar extends Car &#123;</span><br><span class=\"line\">    public static function start() &#123;</span><br><span class=\"line\">        parent::speedUp();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BigCar::start();</span><br><span class=\"line\">echo BigCar::getSpeed();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"3-3-受保护的方法的使用\"><a href=\"#3-3-受保护的方法的使用\" class=\"headerlink\" title=\"3.3 受保护的方法的使用\"></a>3.3 受保护的方法的使用</h3><p>例一：如果构造函数定义成了私有方法，则不允许直接实例化对象了，这时候一般通过静态方法进行实例化。(这样的方法可以控制对象的创建，只允许有一个全局唯一的对象。)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">    private function __construct() &#123;</span><br><span class=\"line\">        echo &apos;object create&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static $_object = null; //因为只在getInstance()里使用一次，且内容私密所以是private</span><br><span class=\"line\">    public static function getInstance() &#123;</span><br><span class=\"line\">        if (empty(self::$_object)) &#123;</span><br><span class=\"line\">            self::$_object = new Car(); //内部方法可以调用私有方法，因此这里可以创建对象；静态::</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return self::$_object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//$car = new Car();         //这里不允许直接实例化对象</span><br><span class=\"line\">$car = Car::getInstance();  //通过静态方法来获得一个实例</span><br></pre></td></tr></table></figure></p>\n<p>例二：<br><code>speedUp()</code>被保护，所以用同类内部的<code>start()</code>方法来调用<code>speedUp()</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">    private $speed = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function getSpeed() &#123;</span><br><span class=\"line\">        return $this-&gt;speed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    protected function speedUp() &#123;</span><br><span class=\"line\">        $this-&gt;speed += 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //增加start方法，使他能够调用受保护的方法speedUp实现加速10</span><br><span class=\"line\">    public function start()&#123;</span><br><span class=\"line\">       $this-&gt;speedUp();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$car = new Car();</span><br><span class=\"line\">$car-&gt;start();</span><br><span class=\"line\">echo $car-&gt;getSpeed();</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"3-4-构造函数\"><a href=\"#3-4-构造函数\" class=\"headerlink\" title=\"3.4 构造函数\"></a>3.4 构造函数</h3><p>具有构造函数的类，会在每次对象创建的时候调用该函数，因此常用来在对象创建的时候进行一些初始化工作。<br>例一：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">   function __construct() &#123;</span><br><span class=\"line\">       print &quot;构造函数被调用\\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$car = new Car(); //实例化的时候 会自动调用构造函数__construct，这里会输出一个字符串</span><br></pre></td></tr></table></figure></p>\n<p>例二：在子类中如果定义了<strong>construct则不会调用父类的</strong>construct，如果需要同时调用父类的构造函数，需要使用parent::__construct()显式的调用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">   function __construct() &#123;</span><br><span class=\"line\">       print &quot;父类构造函数被调用\\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Truck extends Car &#123;</span><br><span class=\"line\">   function __construct() &#123;</span><br><span class=\"line\">       print &quot;子类构造函数被调用\\n&quot;;</span><br><span class=\"line\">       parent::__construct();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$car = new Truck();</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"3-5-析构函数\"><a href=\"#3-5-析构函数\" class=\"headerlink\" title=\"3.5 析构函数\"></a>3.5 析构函数</h3><p>使用__destruct()进行定义，析构函数指的是当某个对象的所有引用被删除，或者对象被显式的销毁时会执行的函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car &#123;</span><br><span class=\"line\">   function __construct() &#123;</span><br><span class=\"line\">       print &quot;构造函数被调用 \\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   function __destruct() &#123;</span><br><span class=\"line\">       print &quot;析构函数被调用 \\n&quot;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$car = new Car(); //实例化时会调用构造函数</span><br><span class=\"line\">echo &apos;使用后，准备销毁car对象 \\n&apos;;</span><br><span class=\"line\">unset($car); //销毁时会调用析构函数</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"4-其他\"><a href=\"#4-其他\" class=\"headerlink\" title=\"4. 其他\"></a>4. 其他</h2><hr>\n<h3 id=\"4-1-Tips\"><a href=\"#4-1-Tips\" class=\"headerlink\" title=\"4.1 Tips\"></a>4.1 Tips</h3><h4 id=\"4-1-1-对象比较\"><a href=\"#4-1-1-对象比较\" class=\"headerlink\" title=\"4.1.1 对象比较\"></a>4.1.1 对象比较</h4><p>当同一个类的两个实例的所有属性都相等时，可以使用比较运算符==进行判断，当需要判断两个变量是否为同一个对象的引用时，可以使用全等运算符===进行判断。</p>\n<h4 id=\"4-1-2-命名空间的别名\"><a href=\"#4-1-2-命名空间的别名\" class=\"headerlink\" title=\"4.1.2 命名空间的别名\"></a>4.1.2 命名空间的别名</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use ****\\Response as Res;</span><br><span class=\"line\"></span><br><span class=\"line\">$r = new Res(&apos;Oops&apos;, 400);</span><br><span class=\"line\">$r-&gt;send();</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-1-3-全局命名空间\"><a href=\"#4-1-3-全局命名空间\" class=\"headerlink\" title=\"4.1.3 全局命名空间\"></a>4.1.3 全局命名空间</h4><p>如Exception类，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ex = new Exception();  //错，PHP会在当前命名空间中寻找exception类</span><br><span class=\"line\"></span><br><span class=\"line\">throw new \\Exception(); //对，\\告诉PHP在全局命名空间中寻找该类</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"4-2-list-语言结构\"><a href=\"#4-2-list-语言结构\" class=\"headerlink\" title=\"4.2 list()语言结构\"></a>4.2 <code>list()</code>语言结构</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">numbers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"string\">\"狗\"</span>,<span class=\"string\">\"猪\"</span>,<span class=\"string\">\"猫\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">list</span> ($a, $b, $c) = numbers();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"我们的宠物有一只$a,一只$b以及一只 $c\"</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"4-3-const-语言结构\"><a href=\"#4-3-const-语言结构\" class=\"headerlink\" title=\"4.3 const()语言结构\"></a>4.3 <code>const()</code>语言结构</h3><ul>\n<li>const用于类成员变量的定义，一经定义，不可修改。Define不可以用于类成员变量的定义，可用于全局常量。</li>\n<li><p>Const不能再条件语句中定义常量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (...)&#123;</span><br><span class=\"line\">    const FOO = &apos;BAR&apos;;    // 无效的invalid</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (...) &#123;</span><br><span class=\"line\">    define(&apos;FOO&apos;, &apos;BAR&apos;); // 有效的valid</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>const采用普通的常量名称，define可以采用表达式作为名称</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const  FOO = &apos;BAR&apos;;</span><br><span class=\"line\">for ($i = 0; $i &lt; 32; ++$i) &#123;</span><br><span class=\"line\">    define(&apos;BIT_&apos;.$i, 1 &lt;&lt; $i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>const只能接受静态的标量，而define可以采用任何表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const BIT_5 = 1 &lt;&lt; 5;    // 无效的invalid</span><br><span class=\"line\">define(&apos;BIT_5&apos;, 1 &lt;&lt; 5); // 有效的valid</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>const定义的常量时大小写敏感，而define可以通过第三个参数（为true表示大小写不敏感）来指定大小写是否敏感。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(&apos;FOO&apos;, &apos;BAR&apos;, true);</span><br><span class=\"line\">echo FOO; // BAR</span><br><span class=\"line\">echo foo; // BAR</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"4-4-可变函数\"><a href=\"#4-4-可变函数\" class=\"headerlink\" title=\"4.4 可变函数\"></a>4.4 可变函数</h3><ul>\n<li>所谓可变函数，即通过变量的值来调用函数，因为变量的值是可变的，所以可以通过改变一个变量的值来实现调用不同的函数。</li>\n<li>经常会用在回调函数、函数列表，或者根据动态参数来调用不同的函数。</li>\n<li>可变函数的调用方法为变量名加括号。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function func() &#123;</span><br><span class=\"line\">    echo &apos;my function called.&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$name = &apos;func&apos;;</span><br><span class=\"line\">//调用可变函数</span><br><span class=\"line\">$name();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"4-5-双冒号-作用域限定操作符的使用\"><a href=\"#4-5-双冒号-作用域限定操作符的使用\" class=\"headerlink\" title=\"4.5 双冒号::作用域限定操作符的使用\"></a>4.5 双冒号::作用域限定操作符的使用</h3><ul>\n<li><p>用变量在类定义外部访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Fruit &#123;</span><br><span class=\"line\">    const CONST_VALUE = &apos;Fruit Color&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$classname = &apos;Fruit&apos;;</span><br><span class=\"line\">echo $classname::CONST_VALUE; //使用变量代替类名</span><br><span class=\"line\">echo Fruit::CONST_VALUE;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在类定义外部使用（const）</p>\n</li>\n<li><p>子类调用父类类方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fruit</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">color</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"color\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showColor</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"show \"</span> . <span class=\"keyword\">self</span>::color();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">color</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Apple::showColor();<span class=\"comment\">// output is \"show color\"!</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重写的属性方法</p>\n</li>\n<li>静态<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Fruit &#123;</span><br><span class=\"line\">    const CONST_VALUE = &apos;Fruit Color&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Apple extends Fruit</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static $color = &apos;Red&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static function doubleColon() &#123;</span><br><span class=\"line\">        echo parent::CONST_VALUE;</span><br><span class=\"line\">        echo self::$color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Apple::doubleColon();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"4-6-接口-例\"><a href=\"#4-6-接口-例\" class=\"headerlink\" title=\"4.6 接口-例\"></a>4.6 接口-例</h3><p><code>DocumentStore</code>类 实现从不同来源收集文本，下面是它的代码实现过程<br>接口在其中的作用就是给<code>HtmlDocument</code>和<code>StreamDocument</code>提供统一的实现方法<br>其他人只要知道如何实现接口，就可以完美使用、设计、拓展<code>DocumentStore</code>类</p>\n<h4 id=\"4-6-1-接口的定义\"><a href=\"#4-6-1-接口的定义\" class=\"headerlink\" title=\"4.6.1 接口的定义\"></a>4.6.1 接口的定义</h4><p>定义Documentable接口：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Documentable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function getId();</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function getContent();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//该定义表明：实现Documentable接口的任何对象都必须提供一个公开的getId()和getContent()</span><br><span class=\"line\">//作用：可以定义多个不同的实现方式</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-6-2-接口的代码实现\"><a href=\"#4-6-2-接口的代码实现\" class=\"headerlink\" title=\"4.6.2 接口的代码实现\"></a>4.6.2 接口的代码实现</h4><p>定义HtmlDocument类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HtmlDocument implements Documentable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $url;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function __construct($url)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;url = $url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function getId()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $this-&gt;url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function getContent();</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //balabala</span><br><span class=\"line\">        </span><br><span class=\"line\">        return $html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>定义StreamDocument类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class HtmlDocument implements Documentable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $balabala;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function __construct($url)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //balabala</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function getId()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //balabala</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function getContent();</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //balabala</span><br><span class=\"line\">        </span><br><span class=\"line\">        return $streamContent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-6-3-将多个同一接口的实现方法进行整合\"><a href=\"#4-6-3-将多个同一接口的实现方法进行整合\" class=\"headerlink\" title=\"4.6.3 将多个同一接口的实现方法进行整合\"></a>4.6.3 将多个同一接口的实现方法进行整合</h4><p>定义文档存储类<code>DocumentStore</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DocumentStore</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected $data = [];//用于存储的数组</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function addDocument(Documentable $document)//存入文档</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //传入实现方法对象，调用其统一的方法</span><br><span class=\"line\">        $key = $document-&gt;getId();          //键</span><br><span class=\"line\">        $value = $document-&gt;getContent();   //值</span><br><span class=\"line\">        $this-&gt;data[$key] = $value;         //保存</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function getDocuments()//取出文档</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $this-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-6-4-如何使用DocumentStore类\"><a href=\"#4-6-4-如何使用DocumentStore类\" class=\"headerlink\" title=\"4.6.4 如何使用DocumentStore类\"></a>4.6.4 如何使用<code>DocumentStore</code>类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">//创建文档存储对象</span><br><span class=\"line\">$documentStore = new DocumentStore();</span><br><span class=\"line\"></span><br><span class=\"line\">//添加HTML文档</span><br><span class=\"line\">$htmlDoc = new HtmlDocument(&apos;https://php.net&apos;);</span><br><span class=\"line\">$documentStore-&gt;addDocument($htmlDoc);</span><br><span class=\"line\"></span><br><span class=\"line\">//添加流文档</span><br><span class=\"line\">streamDoc = new StreamDocument(fopen(&apos;stream.txt&apos;, &apos;rb&apos;));//使用不一样的方法对象</span><br><span class=\"line\">$documentStore-&gt;addDocument($htmlDoc);//一样的调用代码</span><br><span class=\"line\"></span><br><span class=\"line\">print_r($documentStore-&gt;getDocuments());//输出看看</span><br></pre></td></tr></table></figure>"},{"title":"React","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n## 1. 基础\n### 1.1 库\n<!-- more -->\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script type=\"text/babel\">\n      // ** Our code goes here! **\n    </script>\n  </body>\n</html>\n```\n其次，上面代码一共用了三个库： `react.js` 、`react-dom.js` 和 `Browser.js`，它们必须首先加载。其中，`react.js` 是 React 的核心库，`react-dom.js` 是提供与 DOM 相关的功能，`Browser.js` 的作用是将 JSX 语法转为 JavaScript 语法，这一步很消耗时间，实际上线的时候，应该将它放到服务器完成。\n\n> babel src --out-dir build\n\n上面命令可以将 src 子目录的 js 文件进行语法转换，转码后的文件全部放在 build 子目录。\n### 1.2 ReactDOM.render\nReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。\n```\nReactDOM.render(\n  <h1>Hello, world!</h1>,\n  document.getElementById('example')\n);\n```\n上面代码将一个 h1 标题，插入 example 节点。\n\n---\n## 2. JSX\nJSX 的基本语法规则：遇到 HTML 标签（以 < 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析\n```\nvar names = ['Alice', 'Emily', 'Kate'];\n\nReactDOM.render(\n  <div>\n  {\n    names.map(function (name) {\n      return <div>Hello, {name}!</div>\n    })\n  }\n  </div>,\n  document.getElementById('example')\n);\n```\n![][1]\n\narr变量是一个数组，结果 JSX 会把它的所有成员，添加到模板\n```\nvar arr = [\n  <h1>Hello world!</h1>,\n  <h2>React is awesome</h2>,\n];\nReactDOM.render(\n  <div>{arr}</div>,\n  document.getElementById('example')\n);\n```\n---\n## 3. 组件\n- React 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。\n\n- React.createClass 方法就用于生成一个组件类。\n```\nvar HelloMessage = React.createClass({\n  render: function() {\n    return <h1>Hello {this.props.name}</h1>;\n  }\n});\n\nReactDOM.render(\n  <HelloMessage name=\"John\" />,\n  document.getElementById('example')\n);\n```\n- 上面代码中，变量 `HelloMessage` 就是一个组件类。模板插入 `<HelloMessage />` 时，会自动生成 `HelloMessage` 的一个实例（下文的\"组件\"都指组件类的实例）。所有组件类都必须有自己的 `render` 方法，用于输出组件。\n\n- 注意，**组件类**的**第一个字母必须大写**，否则会报错，比如`HelloMessage`不能写成`helloMessage`。另外，组件类只能包含一个顶层标签，否则也会报错。\n\n- 组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 `<HelloMessage name=\"John\">` ，就是 `HelloMessage` 组件加入一个 `name` 属性，值为 `John`。\n\n- 组件的属性可以在组件类的 `this.props` 对象上获取，比如 `name` 属性就可以通过 `this.props.name` 读取\n\n- 添加组件属性， `class` 属性需要写成 `className` ，`for` 属性需要写成 `htmlFor`，因为是关键字\n\n---\n## 4. this.props.children\n`this.props` 对象的属性与组件的属性一一对应，但是有一个例外，就是 `this.props.children` 属性。它表示组件的所有子节点。\n```\nvar NotesList = React.createClass({\n  render: function() {\n    return (\n      <ol>\n      {\n        React.Children.map(this.props.children, function (child) {\n          return <li>{child}</li>;\n        })\n      }\n      </ol>\n    );\n  }\n});\n\nReactDOM.render(\n  <NotesList>\n    <span>hello</span>\n    <span>world</span>\n  </NotesList>,\n  document.body\n);\n```\n上面代码的 `NoteList` 组件有两个 `span` 子节点，它们都可以通过 `this.props.children` 读取，运行结果如下。\n![][2]\n\n- 这里需要注意， `this.props.children`的值有三种可能：\n  - 如果当前组件没有子节点，它就是 `undefined`;\n  - 如果有一个子节点，数据类型是 `object`；\n  - 如果有多个子节点，数据类型就是 `array` 。所以，处理 this.props.children 的时候要小心。\n  - React 提供一个工具方法 [`React.Children`][3] 来处理`this.props.children` 。我们可以用 `React.Children.map` 来遍历子节点，而不用担心 `this.props.children` 的数据类型是 `undefined` 还是 `object`。\n\n---\n## 5. PropTypes\n组件的属性可以接受任意值，字符串、对象、函数等等都可以。有时，我们需要一种机制，**验证**别人使用组件时，**提供的参数是否符合要求**。\n\n组件类的`PropTypes`属性，就是用来验证组件实例的属性是否符合要求\n```\nvar data = 123;\n\nvar MyTitle = React.createClass({\n  propTypes: {\n    title: React.PropTypes.string.isRequired,\n  },\n  render: function() {\n     return <h1> {this.props.title} </h1>;\n   }\n});\n\nReactDOM.render(\n  <MyTitle title={data} />,\n  document.body\n);\n```\n上面的`Mytitle`组件有一个`title`属性。`PropTypes` 告诉 React，这个 `title` 属性是必须的，而且它的值必须是字符串。现在，我们设置 `title` 属性的值是一个数值。\n这样一来，`title`属性就通不过验证了。控制台会显示一行错误信息。\n> Warning: Failed propType: Invalid prop `title` of type `number` supplied to `MyTitle`, expected `string`.\n\n### 5.2 设置默认参数\n`getDefaultProps` 方法可以用来设置组件属性的默认值。\n```\nvar MyTitle = React.createClass({\n  getDefaultProps : function () {\n    return {\n      title : 'Hello World'\n    };\n  },\n\n  render: function() {\n     return <h1> {this.props.title} </h1>;\n   }\n});\n\nReactDOM.render(\n  <MyTitle />,\n  document.body\n);\n```\n> 上面代码会输出\"Hello World\"。\n\n---\n## 6. 获取真实的DOM节点\n有时需要从组件获取真实 DOM 的节点，这时就要用到 `ref` 属性\n```\nvar MyComponent = React.createClass({\n  handleClick: function() {\n    this.refs.myTextInput.focus();\n  },\n  render: function() {\n    return (\n      <div>\n        <input type=\"text\" ref=\"myTextInput\" />\n        <input type=\"button\" value=\"Focus the text input\" onClick={this.handleClick} />\n      </div>\n    );\n  }\n});\n\nReactDOM.render(\n  <MyComponent />,\n  document.getElementById('example')\n);\n```\n上面代码中，组件 `MyComponent` 的子节点有一个文本输入框， 用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。为了做到这一点，文本输入框必须有一个 `ref` 属性，然后 `this.refs.[refName]` 就会返回这个真实的 DOM 节点。\n需要注意的是，由于 `this.refs.[refName]` 属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。 上面代码中，通过为组件指定 `Click` 事件的回调函数，确保了只有等到真实 DOM 发生 `Click` 事件之后，才会读取 `this.refs.[refName]` 属性。\n\nReact 组件支持很多事件，除了 `Click` 事件以外，还有 `KeyDown` 、`Copy`、`Scroll` 等，完整的事件清单请查看[官方文档][4]。\n\n---\n## 7. this.state\n组件免不了要与用户互动，React的一大创新，就是将组件看成是一个状态机，一开始有一个**初始状态**，然后用户互动，导致状态变化，从而触发重新渲染 UI\n### 7.1 LikeButton\n```\nvar LikeButton = React.createClass({\n  getInitialState: function() {\n    return {liked: false};\n  },\n  handleClick: function(event) {\n    this.setState({liked: !this.state.liked});\n  },\n  render: function() {\n    var text = this.state.liked ? 'like' : 'haven\\'t liked';\n    return (\n      <p onClick={this.handleClick}>\n        You {text} this. Click to toggle.\n      </p>\n    );\n  }\n});\n\nReactDOM.render(\n  <LikeButton />,\n  document.getElementById('example')\n);\n```\n上面代码是一个 `LikeButton` 组件，它的 `getInitialState` 方法用于定义初始状态，也就是一个对象，这个对象可以通过 `this.state` 属性读取。当用户点击组件，导致状态变化，`this.setState` 方法就修改状态值，每次修改以后，自动调用 `this.render` 方法，再次渲染组件。\n\n由于 `this.props` 和 `this.state` 都用于描述组件的特性，可能会产生混淆。一个简单的区分方法是，`this.props` 表示那些一旦定义，就不再改变的特性，而 `this.state` 是会随着用户互动而产生变化的特性。\n### 7.2 表单\n```\nvar Input = React.createClass({\n  getInitialState: function() {\n    return {value: 'Hello!'};\n  },\n  handleChange: function(event) {\n    this.setState({value: event.target.value});\n  },\n  render: function () {\n    var value = this.state.value;\n    return (\n      <div>\n        <input type=\"text\" value={value} onChange={this.handleChange} />\n        <p>{value}</p>\n      </div>\n    );\n  }\n});\n\nReactDOM.render(<Input/>, document.body);\n```\n上面代码中，文本输入框的值，不能用 `this.props.value` 读取，而要定义一个 `onChange` 事件的回调函数，通过 `event.target.value` 读取用户输入的值。\n`textarea` 元素、`select`元素、`radio`元素都属于这种情况，更多介绍请参考官方文档。\n\n---\n## 8. 组件的生命周期\n组件的生命周期分成三个状态：\n>- Mounting：已插入真实 DOM\n- Updating：正在被重新渲染\n- Unmounting：已移出真实 DOM\n\nReact 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。\n\n> - componentWillMount()\n- componentDidMount()\n- componentWillUpdate(object nextProps, object nextState)\n- componentDidUpdate(object prevProps, object prevState)\n- componentWillUnmount()\n\n此外，React 还提供两种特殊状态的处理函数。\n> - componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用\n- shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用\n\n```\nvar Hello = React.createClass({\n  getInitialState: function () {\n    return {\n      opacity: 1.0\n    };\n  },\n\n  componentDidMount: function () {\n    this.timer = setInterval(function () {\n      var opacity = this.state.opacity;\n      opacity -= .05;\n      if (opacity < 0.1) {\n        opacity = 1.0;\n      }\n      this.setState({\n        opacity: opacity\n      });\n    }.bind(this), 100);\n  },\n\n  render: function () {\n    return (\n      <div style={{opacity: this.state.opacity}}>\n        Hello {this.props.name}\n      </div>\n    );\n  }\n});\n\nReactDOM.render(\n  <Hello name=\"world\"/>,\n  document.body\n);\n```\n上面代码在`Hello`组件加载以后，通过 `componentDidMount` 方法设置一个定时器，每隔100毫秒，就重新设置组件的透明度，从而引发重新渲染。\n另外，组件的style属性的设置方式也值得注意 `style={ {opacity: this.state.opacity} } `\nReact 组件样式是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象。\n---\n## 9. Ajax\n组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 `componentDidMount` 方法设置 Ajax 请求，等到请求成功，再用 `this.setState` 方法重新渲染 UI\n\n```\nvar UserGist = React.createClass({\n  getInitialState: function() {\n    return {\n      username: '',\n      lastGistUrl: ''\n    };\n  },\n\n  componentDidMount: function() {\n    $.get(this.props.source, function(result) {\n      var lastGist = result[0];\n      if (this.isMounted()) {\n        this.setState({\n          username: lastGist.owner.login,\n          lastGistUrl: lastGist.html_url\n        });\n      }\n    }.bind(this));\n  },\n\n  render: function() {\n    return (\n      <div>\n        {this.state.username}'s last gist is\n        <a href={this.state.lastGistUrl}>here</a>.\n      </div>\n    );\n  }\n});\n\nReactDOM.render(\n  <UserGist source=\"https://api.github.com/users/octocat/gists\" />,\n  document.body\n);\n```\n\n\n\n\n\n  [1]: http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033106.png\n  [2]: http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033110.png\n  [3]: https://facebook.github.io/react/docs/top-level-api.html#react.children\n  [4]: http://facebook.github.io/react/docs/events.html#supported-events","source":"_posts/React.md","raw":"---\ntitle: React\ndate: 2019-01-21 10:26:49\ntags: JS\n---\n\n---\n## 1. 基础\n### 1.1 库\n<!-- more -->\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script type=\"text/babel\">\n      // ** Our code goes here! **\n    </script>\n  </body>\n</html>\n```\n其次，上面代码一共用了三个库： `react.js` 、`react-dom.js` 和 `Browser.js`，它们必须首先加载。其中，`react.js` 是 React 的核心库，`react-dom.js` 是提供与 DOM 相关的功能，`Browser.js` 的作用是将 JSX 语法转为 JavaScript 语法，这一步很消耗时间，实际上线的时候，应该将它放到服务器完成。\n\n> babel src --out-dir build\n\n上面命令可以将 src 子目录的 js 文件进行语法转换，转码后的文件全部放在 build 子目录。\n### 1.2 ReactDOM.render\nReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。\n```\nReactDOM.render(\n  <h1>Hello, world!</h1>,\n  document.getElementById('example')\n);\n```\n上面代码将一个 h1 标题，插入 example 节点。\n\n---\n## 2. JSX\nJSX 的基本语法规则：遇到 HTML 标签（以 < 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析\n```\nvar names = ['Alice', 'Emily', 'Kate'];\n\nReactDOM.render(\n  <div>\n  {\n    names.map(function (name) {\n      return <div>Hello, {name}!</div>\n    })\n  }\n  </div>,\n  document.getElementById('example')\n);\n```\n![][1]\n\narr变量是一个数组，结果 JSX 会把它的所有成员，添加到模板\n```\nvar arr = [\n  <h1>Hello world!</h1>,\n  <h2>React is awesome</h2>,\n];\nReactDOM.render(\n  <div>{arr}</div>,\n  document.getElementById('example')\n);\n```\n---\n## 3. 组件\n- React 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。\n\n- React.createClass 方法就用于生成一个组件类。\n```\nvar HelloMessage = React.createClass({\n  render: function() {\n    return <h1>Hello {this.props.name}</h1>;\n  }\n});\n\nReactDOM.render(\n  <HelloMessage name=\"John\" />,\n  document.getElementById('example')\n);\n```\n- 上面代码中，变量 `HelloMessage` 就是一个组件类。模板插入 `<HelloMessage />` 时，会自动生成 `HelloMessage` 的一个实例（下文的\"组件\"都指组件类的实例）。所有组件类都必须有自己的 `render` 方法，用于输出组件。\n\n- 注意，**组件类**的**第一个字母必须大写**，否则会报错，比如`HelloMessage`不能写成`helloMessage`。另外，组件类只能包含一个顶层标签，否则也会报错。\n\n- 组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 `<HelloMessage name=\"John\">` ，就是 `HelloMessage` 组件加入一个 `name` 属性，值为 `John`。\n\n- 组件的属性可以在组件类的 `this.props` 对象上获取，比如 `name` 属性就可以通过 `this.props.name` 读取\n\n- 添加组件属性， `class` 属性需要写成 `className` ，`for` 属性需要写成 `htmlFor`，因为是关键字\n\n---\n## 4. this.props.children\n`this.props` 对象的属性与组件的属性一一对应，但是有一个例外，就是 `this.props.children` 属性。它表示组件的所有子节点。\n```\nvar NotesList = React.createClass({\n  render: function() {\n    return (\n      <ol>\n      {\n        React.Children.map(this.props.children, function (child) {\n          return <li>{child}</li>;\n        })\n      }\n      </ol>\n    );\n  }\n});\n\nReactDOM.render(\n  <NotesList>\n    <span>hello</span>\n    <span>world</span>\n  </NotesList>,\n  document.body\n);\n```\n上面代码的 `NoteList` 组件有两个 `span` 子节点，它们都可以通过 `this.props.children` 读取，运行结果如下。\n![][2]\n\n- 这里需要注意， `this.props.children`的值有三种可能：\n  - 如果当前组件没有子节点，它就是 `undefined`;\n  - 如果有一个子节点，数据类型是 `object`；\n  - 如果有多个子节点，数据类型就是 `array` 。所以，处理 this.props.children 的时候要小心。\n  - React 提供一个工具方法 [`React.Children`][3] 来处理`this.props.children` 。我们可以用 `React.Children.map` 来遍历子节点，而不用担心 `this.props.children` 的数据类型是 `undefined` 还是 `object`。\n\n---\n## 5. PropTypes\n组件的属性可以接受任意值，字符串、对象、函数等等都可以。有时，我们需要一种机制，**验证**别人使用组件时，**提供的参数是否符合要求**。\n\n组件类的`PropTypes`属性，就是用来验证组件实例的属性是否符合要求\n```\nvar data = 123;\n\nvar MyTitle = React.createClass({\n  propTypes: {\n    title: React.PropTypes.string.isRequired,\n  },\n  render: function() {\n     return <h1> {this.props.title} </h1>;\n   }\n});\n\nReactDOM.render(\n  <MyTitle title={data} />,\n  document.body\n);\n```\n上面的`Mytitle`组件有一个`title`属性。`PropTypes` 告诉 React，这个 `title` 属性是必须的，而且它的值必须是字符串。现在，我们设置 `title` 属性的值是一个数值。\n这样一来，`title`属性就通不过验证了。控制台会显示一行错误信息。\n> Warning: Failed propType: Invalid prop `title` of type `number` supplied to `MyTitle`, expected `string`.\n\n### 5.2 设置默认参数\n`getDefaultProps` 方法可以用来设置组件属性的默认值。\n```\nvar MyTitle = React.createClass({\n  getDefaultProps : function () {\n    return {\n      title : 'Hello World'\n    };\n  },\n\n  render: function() {\n     return <h1> {this.props.title} </h1>;\n   }\n});\n\nReactDOM.render(\n  <MyTitle />,\n  document.body\n);\n```\n> 上面代码会输出\"Hello World\"。\n\n---\n## 6. 获取真实的DOM节点\n有时需要从组件获取真实 DOM 的节点，这时就要用到 `ref` 属性\n```\nvar MyComponent = React.createClass({\n  handleClick: function() {\n    this.refs.myTextInput.focus();\n  },\n  render: function() {\n    return (\n      <div>\n        <input type=\"text\" ref=\"myTextInput\" />\n        <input type=\"button\" value=\"Focus the text input\" onClick={this.handleClick} />\n      </div>\n    );\n  }\n});\n\nReactDOM.render(\n  <MyComponent />,\n  document.getElementById('example')\n);\n```\n上面代码中，组件 `MyComponent` 的子节点有一个文本输入框， 用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。为了做到这一点，文本输入框必须有一个 `ref` 属性，然后 `this.refs.[refName]` 就会返回这个真实的 DOM 节点。\n需要注意的是，由于 `this.refs.[refName]` 属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。 上面代码中，通过为组件指定 `Click` 事件的回调函数，确保了只有等到真实 DOM 发生 `Click` 事件之后，才会读取 `this.refs.[refName]` 属性。\n\nReact 组件支持很多事件，除了 `Click` 事件以外，还有 `KeyDown` 、`Copy`、`Scroll` 等，完整的事件清单请查看[官方文档][4]。\n\n---\n## 7. this.state\n组件免不了要与用户互动，React的一大创新，就是将组件看成是一个状态机，一开始有一个**初始状态**，然后用户互动，导致状态变化，从而触发重新渲染 UI\n### 7.1 LikeButton\n```\nvar LikeButton = React.createClass({\n  getInitialState: function() {\n    return {liked: false};\n  },\n  handleClick: function(event) {\n    this.setState({liked: !this.state.liked});\n  },\n  render: function() {\n    var text = this.state.liked ? 'like' : 'haven\\'t liked';\n    return (\n      <p onClick={this.handleClick}>\n        You {text} this. Click to toggle.\n      </p>\n    );\n  }\n});\n\nReactDOM.render(\n  <LikeButton />,\n  document.getElementById('example')\n);\n```\n上面代码是一个 `LikeButton` 组件，它的 `getInitialState` 方法用于定义初始状态，也就是一个对象，这个对象可以通过 `this.state` 属性读取。当用户点击组件，导致状态变化，`this.setState` 方法就修改状态值，每次修改以后，自动调用 `this.render` 方法，再次渲染组件。\n\n由于 `this.props` 和 `this.state` 都用于描述组件的特性，可能会产生混淆。一个简单的区分方法是，`this.props` 表示那些一旦定义，就不再改变的特性，而 `this.state` 是会随着用户互动而产生变化的特性。\n### 7.2 表单\n```\nvar Input = React.createClass({\n  getInitialState: function() {\n    return {value: 'Hello!'};\n  },\n  handleChange: function(event) {\n    this.setState({value: event.target.value});\n  },\n  render: function () {\n    var value = this.state.value;\n    return (\n      <div>\n        <input type=\"text\" value={value} onChange={this.handleChange} />\n        <p>{value}</p>\n      </div>\n    );\n  }\n});\n\nReactDOM.render(<Input/>, document.body);\n```\n上面代码中，文本输入框的值，不能用 `this.props.value` 读取，而要定义一个 `onChange` 事件的回调函数，通过 `event.target.value` 读取用户输入的值。\n`textarea` 元素、`select`元素、`radio`元素都属于这种情况，更多介绍请参考官方文档。\n\n---\n## 8. 组件的生命周期\n组件的生命周期分成三个状态：\n>- Mounting：已插入真实 DOM\n- Updating：正在被重新渲染\n- Unmounting：已移出真实 DOM\n\nReact 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。\n\n> - componentWillMount()\n- componentDidMount()\n- componentWillUpdate(object nextProps, object nextState)\n- componentDidUpdate(object prevProps, object prevState)\n- componentWillUnmount()\n\n此外，React 还提供两种特殊状态的处理函数。\n> - componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用\n- shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用\n\n```\nvar Hello = React.createClass({\n  getInitialState: function () {\n    return {\n      opacity: 1.0\n    };\n  },\n\n  componentDidMount: function () {\n    this.timer = setInterval(function () {\n      var opacity = this.state.opacity;\n      opacity -= .05;\n      if (opacity < 0.1) {\n        opacity = 1.0;\n      }\n      this.setState({\n        opacity: opacity\n      });\n    }.bind(this), 100);\n  },\n\n  render: function () {\n    return (\n      <div style={{opacity: this.state.opacity}}>\n        Hello {this.props.name}\n      </div>\n    );\n  }\n});\n\nReactDOM.render(\n  <Hello name=\"world\"/>,\n  document.body\n);\n```\n上面代码在`Hello`组件加载以后，通过 `componentDidMount` 方法设置一个定时器，每隔100毫秒，就重新设置组件的透明度，从而引发重新渲染。\n另外，组件的style属性的设置方式也值得注意 `style={ {opacity: this.state.opacity} } `\nReact 组件样式是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象。\n---\n## 9. Ajax\n组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 `componentDidMount` 方法设置 Ajax 请求，等到请求成功，再用 `this.setState` 方法重新渲染 UI\n\n```\nvar UserGist = React.createClass({\n  getInitialState: function() {\n    return {\n      username: '',\n      lastGistUrl: ''\n    };\n  },\n\n  componentDidMount: function() {\n    $.get(this.props.source, function(result) {\n      var lastGist = result[0];\n      if (this.isMounted()) {\n        this.setState({\n          username: lastGist.owner.login,\n          lastGistUrl: lastGist.html_url\n        });\n      }\n    }.bind(this));\n  },\n\n  render: function() {\n    return (\n      <div>\n        {this.state.username}'s last gist is\n        <a href={this.state.lastGistUrl}>here</a>.\n      </div>\n    );\n  }\n});\n\nReactDOM.render(\n  <UserGist source=\"https://api.github.com/users/octocat/gists\" />,\n  document.body\n);\n```\n\n\n\n\n\n  [1]: http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033106.png\n  [2]: http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033110.png\n  [3]: https://facebook.github.io/react/docs/top-level-api.html#react.children\n  [4]: http://facebook.github.io/react/docs/events.html#supported-events","slug":"React","published":1,"updated":"2019-01-21T06:27:25.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642pyf000uy0oozkqv63x7","content":"<hr>\n<h2 id=\"1-基础\"><a href=\"#1-基础\" class=\"headerlink\" title=\"1. 基础\"></a>1. 基础</h2><h3 id=\"1-1-库\"><a href=\"#1-1-库\" class=\"headerlink\" title=\"1.1 库\"></a>1.1 库</h3><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class=\"line\">      // ** Our code goes here! **</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>其次，上面代码一共用了三个库： <code>react.js</code> 、<code>react-dom.js</code> 和 <code>Browser.js</code>，它们必须首先加载。其中，<code>react.js</code> 是 React 的核心库，<code>react-dom.js</code> 是提供与 DOM 相关的功能，<code>Browser.js</code> 的作用是将 JSX 语法转为 JavaScript 语法，这一步很消耗时间，实际上线的时候，应该将它放到服务器完成。</p>\n<blockquote>\n<p>babel src —out-dir build</p>\n</blockquote>\n<p>上面命令可以将 src 子目录的 js 文件进行语法转换，转码后的文件全部放在 build 子目录。</p>\n<h3 id=\"1-2-ReactDOM-render\"><a href=\"#1-2-ReactDOM-render\" class=\"headerlink\" title=\"1.2 ReactDOM.render\"></a>1.2 ReactDOM.render</h3><p>ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码将一个 h1 标题，插入 example 节点。</p>\n<hr>\n<h2 id=\"2-JSX\"><a href=\"#2-JSX\" class=\"headerlink\" title=\"2. JSX\"></a>2. JSX</h2><p>JSX 的基本语法规则：遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var names = [&apos;Alice&apos;, &apos;Emily&apos;, &apos;Kate&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    names.map(function (name) &#123;</span><br><span class=\"line\">      return &lt;div&gt;Hello, &#123;name&#125;!&lt;/div&gt;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &lt;/div&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033106.png\" alt=\"\"></p>\n<p>arr变量是一个数组，结果 JSX 会把它的所有成员，添加到模板<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [</span><br><span class=\"line\">  &lt;h1&gt;Hello world!&lt;/h1&gt;,</span><br><span class=\"line\">  &lt;h2&gt;React is awesome&lt;/h2&gt;,</span><br><span class=\"line\">];</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;div&gt;&#123;arr&#125;&lt;/div&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"3-组件\"><a href=\"#3-组件\" class=\"headerlink\" title=\"3. 组件\"></a>3. 组件</h2><ul>\n<li><p>React 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。</p>\n</li>\n<li><p>React.createClass 方法就用于生成一个组件类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">    return &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;HelloMessage name=&quot;John&quot; /&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上面代码中，变量 <code>HelloMessage</code> 就是一个组件类。模板插入 <code>&lt;HelloMessage /&gt;</code> 时，会自动生成 <code>HelloMessage</code> 的一个实例（下文的”组件”都指组件类的实例）。所有组件类都必须有自己的 <code>render</code> 方法，用于输出组件。</p>\n</li>\n<li><p>注意，<strong>组件类</strong>的<strong>第一个字母必须大写</strong>，否则会报错，比如<code>HelloMessage</code>不能写成<code>helloMessage</code>。另外，组件类只能包含一个顶层标签，否则也会报错。</p>\n</li>\n<li><p>组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 <code>&lt;HelloMessage name=&quot;John&quot;&gt;</code> ，就是 <code>HelloMessage</code> 组件加入一个 <code>name</code> 属性，值为 <code>John</code>。</p>\n</li>\n<li><p>组件的属性可以在组件类的 <code>this.props</code> 对象上获取，比如 <code>name</code> 属性就可以通过 <code>this.props.name</code> 读取</p>\n</li>\n<li><p>添加组件属性， <code>class</code> 属性需要写成 <code>className</code> ，<code>for</code> 属性需要写成 <code>htmlFor</code>，因为是关键字</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"4-this-props-children\"><a href=\"#4-this-props-children\" class=\"headerlink\" title=\"4. this.props.children\"></a>4. this.props.children</h2><p><code>this.props</code> 对象的属性与组件的属性一一对应，但是有一个例外，就是 <code>this.props.children</code> 属性。它表示组件的所有子节点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var NotesList = React.createClass(&#123;</span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;ol&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        React.Children.map(this.props.children, function (child) &#123;</span><br><span class=\"line\">          return &lt;li&gt;&#123;child&#125;&lt;/li&gt;;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &lt;/ol&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;NotesList&gt;</span><br><span class=\"line\">    &lt;span&gt;hello&lt;/span&gt;</span><br><span class=\"line\">    &lt;span&gt;world&lt;/span&gt;</span><br><span class=\"line\">  &lt;/NotesList&gt;,</span><br><span class=\"line\">  document.body</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码的 <code>NoteList</code> 组件有两个 <code>span</code> 子节点，它们都可以通过 <code>this.props.children</code> 读取，运行结果如下。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033110.png\" alt=\"\"></p>\n<ul>\n<li>这里需要注意， <code>this.props.children</code>的值有三种可能：<ul>\n<li>如果当前组件没有子节点，它就是 <code>undefined</code>;</li>\n<li>如果有一个子节点，数据类型是 <code>object</code>；</li>\n<li>如果有多个子节点，数据类型就是 <code>array</code> 。所以，处理 this.props.children 的时候要小心。</li>\n<li>React 提供一个工具方法 <a href=\"https://facebook.github.io/react/docs/top-level-api.html#react.children\" target=\"_blank\" rel=\"noopener\"><code>React.Children</code></a> 来处理<code>this.props.children</code> 。我们可以用 <code>React.Children.map</code> 来遍历子节点，而不用担心 <code>this.props.children</code> 的数据类型是 <code>undefined</code> 还是 <code>object</code>。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-PropTypes\"><a href=\"#5-PropTypes\" class=\"headerlink\" title=\"5. PropTypes\"></a>5. PropTypes</h2><p>组件的属性可以接受任意值，字符串、对象、函数等等都可以。有时，我们需要一种机制，<strong>验证</strong>别人使用组件时，<strong>提供的参数是否符合要求</strong>。</p>\n<p>组件类的<code>PropTypes</code>属性，就是用来验证组件实例的属性是否符合要求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var data = 123;</span><br><span class=\"line\"></span><br><span class=\"line\">var MyTitle = React.createClass(&#123;</span><br><span class=\"line\">  propTypes: &#123;</span><br><span class=\"line\">    title: React.PropTypes.string.isRequired,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">     return &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;MyTitle title=&#123;data&#125; /&gt;,</span><br><span class=\"line\">  document.body</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>上面的<code>Mytitle</code>组件有一个<code>title</code>属性。<code>PropTypes</code> 告诉 React，这个 <code>title</code> 属性是必须的，而且它的值必须是字符串。现在，我们设置 <code>title</code> 属性的值是一个数值。<br>这样一来，<code>title</code>属性就通不过验证了。控制台会显示一行错误信息。</p>\n<blockquote>\n<p>Warning: Failed propType: Invalid prop <code>title</code> of type <code>number</code> supplied to <code>MyTitle</code>, expected <code>string</code>.</p>\n</blockquote>\n<h3 id=\"5-2-设置默认参数\"><a href=\"#5-2-设置默认参数\" class=\"headerlink\" title=\"5.2 设置默认参数\"></a>5.2 设置默认参数</h3><p><code>getDefaultProps</code> 方法可以用来设置组件属性的默认值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var MyTitle = React.createClass(&#123;</span><br><span class=\"line\">  getDefaultProps : function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      title : &apos;Hello World&apos;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">     return &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;MyTitle /&gt;,</span><br><span class=\"line\">  document.body</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上面代码会输出”Hello World”。</p>\n</blockquote>\n<hr>\n<h2 id=\"6-获取真实的DOM节点\"><a href=\"#6-获取真实的DOM节点\" class=\"headerlink\" title=\"6. 获取真实的DOM节点\"></a>6. 获取真实的DOM节点</h2><p>有时需要从组件获取真实 DOM 的节点，这时就要用到 <code>ref</code> 属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var MyComponent = React.createClass(&#123;</span><br><span class=\"line\">  handleClick: function() &#123;</span><br><span class=\"line\">    this.refs.myTextInput.focus();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; ref=&quot;myTextInput&quot; /&gt;</span><br><span class=\"line\">        &lt;input type=&quot;button&quot; value=&quot;Focus the text input&quot; onClick=&#123;this.handleClick&#125; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;MyComponent /&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，组件 <code>MyComponent</code> 的子节点有一个文本输入框， 用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。为了做到这一点，文本输入框必须有一个 <code>ref</code> 属性，然后 <code>this.refs.[refName]</code> 就会返回这个真实的 DOM 节点。<br>需要注意的是，由于 <code>this.refs.[refName]</code> 属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。 上面代码中，通过为组件指定 <code>Click</code> 事件的回调函数，确保了只有等到真实 DOM 发生 <code>Click</code> 事件之后，才会读取 <code>this.refs.[refName]</code> 属性。</p>\n<p>React 组件支持很多事件，除了 <code>Click</code> 事件以外，还有 <code>KeyDown</code> 、<code>Copy</code>、<code>Scroll</code> 等，完整的事件清单请查看<a href=\"http://facebook.github.io/react/docs/events.html#supported-events\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<hr>\n<h2 id=\"7-this-state\"><a href=\"#7-this-state\" class=\"headerlink\" title=\"7. this.state\"></a>7. this.state</h2><p>组件免不了要与用户互动，React的一大创新，就是将组件看成是一个状态机，一开始有一个<strong>初始状态</strong>，然后用户互动，导致状态变化，从而触发重新渲染 UI</p>\n<h3 id=\"7-1-LikeButton\"><a href=\"#7-1-LikeButton\" class=\"headerlink\" title=\"7.1 LikeButton\"></a>7.1 LikeButton</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var LikeButton = React.createClass(&#123;</span><br><span class=\"line\">  getInitialState: function() &#123;</span><br><span class=\"line\">    return &#123;liked: false&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  handleClick: function(event) &#123;</span><br><span class=\"line\">    this.setState(&#123;liked: !this.state.liked&#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">    var text = this.state.liked ? &apos;like&apos; : &apos;haven\\&apos;t liked&apos;;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;p onClick=&#123;this.handleClick&#125;&gt;</span><br><span class=\"line\">        You &#123;text&#125; this. Click to toggle.</span><br><span class=\"line\">      &lt;/p&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;LikeButton /&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>上面代码是一个 <code>LikeButton</code> 组件，它的 <code>getInitialState</code> 方法用于定义初始状态，也就是一个对象，这个对象可以通过 <code>this.state</code> 属性读取。当用户点击组件，导致状态变化，<code>this.setState</code> 方法就修改状态值，每次修改以后，自动调用 <code>this.render</code> 方法，再次渲染组件。</p>\n<p>由于 <code>this.props</code> 和 <code>this.state</code> 都用于描述组件的特性，可能会产生混淆。一个简单的区分方法是，<code>this.props</code> 表示那些一旦定义，就不再改变的特性，而 <code>this.state</code> 是会随着用户互动而产生变化的特性。</p>\n<h3 id=\"7-2-表单\"><a href=\"#7-2-表单\" class=\"headerlink\" title=\"7.2 表单\"></a>7.2 表单</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Input = React.createClass(&#123;</span><br><span class=\"line\">  getInitialState: function() &#123;</span><br><span class=\"line\">    return &#123;value: &apos;Hello!&apos;&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  handleChange: function(event) &#123;</span><br><span class=\"line\">    this.setState(&#123;value: event.target.value&#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: function () &#123;</span><br><span class=\"line\">    var value = this.state.value;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; value=&#123;value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;value&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(&lt;Input/&gt;, document.body);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，文本输入框的值，不能用 <code>this.props.value</code> 读取，而要定义一个 <code>onChange</code> 事件的回调函数，通过 <code>event.target.value</code> 读取用户输入的值。<br><code>textarea</code> 元素、<code>select</code>元素、<code>radio</code>元素都属于这种情况，更多介绍请参考官方文档。</p>\n<hr>\n<h2 id=\"8-组件的生命周期\"><a href=\"#8-组件的生命周期\" class=\"headerlink\" title=\"8. 组件的生命周期\"></a>8. 组件的生命周期</h2><p>组件的生命周期分成三个状态：</p>\n<blockquote>\n<ul>\n<li>Mounting：已插入真实 DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounting：已移出真实 DOM</li>\n</ul>\n</blockquote>\n<p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。</p>\n<blockquote>\n<ul>\n<li>componentWillMount()</li>\n<li>componentDidMount()</li>\n<li>componentWillUpdate(object nextProps, object nextState)</li>\n<li>componentDidUpdate(object prevProps, object prevState)</li>\n<li>componentWillUnmount()</li>\n</ul>\n</blockquote>\n<p>此外，React 还提供两种特殊状态的处理函数。</p>\n<blockquote>\n<ul>\n<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>\n<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Hello = React.createClass(&#123;</span><br><span class=\"line\">  getInitialState: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      opacity: 1.0</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount: function () &#123;</span><br><span class=\"line\">    this.timer = setInterval(function () &#123;</span><br><span class=\"line\">      var opacity = this.state.opacity;</span><br><span class=\"line\">      opacity -= .05;</span><br><span class=\"line\">      if (opacity &lt; 0.1) &#123;</span><br><span class=\"line\">        opacity = 1.0;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        opacity: opacity</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;.bind(this), 100);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render: function () &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div style=&#123;&#123;opacity: this.state.opacity&#125;&#125;&gt;</span><br><span class=\"line\">        Hello &#123;this.props.name&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Hello name=&quot;world&quot;/&gt;,</span><br><span class=\"line\">  document.body</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>上面代码在<code>Hello</code>组件加载以后，通过 <code>componentDidMount</code> 方法设置一个定时器，每隔100毫秒，就重新设置组件的透明度，从而引发重新渲染。<br>另外，组件的style属性的设置方式也值得注意 <code>style={ {opacity: this.state.opacity} }</code></p>\n<h2 id=\"React-组件样式是一个对象，所以第一重大括号表示这是-JavaScript-语法，第二重大括号表示样式对象。\"><a href=\"#React-组件样式是一个对象，所以第一重大括号表示这是-JavaScript-语法，第二重大括号表示样式对象。\" class=\"headerlink\" title=\"React 组件样式是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象。\"></a>React 组件样式是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象。</h2><h2 id=\"9-Ajax\"><a href=\"#9-Ajax\" class=\"headerlink\" title=\"9. Ajax\"></a>9. Ajax</h2><p>组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 <code>componentDidMount</code> 方法设置 Ajax 请求，等到请求成功，再用 <code>this.setState</code> 方法重新渲染 UI</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var UserGist = React.createClass(&#123;</span><br><span class=\"line\">  getInitialState: function() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      username: &apos;&apos;,</span><br><span class=\"line\">      lastGistUrl: &apos;&apos;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount: function() &#123;</span><br><span class=\"line\">    $.get(this.props.source, function(result) &#123;</span><br><span class=\"line\">      var lastGist = result[0];</span><br><span class=\"line\">      if (this.isMounted()) &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">          username: lastGist.owner.login,</span><br><span class=\"line\">          lastGistUrl: lastGist.html_url</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;.bind(this));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;this.state.username&#125;&apos;s last gist is</span><br><span class=\"line\">        &lt;a href=&#123;this.state.lastGistUrl&#125;&gt;here&lt;/a&gt;.</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;UserGist source=&quot;https://api.github.com/users/octocat/gists&quot; /&gt;,</span><br><span class=\"line\">  document.body</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"1-基础\"><a href=\"#1-基础\" class=\"headerlink\" title=\"1. 基础\"></a>1. 基础</h2><h3 id=\"1-1-库\"><a href=\"#1-1-库\" class=\"headerlink\" title=\"1.1 库\"></a>1.1 库</h3>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class=\"line\">      // ** Our code goes here! **</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>其次，上面代码一共用了三个库： <code>react.js</code> 、<code>react-dom.js</code> 和 <code>Browser.js</code>，它们必须首先加载。其中，<code>react.js</code> 是 React 的核心库，<code>react-dom.js</code> 是提供与 DOM 相关的功能，<code>Browser.js</code> 的作用是将 JSX 语法转为 JavaScript 语法，这一步很消耗时间，实际上线的时候，应该将它放到服务器完成。</p>\n<blockquote>\n<p>babel src —out-dir build</p>\n</blockquote>\n<p>上面命令可以将 src 子目录的 js 文件进行语法转换，转码后的文件全部放在 build 子目录。</p>\n<h3 id=\"1-2-ReactDOM-render\"><a href=\"#1-2-ReactDOM-render\" class=\"headerlink\" title=\"1.2 ReactDOM.render\"></a>1.2 ReactDOM.render</h3><p>ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码将一个 h1 标题，插入 example 节点。</p>\n<hr>\n<h2 id=\"2-JSX\"><a href=\"#2-JSX\" class=\"headerlink\" title=\"2. JSX\"></a>2. JSX</h2><p>JSX 的基本语法规则：遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var names = [&apos;Alice&apos;, &apos;Emily&apos;, &apos;Kate&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    names.map(function (name) &#123;</span><br><span class=\"line\">      return &lt;div&gt;Hello, &#123;name&#125;!&lt;/div&gt;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &lt;/div&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033106.png\" alt=\"\"></p>\n<p>arr变量是一个数组，结果 JSX 会把它的所有成员，添加到模板<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [</span><br><span class=\"line\">  &lt;h1&gt;Hello world!&lt;/h1&gt;,</span><br><span class=\"line\">  &lt;h2&gt;React is awesome&lt;/h2&gt;,</span><br><span class=\"line\">];</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;div&gt;&#123;arr&#125;&lt;/div&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"3-组件\"><a href=\"#3-组件\" class=\"headerlink\" title=\"3. 组件\"></a>3. 组件</h2><ul>\n<li><p>React 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。</p>\n</li>\n<li><p>React.createClass 方法就用于生成一个组件类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var HelloMessage = React.createClass(&#123;</span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">    return &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;HelloMessage name=&quot;John&quot; /&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上面代码中，变量 <code>HelloMessage</code> 就是一个组件类。模板插入 <code>&lt;HelloMessage /&gt;</code> 时，会自动生成 <code>HelloMessage</code> 的一个实例（下文的”组件”都指组件类的实例）。所有组件类都必须有自己的 <code>render</code> 方法，用于输出组件。</p>\n</li>\n<li><p>注意，<strong>组件类</strong>的<strong>第一个字母必须大写</strong>，否则会报错，比如<code>HelloMessage</code>不能写成<code>helloMessage</code>。另外，组件类只能包含一个顶层标签，否则也会报错。</p>\n</li>\n<li><p>组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 <code>&lt;HelloMessage name=&quot;John&quot;&gt;</code> ，就是 <code>HelloMessage</code> 组件加入一个 <code>name</code> 属性，值为 <code>John</code>。</p>\n</li>\n<li><p>组件的属性可以在组件类的 <code>this.props</code> 对象上获取，比如 <code>name</code> 属性就可以通过 <code>this.props.name</code> 读取</p>\n</li>\n<li><p>添加组件属性， <code>class</code> 属性需要写成 <code>className</code> ，<code>for</code> 属性需要写成 <code>htmlFor</code>，因为是关键字</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"4-this-props-children\"><a href=\"#4-this-props-children\" class=\"headerlink\" title=\"4. this.props.children\"></a>4. this.props.children</h2><p><code>this.props</code> 对象的属性与组件的属性一一对应，但是有一个例外，就是 <code>this.props.children</code> 属性。它表示组件的所有子节点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var NotesList = React.createClass(&#123;</span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;ol&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        React.Children.map(this.props.children, function (child) &#123;</span><br><span class=\"line\">          return &lt;li&gt;&#123;child&#125;&lt;/li&gt;;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &lt;/ol&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;NotesList&gt;</span><br><span class=\"line\">    &lt;span&gt;hello&lt;/span&gt;</span><br><span class=\"line\">    &lt;span&gt;world&lt;/span&gt;</span><br><span class=\"line\">  &lt;/NotesList&gt;,</span><br><span class=\"line\">  document.body</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码的 <code>NoteList</code> 组件有两个 <code>span</code> 子节点，它们都可以通过 <code>this.props.children</code> 读取，运行结果如下。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015033110.png\" alt=\"\"></p>\n<ul>\n<li>这里需要注意， <code>this.props.children</code>的值有三种可能：<ul>\n<li>如果当前组件没有子节点，它就是 <code>undefined</code>;</li>\n<li>如果有一个子节点，数据类型是 <code>object</code>；</li>\n<li>如果有多个子节点，数据类型就是 <code>array</code> 。所以，处理 this.props.children 的时候要小心。</li>\n<li>React 提供一个工具方法 <a href=\"https://facebook.github.io/react/docs/top-level-api.html#react.children\" target=\"_blank\" rel=\"noopener\"><code>React.Children</code></a> 来处理<code>this.props.children</code> 。我们可以用 <code>React.Children.map</code> 来遍历子节点，而不用担心 <code>this.props.children</code> 的数据类型是 <code>undefined</code> 还是 <code>object</code>。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-PropTypes\"><a href=\"#5-PropTypes\" class=\"headerlink\" title=\"5. PropTypes\"></a>5. PropTypes</h2><p>组件的属性可以接受任意值，字符串、对象、函数等等都可以。有时，我们需要一种机制，<strong>验证</strong>别人使用组件时，<strong>提供的参数是否符合要求</strong>。</p>\n<p>组件类的<code>PropTypes</code>属性，就是用来验证组件实例的属性是否符合要求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var data = 123;</span><br><span class=\"line\"></span><br><span class=\"line\">var MyTitle = React.createClass(&#123;</span><br><span class=\"line\">  propTypes: &#123;</span><br><span class=\"line\">    title: React.PropTypes.string.isRequired,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">     return &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;MyTitle title=&#123;data&#125; /&gt;,</span><br><span class=\"line\">  document.body</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>上面的<code>Mytitle</code>组件有一个<code>title</code>属性。<code>PropTypes</code> 告诉 React，这个 <code>title</code> 属性是必须的，而且它的值必须是字符串。现在，我们设置 <code>title</code> 属性的值是一个数值。<br>这样一来，<code>title</code>属性就通不过验证了。控制台会显示一行错误信息。</p>\n<blockquote>\n<p>Warning: Failed propType: Invalid prop <code>title</code> of type <code>number</code> supplied to <code>MyTitle</code>, expected <code>string</code>.</p>\n</blockquote>\n<h3 id=\"5-2-设置默认参数\"><a href=\"#5-2-设置默认参数\" class=\"headerlink\" title=\"5.2 设置默认参数\"></a>5.2 设置默认参数</h3><p><code>getDefaultProps</code> 方法可以用来设置组件属性的默认值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var MyTitle = React.createClass(&#123;</span><br><span class=\"line\">  getDefaultProps : function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      title : &apos;Hello World&apos;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">     return &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;MyTitle /&gt;,</span><br><span class=\"line\">  document.body</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上面代码会输出”Hello World”。</p>\n</blockquote>\n<hr>\n<h2 id=\"6-获取真实的DOM节点\"><a href=\"#6-获取真实的DOM节点\" class=\"headerlink\" title=\"6. 获取真实的DOM节点\"></a>6. 获取真实的DOM节点</h2><p>有时需要从组件获取真实 DOM 的节点，这时就要用到 <code>ref</code> 属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var MyComponent = React.createClass(&#123;</span><br><span class=\"line\">  handleClick: function() &#123;</span><br><span class=\"line\">    this.refs.myTextInput.focus();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; ref=&quot;myTextInput&quot; /&gt;</span><br><span class=\"line\">        &lt;input type=&quot;button&quot; value=&quot;Focus the text input&quot; onClick=&#123;this.handleClick&#125; /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;MyComponent /&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，组件 <code>MyComponent</code> 的子节点有一个文本输入框， 用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。为了做到这一点，文本输入框必须有一个 <code>ref</code> 属性，然后 <code>this.refs.[refName]</code> 就会返回这个真实的 DOM 节点。<br>需要注意的是，由于 <code>this.refs.[refName]</code> 属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。 上面代码中，通过为组件指定 <code>Click</code> 事件的回调函数，确保了只有等到真实 DOM 发生 <code>Click</code> 事件之后，才会读取 <code>this.refs.[refName]</code> 属性。</p>\n<p>React 组件支持很多事件，除了 <code>Click</code> 事件以外，还有 <code>KeyDown</code> 、<code>Copy</code>、<code>Scroll</code> 等，完整的事件清单请查看<a href=\"http://facebook.github.io/react/docs/events.html#supported-events\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<hr>\n<h2 id=\"7-this-state\"><a href=\"#7-this-state\" class=\"headerlink\" title=\"7. this.state\"></a>7. this.state</h2><p>组件免不了要与用户互动，React的一大创新，就是将组件看成是一个状态机，一开始有一个<strong>初始状态</strong>，然后用户互动，导致状态变化，从而触发重新渲染 UI</p>\n<h3 id=\"7-1-LikeButton\"><a href=\"#7-1-LikeButton\" class=\"headerlink\" title=\"7.1 LikeButton\"></a>7.1 LikeButton</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var LikeButton = React.createClass(&#123;</span><br><span class=\"line\">  getInitialState: function() &#123;</span><br><span class=\"line\">    return &#123;liked: false&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  handleClick: function(event) &#123;</span><br><span class=\"line\">    this.setState(&#123;liked: !this.state.liked&#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">    var text = this.state.liked ? &apos;like&apos; : &apos;haven\\&apos;t liked&apos;;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;p onClick=&#123;this.handleClick&#125;&gt;</span><br><span class=\"line\">        You &#123;text&#125; this. Click to toggle.</span><br><span class=\"line\">      &lt;/p&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;LikeButton /&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;example&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>上面代码是一个 <code>LikeButton</code> 组件，它的 <code>getInitialState</code> 方法用于定义初始状态，也就是一个对象，这个对象可以通过 <code>this.state</code> 属性读取。当用户点击组件，导致状态变化，<code>this.setState</code> 方法就修改状态值，每次修改以后，自动调用 <code>this.render</code> 方法，再次渲染组件。</p>\n<p>由于 <code>this.props</code> 和 <code>this.state</code> 都用于描述组件的特性，可能会产生混淆。一个简单的区分方法是，<code>this.props</code> 表示那些一旦定义，就不再改变的特性，而 <code>this.state</code> 是会随着用户互动而产生变化的特性。</p>\n<h3 id=\"7-2-表单\"><a href=\"#7-2-表单\" class=\"headerlink\" title=\"7.2 表单\"></a>7.2 表单</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Input = React.createClass(&#123;</span><br><span class=\"line\">  getInitialState: function() &#123;</span><br><span class=\"line\">    return &#123;value: &apos;Hello!&apos;&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  handleChange: function(event) &#123;</span><br><span class=\"line\">    this.setState(&#123;value: event.target.value&#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: function () &#123;</span><br><span class=\"line\">    var value = this.state.value;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; value=&#123;value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class=\"line\">        &lt;p&gt;&#123;value&#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(&lt;Input/&gt;, document.body);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，文本输入框的值，不能用 <code>this.props.value</code> 读取，而要定义一个 <code>onChange</code> 事件的回调函数，通过 <code>event.target.value</code> 读取用户输入的值。<br><code>textarea</code> 元素、<code>select</code>元素、<code>radio</code>元素都属于这种情况，更多介绍请参考官方文档。</p>\n<hr>\n<h2 id=\"8-组件的生命周期\"><a href=\"#8-组件的生命周期\" class=\"headerlink\" title=\"8. 组件的生命周期\"></a>8. 组件的生命周期</h2><p>组件的生命周期分成三个状态：</p>\n<blockquote>\n<ul>\n<li>Mounting：已插入真实 DOM</li>\n<li>Updating：正在被重新渲染</li>\n<li>Unmounting：已移出真实 DOM</li>\n</ul>\n</blockquote>\n<p>React 为每个状态都提供了两种处理函数，will 函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。</p>\n<blockquote>\n<ul>\n<li>componentWillMount()</li>\n<li>componentDidMount()</li>\n<li>componentWillUpdate(object nextProps, object nextState)</li>\n<li>componentDidUpdate(object prevProps, object prevState)</li>\n<li>componentWillUnmount()</li>\n</ul>\n</blockquote>\n<p>此外，React 还提供两种特殊状态的处理函数。</p>\n<blockquote>\n<ul>\n<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>\n<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Hello = React.createClass(&#123;</span><br><span class=\"line\">  getInitialState: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      opacity: 1.0</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount: function () &#123;</span><br><span class=\"line\">    this.timer = setInterval(function () &#123;</span><br><span class=\"line\">      var opacity = this.state.opacity;</span><br><span class=\"line\">      opacity -= .05;</span><br><span class=\"line\">      if (opacity &lt; 0.1) &#123;</span><br><span class=\"line\">        opacity = 1.0;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        opacity: opacity</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;.bind(this), 100);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render: function () &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div style=&#123;&#123;opacity: this.state.opacity&#125;&#125;&gt;</span><br><span class=\"line\">        Hello &#123;this.props.name&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Hello name=&quot;world&quot;/&gt;,</span><br><span class=\"line\">  document.body</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>上面代码在<code>Hello</code>组件加载以后，通过 <code>componentDidMount</code> 方法设置一个定时器，每隔100毫秒，就重新设置组件的透明度，从而引发重新渲染。<br>另外，组件的style属性的设置方式也值得注意 <code>style={ {opacity: this.state.opacity} }</code></p>\n<h2 id=\"React-组件样式是一个对象，所以第一重大括号表示这是-JavaScript-语法，第二重大括号表示样式对象。\"><a href=\"#React-组件样式是一个对象，所以第一重大括号表示这是-JavaScript-语法，第二重大括号表示样式对象。\" class=\"headerlink\" title=\"React 组件样式是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象。\"></a>React 组件样式是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象。</h2><h2 id=\"9-Ajax\"><a href=\"#9-Ajax\" class=\"headerlink\" title=\"9. Ajax\"></a>9. Ajax</h2><p>组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 <code>componentDidMount</code> 方法设置 Ajax 请求，等到请求成功，再用 <code>this.setState</code> 方法重新渲染 UI</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var UserGist = React.createClass(&#123;</span><br><span class=\"line\">  getInitialState: function() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      username: &apos;&apos;,</span><br><span class=\"line\">      lastGistUrl: &apos;&apos;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount: function() &#123;</span><br><span class=\"line\">    $.get(this.props.source, function(result) &#123;</span><br><span class=\"line\">      var lastGist = result[0];</span><br><span class=\"line\">      if (this.isMounted()) &#123;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">          username: lastGist.owner.login,</span><br><span class=\"line\">          lastGistUrl: lastGist.html_url</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;.bind(this));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  render: function() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;this.state.username&#125;&apos;s last gist is</span><br><span class=\"line\">        &lt;a href=&#123;this.state.lastGistUrl&#125;&gt;here&lt;/a&gt;.</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;UserGist source=&quot;https://api.github.com/users/octocat/gists&quot; /&gt;,</span><br><span class=\"line\">  document.body</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>"},{"title":"Yii基础","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n## 控制器\n---\n### 介绍\n+ 命名空间与引用\n```\nnamespace app\\controllers;\nuse yii\\web\\Controller;\n```\n+ 命名\n + 控制器：以大写字母开头，加'Controller'后缀：TestController.php\n + 方法：在控制器里叫操作，'action'加大写字母开头的方法名：actionIndex()\n + 类名与文件名相同\n+ 访问控制器\n访问TestController的index操作（r=控制器/操作）：\nhttp://basic/web/index.php`?r=test/index`\n当方法名非开头有大写时，actionShowUser()：\nhttp://basic/web/index.php`?r=test/show-user`\n\n<!-- more -->\n---\n### 内置函数\n+ 时间(年)：\n```<?= date('Y') ?>```\n+ 重定向：\n```$this->redirect(['site/index']);//数组内为调用控制器+操作```\n+ 回主页：\n```$this->goHome();```\n+ 返回上一个页面：\n```$this->goBack();```\n+ 刷新：\n```$this->refresh();//死循环报错```\n---\n### 请求处理request\n+ 地址栏get：GET用于信息获取，而且应该是安全的和幂等的。\n地址栏：http://basic/web/index.php?r=test/index&id=3\n取参：\n```\n$request = \\YII::$app->request; //YII全局变量，以\\表根。或引入命名空间use YII;省去\\\necho $request->get('id',20);    //when ！return，return 20，optional\n```\n+ 表单post：POST表示可能修改变服务器上的资源的请求。\n```$request->post('name', 2333);```\n+ 判定请求类型：\n```\nif ($request->isPost) {\n    echo 'This is Post method.';\n} elseif ($request->isGet) {\n    echo 'This is Get method.';\n}\n```\n+ IP地址\n```echo $request->userIp;```\n---\n### 响应处理response\n```$res = \\YII::$app->response;```\n+ 状态码\n```$res->statusCode = '404';```\n+ 头部\n```\n$res->headers->add('pragma', 'no-cache');//添加html头pragma,不要缓存\n$res->headers->set('pragma', 'max-age=5');//修改\n$res->headers->remove('pragma');//删除\n```\n+ 跳转\n```\n$res->headers->add('location','http://www.baidu.com');//跳转，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取。\n$this->redirect('http://www.baidu.com', 302);//controller跳转专用函数\n```\n+ 下载\n```\n$res->headers->add('content-disposition', 'attachment;filename=\"a.jpg\"');//attachment附件形式\n$res->sendFile('robots.txt');//下载当前页面文件目录下的robots.txt\n```\n---\n### session\n```\n$session = \\YII::$app->session; //设置变量\n\n$session->open();               //开启session\n\nif($session->isActive){         //判断session是否开启\n    echo \"session is active.\";\n}\n\n$session->set('user', '张三');  //设置方法一\n\n$session['user'] = '张三';      //设置方法二\n\necho $session['user'];          //取session\n\n$session->remove('user');       //删除方法一\n\nunset($session['user']);        //删除方法二\n\n```\n---\n### cookie\n```\n$cookie = \\YII::$app->cookies;  //设置变量\n\n$cookie_data = array('name'=>'user','value'='zhangsan');\n\n$cookie->add(new Cookie($cookie_data));     //赋值，覆盖式修改\n\n$cookie->remove('id');          //删除\n\n$cookies = \\YII::$app->request->cookies;    //取cookie\necho $cookies ->getValue('users',400);      //when !found'users' return'400' it's optional value\n```\n---\n## 视图（页面）\n---\n### 创建\n在views目录下创建控制器同名文件夹test，小写即可。\n文件夹内新建页面php，可以直接使用html代码，可添加`<?php ?>`标签来进行using等操作\n\n---\n### 使用\n```return $this->renderPartial('index');        //使用test/index视图文件```\n---\n### 传值\n控制器：TestController\n```\n$hello_str= \"Hello God\";\n$test_arr=array(1,2);\n\n$data = array();                                //创建数组存放数据\n\n$data['view_hello_str'] = $hello_str;           //加入'view_hello_str'键\n$data['view_test_arr'] = $test_arr;             //加入数组键\n\nreturn $this->renderPartial('index', $data);    //使用index视图文件并传递数据data\n```\n视图：index.php\n```\n<?=$view_hello_str;?>\n<?=$view_test_arr[0];?>\n```\n---\n### 传值的安全问题\n控制器：TestController\n```\n$hello_str= \"Hello God\";\n$data = array();                                //创建数组\n$data['view_hello_str'] = $hello_str;           //加入'view_hello_str'键\nreturn $this->renderPartial('index', $data);    //使用index视图文件的同时把数组data传递过去\n```\n视图：index.php\n```\n<?php\nuse yii\\helpers\\Html;\nuse yii\\helpers\\HtmlPurifier;\n?>\n<h1><?=Html::encode($view_hello_str);?></h1>            <!--方法一：转义-->\n<h1><?=HtmlPurifier::process($view_hello_str);?></h1>   <!--方法二：过滤script-->\n```\n---\n### 布局文件（模板）\n1. 在views/layouts文件夹下新建php布局\n2. 控制器声明所用视图\n3. render()方法将视图嵌入布局并显示\n\n视图：\n```\n<h1>index</h1>\n```\n布局：\n```php\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Document</title>\n    </head>\n    <body>\n        <?=$content;?>          <!--视图插入到这里-->\n    </body>\n</html>\n```\n控制器：\n```\npublic $layout = 'common';      //用$layout声明所用的布局文件\npublic function actionShowUser()\n{\n    return $this->render('index');  \n    //render决定访问当前活动时服务器要渲染的视图，render会渲染layout，而renderPartial不会渲染\n    //render()的实际上是先renderPartial view文件，然后renderFile layoutfile,并将view文件的结果做为$content变量传入。 \n}\n```\n更新：\n```\n方案1:控制器内成员变量\npublic $layout = false; //不使用布局\npublic $layout = \"main\"; //设置使用的布局文件\n\n方案2：控制器成员方法内\n$this->layout = false; //不使用布局\n$this->layout = \"main\"; //设置使用的布局文件\n\n方案3：视图中选择布局\n$this->context->layout = false; //不使用布局\n$this->context->layout = 'main'; //设置使用的布局文件\n```\n---\n### 视图的嵌套\n控制器：\n```\npublic function actionShowUser()\n{\n    return $this->renderPartial('index');//只渲染index\n}\n```\n视图index：\n```\n<h1>hello index</h1>\n<?php\necho $this->render('about', array('v_hello_str'=>'hello world'));\n//参数一：在index视图中嵌入about视图\n//参数二：传递数组，理同“传值”\n?>\n```\n视图about：\n```\n<h1>hello about</h1>\n<h1><?=$v_hello_str;?></h1>\n```\n---\n### 数据块\n控制器：\n```\npublic $layout = 'common';\npublic function actionIndex()\n{\n    return $this->render('index');\n}\n```\n布局：\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Document</title>\n    </head>\n    <body>\n        <?php if (isset($this->blocks['block1'])) :?>\n            <?=$this->blocks['block1'];?>   <!--这句也可以直接使用-->\n        <?php else :?>\n            <h1>hello Common</h1>   <!--也可以用花括号把语句写在php标签-->\n        <?php endif?>\n        <?=$content;?>\n    </body>\n</html>\n```\n视图：\n```\n<?php $this->beginBlock('block1');?>    <!--数据块block1-->\n<h1>indexBlock</h1>\n<?php $this->endBlock();?>\n```\n---\n## 数据模型\n---\n### 连接数据库与Yii\n/config/db.php\nadvanced\\common\\config\\main-local.php\n### 什么是活动记录：\nActive Record （活动记录，以下简称AR）提供了一个面向对象的接口， 用以访问数据库中的数据。\n+ 一个 AR 类关联一张数据表， 每个 AR 对象对应表中的一行，对象的属性（即 AR 的特性Attribute）映射到数据行的对应列。\n+ 一条活动记录（AR对象）对应数据表的一行，AR对象的属性则映射该行的相应列。\n+ 使用控制器来使用AR。\n\n---\n### 活动记录的声明\n数据模型：\n```\n<?php\nnamespace app\\models;\nuse yii\\db\\ActiveRecord;\nclass Test extends ActiveRecord //类名与与表名一致\n{\n}\n```\n控制器：\n```\n<?php\nnamespace app\\controllers;\nuse yii\\web\\Controller;\nuse app\\models\\Test;//拓展创建的AR\nclass TestController extends Controller\n{   \n}\n```\n---\n### 查询 findBySql()\n```\n$sql = 'select * from test where id=1';\n$results = Test::findBySql($sql)->all();//继承自AR，将返回的每条记录包装成一个对象，将对象组装成数组，并用all()返回一个数组\nprint_r($results);\n```\n### 占位符防注入\n```\n$sql = 'select * from test where id=:id';//':id' is 占位符\n$id = '1';\n$results = Test::findBySql($sql,array(':id'=>$id))->all();\n```\n### 简化版-数组查询法 find()\n```\n$results = Test::find()\n    ->where(['id'=>1])      //id=1\n    ->all();\n    //->where(['>','id',0])   //id>0\n    //->where(['between','id',1,2])       //id>=1 and id<=2\n    //->where(['like','title','title1'])  //title like \"%title1%\"\nprint_r($results);\n```\n### 选择查询-分页\n```\nSELECT * form 表名 WHERE 条件 limit 5,10; //检索6-15条数据\n\nSELECT * form 表名 WHERE 条件 limit 5,-1; //检索6到最后一条数据(-1)\n\nSELECT * form 表名 WHERE 条件 limit 5; //检索前5条数据，换句话说，LIMIT n 等价于 LIMIT 0,n。\n\n//Yii写法：\n$query->limit(10)->offset(20);      //21开始的10条数据\n```\n### 删除\n```\n//删除第一条\n$results = Test::find()->where(['id'=>1])->all();//取出数据\n$results[0]->delete();\n//全删\nTest::deleteAll();\n//条件删除\nTest::deleteAll('id>0');\nPostCollectModel::deleteAll(['user_id'=>610,'post_id'=>10]);\n//占位符\nTest::deleteAll('id>:id',array(':id'=>0));\n```\n### 增加\n```\n$test = new Test;       //创建一个AR的对象\n$test->id = 3;\n$test->title = 'title3';\n$test->save();          //存入\n```\n### 输入合法验证\nAR：\n```\npublic function rules(){\n    return [\n        ['id','integer'],   //列名，验证器\n        ['title','string','length'=>[0,5]]\n    ];\n}\n```\n控制器：\n```\n$test->validate();              //save前进行验证，错误则中止\nif($test->hasErrors()){         //$test->getErrors()返回错误信息\n    echo 'data is error';\n    die;\n}\n```\n### 改\n```\n$test = Test::find()->where(['id'=>4])->one();  //one()只返回一个对象，可酌情替换all()\n$test->title = 'title4';\n$test->save();\n```\n### 增减updateCounters\n```\n$model 即为models对象\n例1：\n$model->updateCounters(array('count'=>1), 'id='.$model->id);//自动叠加1\n$model->updateCounters(array('count'=>-1), 'id='.$model->id);//自动递减1\n例2：\n$model = PostModel::findOne($post_id);\n$model->updateCounters(['collect'=>1]);\n```\n### 关联查询一\n根据顾客查订单（一查多）：\n```\nuse app\\models\\Order;       //引入订单表的AR\nuse app\\models\\Customer;    //顾客表\n\nclass TestController extends Controller\n{   \n    public function actionIndex()\n    {\n        //关联查询\n        $customer = Customer::find()\n        ->where(['name'=>'zhangsan'])\n        ->one();\n        \n        $orders = $customer\n            ->hasMany('app\\models\\Order',['customer_id'=>'id'])\n            //'app..'可用 Order::className 替换，好像没什么用\n            ->asArray()         //以数组方式显示,便于浏览\n            ->all();\n            \n        print_r($orders);\n    }\n}\n```\n封装查询：\nCustomer AR类：\n```\npublic function getOrder()\n{\n    $orders = $this->hasMany(Order::className,['customer_id'=>'id'])->asArray()->all();\n    //用$this代替$customer                     ↑表结构↑\n    return $orders;\n}\n```\n控制器：\n```\n$customer = Customer::find()\n        ->where(['name'=>'zhangsan'])\n        ->one();\n$orders = $customer->getOrders();\n//被封装，如果表出现变动，只需修改AR，消除了控制器和模型的耦合\n//也可以这样，调用__get()，转化成getOrders()方法，并在最后生成->all()\n//$orders = $customer->orders;//推荐写法\n//所以需要删除getOrder()最后重复的->all()\nprint_r($orders);\n```\n### 关联查询二\n根据订单查询顾客（一查一）：\nOrder：\n```\npublic function getCustomer()\n{\n    return $this\n    ->hasOne(Customer::className,['id'=>'customer_id'])\n    ->asArray();\n}\n```\nController：\n```\n$order = Order::find()->where(['id'=>1])->one();\n$customer = $order->getCustomer()->one();\n//或者这么写：\n$customer = $order->customer;\nprint_r($customer);\n```\n### 查询结果缓存\n```\n$customer = $order->customer;//取值\nunset($order->customer);    //清空\n$customer = $order->customer;//再次取值\n```\n### 多次查询优化\n```\n//select * from customer\n//select * from order where customer_id in(...)\n//加上with后，查询的是所有顾客id的集合，\n$customers = Customer::find()->with('orders')->all();\nforeach($customers as $customer){   //那么就不会调用下面的sql语句了，一共只进行2次查询\n    $orders = $customer->orders;    //select * from order where customer_id = ...\n}\n```","source":"_posts/Yii基础.md","raw":"---\ntitle: Yii基础\ndate: 2019-01-21 10:26:49\ntags: Yii\n---\n\n---\n## 控制器\n---\n### 介绍\n+ 命名空间与引用\n```\nnamespace app\\controllers;\nuse yii\\web\\Controller;\n```\n+ 命名\n + 控制器：以大写字母开头，加'Controller'后缀：TestController.php\n + 方法：在控制器里叫操作，'action'加大写字母开头的方法名：actionIndex()\n + 类名与文件名相同\n+ 访问控制器\n访问TestController的index操作（r=控制器/操作）：\nhttp://basic/web/index.php`?r=test/index`\n当方法名非开头有大写时，actionShowUser()：\nhttp://basic/web/index.php`?r=test/show-user`\n\n<!-- more -->\n---\n### 内置函数\n+ 时间(年)：\n```<?= date('Y') ?>```\n+ 重定向：\n```$this->redirect(['site/index']);//数组内为调用控制器+操作```\n+ 回主页：\n```$this->goHome();```\n+ 返回上一个页面：\n```$this->goBack();```\n+ 刷新：\n```$this->refresh();//死循环报错```\n---\n### 请求处理request\n+ 地址栏get：GET用于信息获取，而且应该是安全的和幂等的。\n地址栏：http://basic/web/index.php?r=test/index&id=3\n取参：\n```\n$request = \\YII::$app->request; //YII全局变量，以\\表根。或引入命名空间use YII;省去\\\necho $request->get('id',20);    //when ！return，return 20，optional\n```\n+ 表单post：POST表示可能修改变服务器上的资源的请求。\n```$request->post('name', 2333);```\n+ 判定请求类型：\n```\nif ($request->isPost) {\n    echo 'This is Post method.';\n} elseif ($request->isGet) {\n    echo 'This is Get method.';\n}\n```\n+ IP地址\n```echo $request->userIp;```\n---\n### 响应处理response\n```$res = \\YII::$app->response;```\n+ 状态码\n```$res->statusCode = '404';```\n+ 头部\n```\n$res->headers->add('pragma', 'no-cache');//添加html头pragma,不要缓存\n$res->headers->set('pragma', 'max-age=5');//修改\n$res->headers->remove('pragma');//删除\n```\n+ 跳转\n```\n$res->headers->add('location','http://www.baidu.com');//跳转，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取。\n$this->redirect('http://www.baidu.com', 302);//controller跳转专用函数\n```\n+ 下载\n```\n$res->headers->add('content-disposition', 'attachment;filename=\"a.jpg\"');//attachment附件形式\n$res->sendFile('robots.txt');//下载当前页面文件目录下的robots.txt\n```\n---\n### session\n```\n$session = \\YII::$app->session; //设置变量\n\n$session->open();               //开启session\n\nif($session->isActive){         //判断session是否开启\n    echo \"session is active.\";\n}\n\n$session->set('user', '张三');  //设置方法一\n\n$session['user'] = '张三';      //设置方法二\n\necho $session['user'];          //取session\n\n$session->remove('user');       //删除方法一\n\nunset($session['user']);        //删除方法二\n\n```\n---\n### cookie\n```\n$cookie = \\YII::$app->cookies;  //设置变量\n\n$cookie_data = array('name'=>'user','value'='zhangsan');\n\n$cookie->add(new Cookie($cookie_data));     //赋值，覆盖式修改\n\n$cookie->remove('id');          //删除\n\n$cookies = \\YII::$app->request->cookies;    //取cookie\necho $cookies ->getValue('users',400);      //when !found'users' return'400' it's optional value\n```\n---\n## 视图（页面）\n---\n### 创建\n在views目录下创建控制器同名文件夹test，小写即可。\n文件夹内新建页面php，可以直接使用html代码，可添加`<?php ?>`标签来进行using等操作\n\n---\n### 使用\n```return $this->renderPartial('index');        //使用test/index视图文件```\n---\n### 传值\n控制器：TestController\n```\n$hello_str= \"Hello God\";\n$test_arr=array(1,2);\n\n$data = array();                                //创建数组存放数据\n\n$data['view_hello_str'] = $hello_str;           //加入'view_hello_str'键\n$data['view_test_arr'] = $test_arr;             //加入数组键\n\nreturn $this->renderPartial('index', $data);    //使用index视图文件并传递数据data\n```\n视图：index.php\n```\n<?=$view_hello_str;?>\n<?=$view_test_arr[0];?>\n```\n---\n### 传值的安全问题\n控制器：TestController\n```\n$hello_str= \"Hello God\";\n$data = array();                                //创建数组\n$data['view_hello_str'] = $hello_str;           //加入'view_hello_str'键\nreturn $this->renderPartial('index', $data);    //使用index视图文件的同时把数组data传递过去\n```\n视图：index.php\n```\n<?php\nuse yii\\helpers\\Html;\nuse yii\\helpers\\HtmlPurifier;\n?>\n<h1><?=Html::encode($view_hello_str);?></h1>            <!--方法一：转义-->\n<h1><?=HtmlPurifier::process($view_hello_str);?></h1>   <!--方法二：过滤script-->\n```\n---\n### 布局文件（模板）\n1. 在views/layouts文件夹下新建php布局\n2. 控制器声明所用视图\n3. render()方法将视图嵌入布局并显示\n\n视图：\n```\n<h1>index</h1>\n```\n布局：\n```php\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Document</title>\n    </head>\n    <body>\n        <?=$content;?>          <!--视图插入到这里-->\n    </body>\n</html>\n```\n控制器：\n```\npublic $layout = 'common';      //用$layout声明所用的布局文件\npublic function actionShowUser()\n{\n    return $this->render('index');  \n    //render决定访问当前活动时服务器要渲染的视图，render会渲染layout，而renderPartial不会渲染\n    //render()的实际上是先renderPartial view文件，然后renderFile layoutfile,并将view文件的结果做为$content变量传入。 \n}\n```\n更新：\n```\n方案1:控制器内成员变量\npublic $layout = false; //不使用布局\npublic $layout = \"main\"; //设置使用的布局文件\n\n方案2：控制器成员方法内\n$this->layout = false; //不使用布局\n$this->layout = \"main\"; //设置使用的布局文件\n\n方案3：视图中选择布局\n$this->context->layout = false; //不使用布局\n$this->context->layout = 'main'; //设置使用的布局文件\n```\n---\n### 视图的嵌套\n控制器：\n```\npublic function actionShowUser()\n{\n    return $this->renderPartial('index');//只渲染index\n}\n```\n视图index：\n```\n<h1>hello index</h1>\n<?php\necho $this->render('about', array('v_hello_str'=>'hello world'));\n//参数一：在index视图中嵌入about视图\n//参数二：传递数组，理同“传值”\n?>\n```\n视图about：\n```\n<h1>hello about</h1>\n<h1><?=$v_hello_str;?></h1>\n```\n---\n### 数据块\n控制器：\n```\npublic $layout = 'common';\npublic function actionIndex()\n{\n    return $this->render('index');\n}\n```\n布局：\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Document</title>\n    </head>\n    <body>\n        <?php if (isset($this->blocks['block1'])) :?>\n            <?=$this->blocks['block1'];?>   <!--这句也可以直接使用-->\n        <?php else :?>\n            <h1>hello Common</h1>   <!--也可以用花括号把语句写在php标签-->\n        <?php endif?>\n        <?=$content;?>\n    </body>\n</html>\n```\n视图：\n```\n<?php $this->beginBlock('block1');?>    <!--数据块block1-->\n<h1>indexBlock</h1>\n<?php $this->endBlock();?>\n```\n---\n## 数据模型\n---\n### 连接数据库与Yii\n/config/db.php\nadvanced\\common\\config\\main-local.php\n### 什么是活动记录：\nActive Record （活动记录，以下简称AR）提供了一个面向对象的接口， 用以访问数据库中的数据。\n+ 一个 AR 类关联一张数据表， 每个 AR 对象对应表中的一行，对象的属性（即 AR 的特性Attribute）映射到数据行的对应列。\n+ 一条活动记录（AR对象）对应数据表的一行，AR对象的属性则映射该行的相应列。\n+ 使用控制器来使用AR。\n\n---\n### 活动记录的声明\n数据模型：\n```\n<?php\nnamespace app\\models;\nuse yii\\db\\ActiveRecord;\nclass Test extends ActiveRecord //类名与与表名一致\n{\n}\n```\n控制器：\n```\n<?php\nnamespace app\\controllers;\nuse yii\\web\\Controller;\nuse app\\models\\Test;//拓展创建的AR\nclass TestController extends Controller\n{   \n}\n```\n---\n### 查询 findBySql()\n```\n$sql = 'select * from test where id=1';\n$results = Test::findBySql($sql)->all();//继承自AR，将返回的每条记录包装成一个对象，将对象组装成数组，并用all()返回一个数组\nprint_r($results);\n```\n### 占位符防注入\n```\n$sql = 'select * from test where id=:id';//':id' is 占位符\n$id = '1';\n$results = Test::findBySql($sql,array(':id'=>$id))->all();\n```\n### 简化版-数组查询法 find()\n```\n$results = Test::find()\n    ->where(['id'=>1])      //id=1\n    ->all();\n    //->where(['>','id',0])   //id>0\n    //->where(['between','id',1,2])       //id>=1 and id<=2\n    //->where(['like','title','title1'])  //title like \"%title1%\"\nprint_r($results);\n```\n### 选择查询-分页\n```\nSELECT * form 表名 WHERE 条件 limit 5,10; //检索6-15条数据\n\nSELECT * form 表名 WHERE 条件 limit 5,-1; //检索6到最后一条数据(-1)\n\nSELECT * form 表名 WHERE 条件 limit 5; //检索前5条数据，换句话说，LIMIT n 等价于 LIMIT 0,n。\n\n//Yii写法：\n$query->limit(10)->offset(20);      //21开始的10条数据\n```\n### 删除\n```\n//删除第一条\n$results = Test::find()->where(['id'=>1])->all();//取出数据\n$results[0]->delete();\n//全删\nTest::deleteAll();\n//条件删除\nTest::deleteAll('id>0');\nPostCollectModel::deleteAll(['user_id'=>610,'post_id'=>10]);\n//占位符\nTest::deleteAll('id>:id',array(':id'=>0));\n```\n### 增加\n```\n$test = new Test;       //创建一个AR的对象\n$test->id = 3;\n$test->title = 'title3';\n$test->save();          //存入\n```\n### 输入合法验证\nAR：\n```\npublic function rules(){\n    return [\n        ['id','integer'],   //列名，验证器\n        ['title','string','length'=>[0,5]]\n    ];\n}\n```\n控制器：\n```\n$test->validate();              //save前进行验证，错误则中止\nif($test->hasErrors()){         //$test->getErrors()返回错误信息\n    echo 'data is error';\n    die;\n}\n```\n### 改\n```\n$test = Test::find()->where(['id'=>4])->one();  //one()只返回一个对象，可酌情替换all()\n$test->title = 'title4';\n$test->save();\n```\n### 增减updateCounters\n```\n$model 即为models对象\n例1：\n$model->updateCounters(array('count'=>1), 'id='.$model->id);//自动叠加1\n$model->updateCounters(array('count'=>-1), 'id='.$model->id);//自动递减1\n例2：\n$model = PostModel::findOne($post_id);\n$model->updateCounters(['collect'=>1]);\n```\n### 关联查询一\n根据顾客查订单（一查多）：\n```\nuse app\\models\\Order;       //引入订单表的AR\nuse app\\models\\Customer;    //顾客表\n\nclass TestController extends Controller\n{   \n    public function actionIndex()\n    {\n        //关联查询\n        $customer = Customer::find()\n        ->where(['name'=>'zhangsan'])\n        ->one();\n        \n        $orders = $customer\n            ->hasMany('app\\models\\Order',['customer_id'=>'id'])\n            //'app..'可用 Order::className 替换，好像没什么用\n            ->asArray()         //以数组方式显示,便于浏览\n            ->all();\n            \n        print_r($orders);\n    }\n}\n```\n封装查询：\nCustomer AR类：\n```\npublic function getOrder()\n{\n    $orders = $this->hasMany(Order::className,['customer_id'=>'id'])->asArray()->all();\n    //用$this代替$customer                     ↑表结构↑\n    return $orders;\n}\n```\n控制器：\n```\n$customer = Customer::find()\n        ->where(['name'=>'zhangsan'])\n        ->one();\n$orders = $customer->getOrders();\n//被封装，如果表出现变动，只需修改AR，消除了控制器和模型的耦合\n//也可以这样，调用__get()，转化成getOrders()方法，并在最后生成->all()\n//$orders = $customer->orders;//推荐写法\n//所以需要删除getOrder()最后重复的->all()\nprint_r($orders);\n```\n### 关联查询二\n根据订单查询顾客（一查一）：\nOrder：\n```\npublic function getCustomer()\n{\n    return $this\n    ->hasOne(Customer::className,['id'=>'customer_id'])\n    ->asArray();\n}\n```\nController：\n```\n$order = Order::find()->where(['id'=>1])->one();\n$customer = $order->getCustomer()->one();\n//或者这么写：\n$customer = $order->customer;\nprint_r($customer);\n```\n### 查询结果缓存\n```\n$customer = $order->customer;//取值\nunset($order->customer);    //清空\n$customer = $order->customer;//再次取值\n```\n### 多次查询优化\n```\n//select * from customer\n//select * from order where customer_id in(...)\n//加上with后，查询的是所有顾客id的集合，\n$customers = Customer::find()->with('orders')->all();\nforeach($customers as $customer){   //那么就不会调用下面的sql语句了，一共只进行2次查询\n    $orders = $customer->orders;    //select * from order where customer_id = ...\n}\n```","slug":"Yii基础","published":1,"updated":"2019-01-21T06:36:57.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642pyg000wy0oodpim0boe","content":"<hr>\n<h2 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h2><hr>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ul>\n<li><p>命名空间与引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace app\\controllers;</span><br><span class=\"line\">use yii\\web\\Controller;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命名</p>\n<ul>\n<li>控制器：以大写字母开头，加’Controller’后缀：TestController.php</li>\n<li>方法：在控制器里叫操作，’action’加大写字母开头的方法名：actionIndex()</li>\n<li>类名与文件名相同</li>\n</ul>\n</li>\n<li>访问控制器<br>访问TestController的index操作（r=控制器/操作）：<br><a href=\"http://basic/web/index.php`?r=test/index`\" target=\"_blank\" rel=\"noopener\">http://basic/web/index.php`?r=test/index`</a><br>当方法名非开头有大写时，actionShowUser()：<br><a href=\"http://basic/web/index.php`?r=test/show-user`\" target=\"_blank\" rel=\"noopener\">http://basic/web/index.php`?r=test/show-user`</a></li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h3 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h3><ul>\n<li><p>时间(年)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 重定向：</span><br><span class=\"line\">```$this-&gt;redirect([&apos;site/index&apos;]);//数组内为调用控制器+操作</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>回主页：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 返回上一个页面：</span><br><span class=\"line\">```$this-&gt;goBack();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>刷新：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 请求处理request</span><br><span class=\"line\">+ 地址栏get：GET用于信息获取，而且应该是安全的和幂等的。</span><br><span class=\"line\">地址栏：http://basic/web/index.php?r=test/index&amp;id=3</span><br><span class=\"line\">取参：</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>$request = \\YII::$app-&gt;request; //YII全局变量，以\\表根。或引入命名空间use YII;省去\\<br>echo $request-&gt;get(‘id’,20);    //when ！return，return 20，optional<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 表单post：POST表示可能修改变服务器上的资源的请求。</span><br><span class=\"line\">```$request-&gt;post(&apos;name&apos;, 2333);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>判定请求类型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ($request-&gt;isPost) &#123;</span><br><span class=\"line\">    echo &apos;This is Post method.&apos;;</span><br><span class=\"line\">&#125; elseif ($request-&gt;isGet) &#123;</span><br><span class=\"line\">    echo &apos;This is Get method.&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>IP地址</p>\n<figure class=\"highlight plain\"><figcaption><span>$request->userIp;```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 响应处理response</span><br><span class=\"line\">```$res = \\YII::$app-&gt;response;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>状态码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 头部</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>$res-&gt;headers-&gt;add(‘pragma’, ‘no-cache’);//添加html头pragma,不要缓存<br>$res-&gt;headers-&gt;set(‘pragma’, ‘max-age=5’);//修改<br>$res-&gt;headers-&gt;remove(‘pragma’);//删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 跳转</span><br></pre></td></tr></table></figure></p>\n<p>$res-&gt;headers-&gt;add(‘location’,’<a href=\"http://www.baidu.com&#39;);//跳转，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取。\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com&#39;);//跳转，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取。</a><br>$this-&gt;redirect(‘<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com</a>‘, 302);//controller跳转专用函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 下载</span><br></pre></td></tr></table></figure></p>\n<p>$res-&gt;headers-&gt;add(‘content-disposition’, ‘attachment;filename=”a.jpg”‘);//attachment附件形式<br>$res-&gt;sendFile(‘robots.txt’);//下载当前页面文件目录下的robots.txt<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### session</span><br></pre></td></tr></table></figure></p>\n<p>$session = \\YII::$app-&gt;session; //设置变量</p>\n<p>$session-&gt;open();               //开启session</p>\n<p>if($session-&gt;isActive){         //判断session是否开启<br>    echo “session is active.”;<br>}</p>\n<p>$session-&gt;set(‘user’, ‘张三’);  //设置方法一</p>\n<p>$session[‘user’] = ‘张三’;      //设置方法二</p>\n<p>echo $session[‘user’];          //取session</p>\n<p>$session-&gt;remove(‘user’);       //删除方法一</p>\n<p>unset($session[‘user’]);        //删除方法二</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### cookie</span><br></pre></td></tr></table></figure>\n<p>$cookie = \\YII::$app-&gt;cookies;  //设置变量</p>\n<p>$cookie_data = array(‘name’=&gt;’user’,’value’=’zhangsan’);</p>\n<p>$cookie-&gt;add(new Cookie($cookie_data));     //赋值，覆盖式修改</p>\n<p>$cookie-&gt;remove(‘id’);          //删除</p>\n<p>$cookies = \\YII::$app-&gt;request-&gt;cookies;    //取cookie<br>echo $cookies -&gt;getValue(‘users’,400);      //when !found’users’ return’400’ it’s optional value<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">## 视图（页面）</span><br><span class=\"line\">---</span><br><span class=\"line\">### 创建</span><br><span class=\"line\">在views目录下创建控制器同名文件夹test，小写即可。</span><br><span class=\"line\">文件夹内新建页面php，可以直接使用html代码，可添加`&lt;?php ?&gt;`标签来进行using等操作</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">### 使用</span><br><span class=\"line\">```return $this-&gt;renderPartial(&apos;index&apos;);        //使用test/index视图文件</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"传值\"><a href=\"#传值\" class=\"headerlink\" title=\"传值\"></a>传值</h3><p>控制器：TestController<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$hello_str= &quot;Hello God&quot;;</span><br><span class=\"line\">$test_arr=array(1,2);</span><br><span class=\"line\"></span><br><span class=\"line\">$data = array();                                //创建数组存放数据</span><br><span class=\"line\"></span><br><span class=\"line\">$data[&apos;view_hello_str&apos;] = $hello_str;           //加入&apos;view_hello_str&apos;键</span><br><span class=\"line\">$data[&apos;view_test_arr&apos;] = $test_arr;             //加入数组键</span><br><span class=\"line\"></span><br><span class=\"line\">return $this-&gt;renderPartial(&apos;index&apos;, $data);    //使用index视图文件并传递数据data</span><br></pre></td></tr></table></figure></p>\n<p>视图：index.php<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?=$view_hello_str;?&gt;</span><br><span class=\"line\">&lt;?=$view_test_arr[0];?&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"传值的安全问题\"><a href=\"#传值的安全问题\" class=\"headerlink\" title=\"传值的安全问题\"></a>传值的安全问题</h3><p>控制器：TestController<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$hello_str= &quot;Hello God&quot;;</span><br><span class=\"line\">$data = array();                                //创建数组</span><br><span class=\"line\">$data[&apos;view_hello_str&apos;] = $hello_str;           //加入&apos;view_hello_str&apos;键</span><br><span class=\"line\">return $this-&gt;renderPartial(&apos;index&apos;, $data);    //使用index视图文件的同时把数组data传递过去</span><br></pre></td></tr></table></figure></p>\n<p>视图：index.php<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">use yii\\helpers\\Html;</span><br><span class=\"line\">use yii\\helpers\\HtmlPurifier;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;h1&gt;&lt;?=Html::encode($view_hello_str);?&gt;&lt;/h1&gt;            &lt;!--方法一：转义--&gt;</span><br><span class=\"line\">&lt;h1&gt;&lt;?=HtmlPurifier::process($view_hello_str);?&gt;&lt;/h1&gt;   &lt;!--方法二：过滤script--&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"布局文件（模板）\"><a href=\"#布局文件（模板）\" class=\"headerlink\" title=\"布局文件（模板）\"></a>布局文件（模板）</h3><ol>\n<li>在views/layouts文件夹下新建php布局</li>\n<li>控制器声明所用视图</li>\n<li>render()方法将视图嵌入布局并显示</li>\n</ol>\n<p>视图：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;index&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p>\n<p>布局：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</span><br><span class=\"line\">        &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        <span class=\"meta\">&lt;?</span>=$content;<span class=\"meta\">?&gt;</span>          &lt;!--视图插入到这里--&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>控制器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public $layout = &apos;common&apos;;      //用$layout声明所用的布局文件</span><br><span class=\"line\">public function actionShowUser()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return $this-&gt;render(&apos;index&apos;);  </span><br><span class=\"line\">    //render决定访问当前活动时服务器要渲染的视图，render会渲染layout，而renderPartial不会渲染</span><br><span class=\"line\">    //render()的实际上是先renderPartial view文件，然后renderFile layoutfile,并将view文件的结果做为$content变量传入。 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>更新：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方案1:控制器内成员变量</span><br><span class=\"line\">public $layout = false; //不使用布局</span><br><span class=\"line\">public $layout = &quot;main&quot;; //设置使用的布局文件</span><br><span class=\"line\"></span><br><span class=\"line\">方案2：控制器成员方法内</span><br><span class=\"line\">$this-&gt;layout = false; //不使用布局</span><br><span class=\"line\">$this-&gt;layout = &quot;main&quot;; //设置使用的布局文件</span><br><span class=\"line\"></span><br><span class=\"line\">方案3：视图中选择布局</span><br><span class=\"line\">$this-&gt;context-&gt;layout = false; //不使用布局</span><br><span class=\"line\">$this-&gt;context-&gt;layout = &apos;main&apos;; //设置使用的布局文件</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"视图的嵌套\"><a href=\"#视图的嵌套\" class=\"headerlink\" title=\"视图的嵌套\"></a>视图的嵌套</h3><p>控制器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function actionShowUser()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return $this-&gt;renderPartial(&apos;index&apos;);//只渲染index</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>视图index：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;hello index&lt;/h1&gt;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo $this-&gt;render(&apos;about&apos;, array(&apos;v_hello_str&apos;=&gt;&apos;hello world&apos;));</span><br><span class=\"line\">//参数一：在index视图中嵌入about视图</span><br><span class=\"line\">//参数二：传递数组，理同“传值”</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>视图about：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;hello about&lt;/h1&gt;</span><br><span class=\"line\">&lt;h1&gt;&lt;?=$v_hello_str;?&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"数据块\"><a href=\"#数据块\" class=\"headerlink\" title=\"数据块\"></a>数据块</h3><p>控制器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public $layout = &apos;common&apos;;</span><br><span class=\"line\">public function actionIndex()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return $this-&gt;render(&apos;index&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>布局：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">        &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;?php if (isset($this-&gt;blocks[&apos;block1&apos;])) :?&gt;</span><br><span class=\"line\">            &lt;?=$this-&gt;blocks[&apos;block1&apos;];?&gt;   &lt;!--这句也可以直接使用--&gt;</span><br><span class=\"line\">        &lt;?php else :?&gt;</span><br><span class=\"line\">            &lt;h1&gt;hello Common&lt;/h1&gt;   &lt;!--也可以用花括号把语句写在php标签--&gt;</span><br><span class=\"line\">        &lt;?php endif?&gt;</span><br><span class=\"line\">        &lt;?=$content;?&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>视图：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php $this-&gt;beginBlock(&apos;block1&apos;);?&gt;    &lt;!--数据块block1--&gt;</span><br><span class=\"line\">&lt;h1&gt;indexBlock&lt;/h1&gt;</span><br><span class=\"line\">&lt;?php $this-&gt;endBlock();?&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h2><hr>\n<h3 id=\"连接数据库与Yii\"><a href=\"#连接数据库与Yii\" class=\"headerlink\" title=\"连接数据库与Yii\"></a>连接数据库与Yii</h3><p>/config/db.php<br>advanced\\common\\config\\main-local.php</p>\n<h3 id=\"什么是活动记录：\"><a href=\"#什么是活动记录：\" class=\"headerlink\" title=\"什么是活动记录：\"></a>什么是活动记录：</h3><p>Active Record （活动记录，以下简称AR）提供了一个面向对象的接口， 用以访问数据库中的数据。</p>\n<ul>\n<li>一个 AR 类关联一张数据表， 每个 AR 对象对应表中的一行，对象的属性（即 AR 的特性Attribute）映射到数据行的对应列。</li>\n<li>一条活动记录（AR对象）对应数据表的一行，AR对象的属性则映射该行的相应列。</li>\n<li>使用控制器来使用AR。</li>\n</ul>\n<hr>\n<h3 id=\"活动记录的声明\"><a href=\"#活动记录的声明\" class=\"headerlink\" title=\"活动记录的声明\"></a>活动记录的声明</h3><p>数据模型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace app\\models;</span><br><span class=\"line\">use yii\\db\\ActiveRecord;</span><br><span class=\"line\">class Test extends ActiveRecord //类名与与表名一致</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>控制器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace app\\controllers;</span><br><span class=\"line\">use yii\\web\\Controller;</span><br><span class=\"line\">use app\\models\\Test;//拓展创建的AR</span><br><span class=\"line\">class TestController extends Controller</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"查询-findBySql\"><a href=\"#查询-findBySql\" class=\"headerlink\" title=\"查询 findBySql()\"></a>查询 findBySql()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql = &apos;select * from test where id=1&apos;;</span><br><span class=\"line\">$results = Test::findBySql($sql)-&gt;all();//继承自AR，将返回的每条记录包装成一个对象，将对象组装成数组，并用all()返回一个数组</span><br><span class=\"line\">print_r($results);</span><br></pre></td></tr></table></figure>\n<h3 id=\"占位符防注入\"><a href=\"#占位符防注入\" class=\"headerlink\" title=\"占位符防注入\"></a>占位符防注入</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql = &apos;select * from test where id=:id&apos;;//&apos;:id&apos; is 占位符</span><br><span class=\"line\">$id = &apos;1&apos;;</span><br><span class=\"line\">$results = Test::findBySql($sql,array(&apos;:id&apos;=&gt;$id))-&gt;all();</span><br></pre></td></tr></table></figure>\n<h3 id=\"简化版-数组查询法-find\"><a href=\"#简化版-数组查询法-find\" class=\"headerlink\" title=\"简化版-数组查询法 find()\"></a>简化版-数组查询法 find()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$results = Test::find()</span><br><span class=\"line\">    -&gt;where([&apos;id&apos;=&gt;1])      //id=1</span><br><span class=\"line\">    -&gt;all();</span><br><span class=\"line\">    //-&gt;where([&apos;&gt;&apos;,&apos;id&apos;,0])   //id&gt;0</span><br><span class=\"line\">    //-&gt;where([&apos;between&apos;,&apos;id&apos;,1,2])       //id&gt;=1 and id&lt;=2</span><br><span class=\"line\">    //-&gt;where([&apos;like&apos;,&apos;title&apos;,&apos;title1&apos;])  //title like &quot;%title1%&quot;</span><br><span class=\"line\">print_r($results);</span><br></pre></td></tr></table></figure>\n<h3 id=\"选择查询-分页\"><a href=\"#选择查询-分页\" class=\"headerlink\" title=\"选择查询-分页\"></a>选择查询-分页</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * form 表名 WHERE 条件 limit 5,10; //检索6-15条数据</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT * form 表名 WHERE 条件 limit 5,-1; //检索6到最后一条数据(-1)</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT * form 表名 WHERE 条件 limit 5; //检索前5条数据，换句话说，LIMIT n 等价于 LIMIT 0,n。</span><br><span class=\"line\"></span><br><span class=\"line\">//Yii写法：</span><br><span class=\"line\">$query-&gt;limit(10)-&gt;offset(20);      //21开始的10条数据</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除第一条</span><br><span class=\"line\">$results = Test::find()-&gt;where([&apos;id&apos;=&gt;1])-&gt;all();//取出数据</span><br><span class=\"line\">$results[0]-&gt;delete();</span><br><span class=\"line\">//全删</span><br><span class=\"line\">Test::deleteAll();</span><br><span class=\"line\">//条件删除</span><br><span class=\"line\">Test::deleteAll(&apos;id&gt;0&apos;);</span><br><span class=\"line\">PostCollectModel::deleteAll([&apos;user_id&apos;=&gt;610,&apos;post_id&apos;=&gt;10]);</span><br><span class=\"line\">//占位符</span><br><span class=\"line\">Test::deleteAll(&apos;id&gt;:id&apos;,array(&apos;:id&apos;=&gt;0));</span><br></pre></td></tr></table></figure>\n<h3 id=\"增加\"><a href=\"#增加\" class=\"headerlink\" title=\"增加\"></a>增加</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$test = new Test;       //创建一个AR的对象</span><br><span class=\"line\">$test-&gt;id = 3;</span><br><span class=\"line\">$test-&gt;title = &apos;title3&apos;;</span><br><span class=\"line\">$test-&gt;save();          //存入</span><br></pre></td></tr></table></figure>\n<h3 id=\"输入合法验证\"><a href=\"#输入合法验证\" class=\"headerlink\" title=\"输入合法验证\"></a>输入合法验证</h3><p>AR：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function rules()&#123;</span><br><span class=\"line\">    return [</span><br><span class=\"line\">        [&apos;id&apos;,&apos;integer&apos;],   //列名，验证器</span><br><span class=\"line\">        [&apos;title&apos;,&apos;string&apos;,&apos;length&apos;=&gt;[0,5]]</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>控制器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$test-&gt;validate();              //save前进行验证，错误则中止</span><br><span class=\"line\">if($test-&gt;hasErrors())&#123;         //$test-&gt;getErrors()返回错误信息</span><br><span class=\"line\">    echo &apos;data is error&apos;;</span><br><span class=\"line\">    die;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"改\"><a href=\"#改\" class=\"headerlink\" title=\"改\"></a>改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$test = Test::find()-&gt;where([&apos;id&apos;=&gt;4])-&gt;one();  //one()只返回一个对象，可酌情替换all()</span><br><span class=\"line\">$test-&gt;title = &apos;title4&apos;;</span><br><span class=\"line\">$test-&gt;save();</span><br></pre></td></tr></table></figure>\n<h3 id=\"增减updateCounters\"><a href=\"#增减updateCounters\" class=\"headerlink\" title=\"增减updateCounters\"></a>增减updateCounters</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$model 即为models对象</span><br><span class=\"line\">例1：</span><br><span class=\"line\">$model-&gt;updateCounters(array(&apos;count&apos;=&gt;1), &apos;id=&apos;.$model-&gt;id);//自动叠加1</span><br><span class=\"line\">$model-&gt;updateCounters(array(&apos;count&apos;=&gt;-1), &apos;id=&apos;.$model-&gt;id);//自动递减1</span><br><span class=\"line\">例2：</span><br><span class=\"line\">$model = PostModel::findOne($post_id);</span><br><span class=\"line\">$model-&gt;updateCounters([&apos;collect&apos;=&gt;1]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"关联查询一\"><a href=\"#关联查询一\" class=\"headerlink\" title=\"关联查询一\"></a>关联查询一</h3><p>根据顾客查订单（一查多）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use app\\models\\Order;       //引入订单表的AR</span><br><span class=\"line\">use app\\models\\Customer;    //顾客表</span><br><span class=\"line\"></span><br><span class=\"line\">class TestController extends Controller</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    public function actionIndex()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //关联查询</span><br><span class=\"line\">        $customer = Customer::find()</span><br><span class=\"line\">        -&gt;where([&apos;name&apos;=&gt;&apos;zhangsan&apos;])</span><br><span class=\"line\">        -&gt;one();</span><br><span class=\"line\">        </span><br><span class=\"line\">        $orders = $customer</span><br><span class=\"line\">            -&gt;hasMany(&apos;app\\models\\Order&apos;,[&apos;customer_id&apos;=&gt;&apos;id&apos;])</span><br><span class=\"line\">            //&apos;app..&apos;可用 Order::className 替换，好像没什么用</span><br><span class=\"line\">            -&gt;asArray()         //以数组方式显示,便于浏览</span><br><span class=\"line\">            -&gt;all();</span><br><span class=\"line\">            </span><br><span class=\"line\">        print_r($orders);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>封装查询：<br>Customer AR类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function getOrder()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $orders = $this-&gt;hasMany(Order::className,[&apos;customer_id&apos;=&gt;&apos;id&apos;])-&gt;asArray()-&gt;all();</span><br><span class=\"line\">    //用$this代替$customer                     ↑表结构↑</span><br><span class=\"line\">    return $orders;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>控制器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$customer = Customer::find()</span><br><span class=\"line\">        -&gt;where([&apos;name&apos;=&gt;&apos;zhangsan&apos;])</span><br><span class=\"line\">        -&gt;one();</span><br><span class=\"line\">$orders = $customer-&gt;getOrders();</span><br><span class=\"line\">//被封装，如果表出现变动，只需修改AR，消除了控制器和模型的耦合</span><br><span class=\"line\">//也可以这样，调用__get()，转化成getOrders()方法，并在最后生成-&gt;all()</span><br><span class=\"line\">//$orders = $customer-&gt;orders;//推荐写法</span><br><span class=\"line\">//所以需要删除getOrder()最后重复的-&gt;all()</span><br><span class=\"line\">print_r($orders);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"关联查询二\"><a href=\"#关联查询二\" class=\"headerlink\" title=\"关联查询二\"></a>关联查询二</h3><p>根据订单查询顾客（一查一）：<br>Order：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function getCustomer()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return $this</span><br><span class=\"line\">    -&gt;hasOne(Customer::className,[&apos;id&apos;=&gt;&apos;customer_id&apos;])</span><br><span class=\"line\">    -&gt;asArray();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Controller：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$order = Order::find()-&gt;where([&apos;id&apos;=&gt;1])-&gt;one();</span><br><span class=\"line\">$customer = $order-&gt;getCustomer()-&gt;one();</span><br><span class=\"line\">//或者这么写：</span><br><span class=\"line\">$customer = $order-&gt;customer;</span><br><span class=\"line\">print_r($customer);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询结果缓存\"><a href=\"#查询结果缓存\" class=\"headerlink\" title=\"查询结果缓存\"></a>查询结果缓存</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$customer = $order-&gt;customer;//取值</span><br><span class=\"line\">unset($order-&gt;customer);    //清空</span><br><span class=\"line\">$customer = $order-&gt;customer;//再次取值</span><br></pre></td></tr></table></figure>\n<h3 id=\"多次查询优化\"><a href=\"#多次查询优化\" class=\"headerlink\" title=\"多次查询优化\"></a>多次查询优化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//select * from customer</span><br><span class=\"line\">//select * from order where customer_id in(...)</span><br><span class=\"line\">//加上with后，查询的是所有顾客id的集合，</span><br><span class=\"line\">$customers = Customer::find()-&gt;with(&apos;orders&apos;)-&gt;all();</span><br><span class=\"line\">foreach($customers as $customer)&#123;   //那么就不会调用下面的sql语句了，一共只进行2次查询</span><br><span class=\"line\">    $orders = $customer-&gt;orders;    //select * from order where customer_id = ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h2><hr>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ul>\n<li><p>命名空间与引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace app\\controllers;</span><br><span class=\"line\">use yii\\web\\Controller;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命名</p>\n<ul>\n<li>控制器：以大写字母开头，加’Controller’后缀：TestController.php</li>\n<li>方法：在控制器里叫操作，’action’加大写字母开头的方法名：actionIndex()</li>\n<li>类名与文件名相同</li>\n</ul>\n</li>\n<li>访问控制器<br>访问TestController的index操作（r=控制器/操作）：<br><a href=\"http://basic/web/index.php`?r=test/index`\" target=\"_blank\" rel=\"noopener\">http://basic/web/index.php`?r=test/index`</a><br>当方法名非开头有大写时，actionShowUser()：<br><a href=\"http://basic/web/index.php`?r=test/show-user`\" target=\"_blank\" rel=\"noopener\">http://basic/web/index.php`?r=test/show-user`</a></li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><h3 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h3><ul>\n<li><p>时间(年)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 重定向：</span><br><span class=\"line\">```$this-&gt;redirect([&apos;site/index&apos;]);//数组内为调用控制器+操作</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>回主页：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 返回上一个页面：</span><br><span class=\"line\">```$this-&gt;goBack();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>刷新：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 请求处理request</span><br><span class=\"line\">+ 地址栏get：GET用于信息获取，而且应该是安全的和幂等的。</span><br><span class=\"line\">地址栏：http://basic/web/index.php?r=test/index&amp;id=3</span><br><span class=\"line\">取参：</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>$request = \\YII::$app-&gt;request; //YII全局变量，以\\表根。或引入命名空间use YII;省去\\<br>echo $request-&gt;get(‘id’,20);    //when ！return，return 20，optional<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 表单post：POST表示可能修改变服务器上的资源的请求。</span><br><span class=\"line\">```$request-&gt;post(&apos;name&apos;, 2333);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>判定请求类型：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ($request-&gt;isPost) &#123;</span><br><span class=\"line\">    echo &apos;This is Post method.&apos;;</span><br><span class=\"line\">&#125; elseif ($request-&gt;isGet) &#123;</span><br><span class=\"line\">    echo &apos;This is Get method.&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>IP地址</p>\n<figure class=\"highlight plain\"><figcaption><span>$request->userIp;```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 响应处理response</span><br><span class=\"line\">```$res = \\YII::$app-&gt;response;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>状态码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 头部</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>$res-&gt;headers-&gt;add(‘pragma’, ‘no-cache’);//添加html头pragma,不要缓存<br>$res-&gt;headers-&gt;set(‘pragma’, ‘max-age=5’);//修改<br>$res-&gt;headers-&gt;remove(‘pragma’);//删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 跳转</span><br></pre></td></tr></table></figure></p>\n<p>$res-&gt;headers-&gt;add(‘location’,’<a href=\"http://www.baidu.com&#39;);//跳转，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取。\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com&#39;);//跳转，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取。</a><br>$this-&gt;redirect(‘<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com</a>‘, 302);//controller跳转专用函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 下载</span><br></pre></td></tr></table></figure></p>\n<p>$res-&gt;headers-&gt;add(‘content-disposition’, ‘attachment;filename=”a.jpg”‘);//attachment附件形式<br>$res-&gt;sendFile(‘robots.txt’);//下载当前页面文件目录下的robots.txt<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### session</span><br></pre></td></tr></table></figure></p>\n<p>$session = \\YII::$app-&gt;session; //设置变量</p>\n<p>$session-&gt;open();               //开启session</p>\n<p>if($session-&gt;isActive){         //判断session是否开启<br>    echo “session is active.”;<br>}</p>\n<p>$session-&gt;set(‘user’, ‘张三’);  //设置方法一</p>\n<p>$session[‘user’] = ‘张三’;      //设置方法二</p>\n<p>echo $session[‘user’];          //取session</p>\n<p>$session-&gt;remove(‘user’);       //删除方法一</p>\n<p>unset($session[‘user’]);        //删除方法二</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### cookie</span><br></pre></td></tr></table></figure>\n<p>$cookie = \\YII::$app-&gt;cookies;  //设置变量</p>\n<p>$cookie_data = array(‘name’=&gt;’user’,’value’=’zhangsan’);</p>\n<p>$cookie-&gt;add(new Cookie($cookie_data));     //赋值，覆盖式修改</p>\n<p>$cookie-&gt;remove(‘id’);          //删除</p>\n<p>$cookies = \\YII::$app-&gt;request-&gt;cookies;    //取cookie<br>echo $cookies -&gt;getValue(‘users’,400);      //when !found’users’ return’400’ it’s optional value<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">## 视图（页面）</span><br><span class=\"line\">---</span><br><span class=\"line\">### 创建</span><br><span class=\"line\">在views目录下创建控制器同名文件夹test，小写即可。</span><br><span class=\"line\">文件夹内新建页面php，可以直接使用html代码，可添加`&lt;?php ?&gt;`标签来进行using等操作</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">### 使用</span><br><span class=\"line\">```return $this-&gt;renderPartial(&apos;index&apos;);        //使用test/index视图文件</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"传值\"><a href=\"#传值\" class=\"headerlink\" title=\"传值\"></a>传值</h3><p>控制器：TestController<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$hello_str= &quot;Hello God&quot;;</span><br><span class=\"line\">$test_arr=array(1,2);</span><br><span class=\"line\"></span><br><span class=\"line\">$data = array();                                //创建数组存放数据</span><br><span class=\"line\"></span><br><span class=\"line\">$data[&apos;view_hello_str&apos;] = $hello_str;           //加入&apos;view_hello_str&apos;键</span><br><span class=\"line\">$data[&apos;view_test_arr&apos;] = $test_arr;             //加入数组键</span><br><span class=\"line\"></span><br><span class=\"line\">return $this-&gt;renderPartial(&apos;index&apos;, $data);    //使用index视图文件并传递数据data</span><br></pre></td></tr></table></figure></p>\n<p>视图：index.php<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?=$view_hello_str;?&gt;</span><br><span class=\"line\">&lt;?=$view_test_arr[0];?&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"传值的安全问题\"><a href=\"#传值的安全问题\" class=\"headerlink\" title=\"传值的安全问题\"></a>传值的安全问题</h3><p>控制器：TestController<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$hello_str= &quot;Hello God&quot;;</span><br><span class=\"line\">$data = array();                                //创建数组</span><br><span class=\"line\">$data[&apos;view_hello_str&apos;] = $hello_str;           //加入&apos;view_hello_str&apos;键</span><br><span class=\"line\">return $this-&gt;renderPartial(&apos;index&apos;, $data);    //使用index视图文件的同时把数组data传递过去</span><br></pre></td></tr></table></figure></p>\n<p>视图：index.php<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">use yii\\helpers\\Html;</span><br><span class=\"line\">use yii\\helpers\\HtmlPurifier;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;h1&gt;&lt;?=Html::encode($view_hello_str);?&gt;&lt;/h1&gt;            &lt;!--方法一：转义--&gt;</span><br><span class=\"line\">&lt;h1&gt;&lt;?=HtmlPurifier::process($view_hello_str);?&gt;&lt;/h1&gt;   &lt;!--方法二：过滤script--&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"布局文件（模板）\"><a href=\"#布局文件（模板）\" class=\"headerlink\" title=\"布局文件（模板）\"></a>布局文件（模板）</h3><ol>\n<li>在views/layouts文件夹下新建php布局</li>\n<li>控制器声明所用视图</li>\n<li>render()方法将视图嵌入布局并显示</li>\n</ol>\n<p>视图：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;index&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p>\n<p>布局：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</span><br><span class=\"line\">        &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        <span class=\"meta\">&lt;?</span>=$content;<span class=\"meta\">?&gt;</span>          &lt;!--视图插入到这里--&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>控制器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public $layout = &apos;common&apos;;      //用$layout声明所用的布局文件</span><br><span class=\"line\">public function actionShowUser()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return $this-&gt;render(&apos;index&apos;);  </span><br><span class=\"line\">    //render决定访问当前活动时服务器要渲染的视图，render会渲染layout，而renderPartial不会渲染</span><br><span class=\"line\">    //render()的实际上是先renderPartial view文件，然后renderFile layoutfile,并将view文件的结果做为$content变量传入。 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>更新：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方案1:控制器内成员变量</span><br><span class=\"line\">public $layout = false; //不使用布局</span><br><span class=\"line\">public $layout = &quot;main&quot;; //设置使用的布局文件</span><br><span class=\"line\"></span><br><span class=\"line\">方案2：控制器成员方法内</span><br><span class=\"line\">$this-&gt;layout = false; //不使用布局</span><br><span class=\"line\">$this-&gt;layout = &quot;main&quot;; //设置使用的布局文件</span><br><span class=\"line\"></span><br><span class=\"line\">方案3：视图中选择布局</span><br><span class=\"line\">$this-&gt;context-&gt;layout = false; //不使用布局</span><br><span class=\"line\">$this-&gt;context-&gt;layout = &apos;main&apos;; //设置使用的布局文件</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"视图的嵌套\"><a href=\"#视图的嵌套\" class=\"headerlink\" title=\"视图的嵌套\"></a>视图的嵌套</h3><p>控制器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function actionShowUser()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return $this-&gt;renderPartial(&apos;index&apos;);//只渲染index</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>视图index：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;hello index&lt;/h1&gt;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo $this-&gt;render(&apos;about&apos;, array(&apos;v_hello_str&apos;=&gt;&apos;hello world&apos;));</span><br><span class=\"line\">//参数一：在index视图中嵌入about视图</span><br><span class=\"line\">//参数二：传递数组，理同“传值”</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<p>视图about：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;hello about&lt;/h1&gt;</span><br><span class=\"line\">&lt;h1&gt;&lt;?=$v_hello_str;?&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"数据块\"><a href=\"#数据块\" class=\"headerlink\" title=\"数据块\"></a>数据块</h3><p>控制器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public $layout = &apos;common&apos;;</span><br><span class=\"line\">public function actionIndex()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return $this-&gt;render(&apos;index&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>布局：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">        &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;?php if (isset($this-&gt;blocks[&apos;block1&apos;])) :?&gt;</span><br><span class=\"line\">            &lt;?=$this-&gt;blocks[&apos;block1&apos;];?&gt;   &lt;!--这句也可以直接使用--&gt;</span><br><span class=\"line\">        &lt;?php else :?&gt;</span><br><span class=\"line\">            &lt;h1&gt;hello Common&lt;/h1&gt;   &lt;!--也可以用花括号把语句写在php标签--&gt;</span><br><span class=\"line\">        &lt;?php endif?&gt;</span><br><span class=\"line\">        &lt;?=$content;?&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>视图：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php $this-&gt;beginBlock(&apos;block1&apos;);?&gt;    &lt;!--数据块block1--&gt;</span><br><span class=\"line\">&lt;h1&gt;indexBlock&lt;/h1&gt;</span><br><span class=\"line\">&lt;?php $this-&gt;endBlock();?&gt;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h2><hr>\n<h3 id=\"连接数据库与Yii\"><a href=\"#连接数据库与Yii\" class=\"headerlink\" title=\"连接数据库与Yii\"></a>连接数据库与Yii</h3><p>/config/db.php<br>advanced\\common\\config\\main-local.php</p>\n<h3 id=\"什么是活动记录：\"><a href=\"#什么是活动记录：\" class=\"headerlink\" title=\"什么是活动记录：\"></a>什么是活动记录：</h3><p>Active Record （活动记录，以下简称AR）提供了一个面向对象的接口， 用以访问数据库中的数据。</p>\n<ul>\n<li>一个 AR 类关联一张数据表， 每个 AR 对象对应表中的一行，对象的属性（即 AR 的特性Attribute）映射到数据行的对应列。</li>\n<li>一条活动记录（AR对象）对应数据表的一行，AR对象的属性则映射该行的相应列。</li>\n<li>使用控制器来使用AR。</li>\n</ul>\n<hr>\n<h3 id=\"活动记录的声明\"><a href=\"#活动记录的声明\" class=\"headerlink\" title=\"活动记录的声明\"></a>活动记录的声明</h3><p>数据模型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace app\\models;</span><br><span class=\"line\">use yii\\db\\ActiveRecord;</span><br><span class=\"line\">class Test extends ActiveRecord //类名与与表名一致</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>控制器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace app\\controllers;</span><br><span class=\"line\">use yii\\web\\Controller;</span><br><span class=\"line\">use app\\models\\Test;//拓展创建的AR</span><br><span class=\"line\">class TestController extends Controller</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"查询-findBySql\"><a href=\"#查询-findBySql\" class=\"headerlink\" title=\"查询 findBySql()\"></a>查询 findBySql()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql = &apos;select * from test where id=1&apos;;</span><br><span class=\"line\">$results = Test::findBySql($sql)-&gt;all();//继承自AR，将返回的每条记录包装成一个对象，将对象组装成数组，并用all()返回一个数组</span><br><span class=\"line\">print_r($results);</span><br></pre></td></tr></table></figure>\n<h3 id=\"占位符防注入\"><a href=\"#占位符防注入\" class=\"headerlink\" title=\"占位符防注入\"></a>占位符防注入</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql = &apos;select * from test where id=:id&apos;;//&apos;:id&apos; is 占位符</span><br><span class=\"line\">$id = &apos;1&apos;;</span><br><span class=\"line\">$results = Test::findBySql($sql,array(&apos;:id&apos;=&gt;$id))-&gt;all();</span><br></pre></td></tr></table></figure>\n<h3 id=\"简化版-数组查询法-find\"><a href=\"#简化版-数组查询法-find\" class=\"headerlink\" title=\"简化版-数组查询法 find()\"></a>简化版-数组查询法 find()</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$results = Test::find()</span><br><span class=\"line\">    -&gt;where([&apos;id&apos;=&gt;1])      //id=1</span><br><span class=\"line\">    -&gt;all();</span><br><span class=\"line\">    //-&gt;where([&apos;&gt;&apos;,&apos;id&apos;,0])   //id&gt;0</span><br><span class=\"line\">    //-&gt;where([&apos;between&apos;,&apos;id&apos;,1,2])       //id&gt;=1 and id&lt;=2</span><br><span class=\"line\">    //-&gt;where([&apos;like&apos;,&apos;title&apos;,&apos;title1&apos;])  //title like &quot;%title1%&quot;</span><br><span class=\"line\">print_r($results);</span><br></pre></td></tr></table></figure>\n<h3 id=\"选择查询-分页\"><a href=\"#选择查询-分页\" class=\"headerlink\" title=\"选择查询-分页\"></a>选择查询-分页</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * form 表名 WHERE 条件 limit 5,10; //检索6-15条数据</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT * form 表名 WHERE 条件 limit 5,-1; //检索6到最后一条数据(-1)</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT * form 表名 WHERE 条件 limit 5; //检索前5条数据，换句话说，LIMIT n 等价于 LIMIT 0,n。</span><br><span class=\"line\"></span><br><span class=\"line\">//Yii写法：</span><br><span class=\"line\">$query-&gt;limit(10)-&gt;offset(20);      //21开始的10条数据</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除第一条</span><br><span class=\"line\">$results = Test::find()-&gt;where([&apos;id&apos;=&gt;1])-&gt;all();//取出数据</span><br><span class=\"line\">$results[0]-&gt;delete();</span><br><span class=\"line\">//全删</span><br><span class=\"line\">Test::deleteAll();</span><br><span class=\"line\">//条件删除</span><br><span class=\"line\">Test::deleteAll(&apos;id&gt;0&apos;);</span><br><span class=\"line\">PostCollectModel::deleteAll([&apos;user_id&apos;=&gt;610,&apos;post_id&apos;=&gt;10]);</span><br><span class=\"line\">//占位符</span><br><span class=\"line\">Test::deleteAll(&apos;id&gt;:id&apos;,array(&apos;:id&apos;=&gt;0));</span><br></pre></td></tr></table></figure>\n<h3 id=\"增加\"><a href=\"#增加\" class=\"headerlink\" title=\"增加\"></a>增加</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$test = new Test;       //创建一个AR的对象</span><br><span class=\"line\">$test-&gt;id = 3;</span><br><span class=\"line\">$test-&gt;title = &apos;title3&apos;;</span><br><span class=\"line\">$test-&gt;save();          //存入</span><br></pre></td></tr></table></figure>\n<h3 id=\"输入合法验证\"><a href=\"#输入合法验证\" class=\"headerlink\" title=\"输入合法验证\"></a>输入合法验证</h3><p>AR：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function rules()&#123;</span><br><span class=\"line\">    return [</span><br><span class=\"line\">        [&apos;id&apos;,&apos;integer&apos;],   //列名，验证器</span><br><span class=\"line\">        [&apos;title&apos;,&apos;string&apos;,&apos;length&apos;=&gt;[0,5]]</span><br><span class=\"line\">    ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>控制器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$test-&gt;validate();              //save前进行验证，错误则中止</span><br><span class=\"line\">if($test-&gt;hasErrors())&#123;         //$test-&gt;getErrors()返回错误信息</span><br><span class=\"line\">    echo &apos;data is error&apos;;</span><br><span class=\"line\">    die;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"改\"><a href=\"#改\" class=\"headerlink\" title=\"改\"></a>改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$test = Test::find()-&gt;where([&apos;id&apos;=&gt;4])-&gt;one();  //one()只返回一个对象，可酌情替换all()</span><br><span class=\"line\">$test-&gt;title = &apos;title4&apos;;</span><br><span class=\"line\">$test-&gt;save();</span><br></pre></td></tr></table></figure>\n<h3 id=\"增减updateCounters\"><a href=\"#增减updateCounters\" class=\"headerlink\" title=\"增减updateCounters\"></a>增减updateCounters</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$model 即为models对象</span><br><span class=\"line\">例1：</span><br><span class=\"line\">$model-&gt;updateCounters(array(&apos;count&apos;=&gt;1), &apos;id=&apos;.$model-&gt;id);//自动叠加1</span><br><span class=\"line\">$model-&gt;updateCounters(array(&apos;count&apos;=&gt;-1), &apos;id=&apos;.$model-&gt;id);//自动递减1</span><br><span class=\"line\">例2：</span><br><span class=\"line\">$model = PostModel::findOne($post_id);</span><br><span class=\"line\">$model-&gt;updateCounters([&apos;collect&apos;=&gt;1]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"关联查询一\"><a href=\"#关联查询一\" class=\"headerlink\" title=\"关联查询一\"></a>关联查询一</h3><p>根据顾客查订单（一查多）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use app\\models\\Order;       //引入订单表的AR</span><br><span class=\"line\">use app\\models\\Customer;    //顾客表</span><br><span class=\"line\"></span><br><span class=\"line\">class TestController extends Controller</span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    public function actionIndex()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //关联查询</span><br><span class=\"line\">        $customer = Customer::find()</span><br><span class=\"line\">        -&gt;where([&apos;name&apos;=&gt;&apos;zhangsan&apos;])</span><br><span class=\"line\">        -&gt;one();</span><br><span class=\"line\">        </span><br><span class=\"line\">        $orders = $customer</span><br><span class=\"line\">            -&gt;hasMany(&apos;app\\models\\Order&apos;,[&apos;customer_id&apos;=&gt;&apos;id&apos;])</span><br><span class=\"line\">            //&apos;app..&apos;可用 Order::className 替换，好像没什么用</span><br><span class=\"line\">            -&gt;asArray()         //以数组方式显示,便于浏览</span><br><span class=\"line\">            -&gt;all();</span><br><span class=\"line\">            </span><br><span class=\"line\">        print_r($orders);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>封装查询：<br>Customer AR类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function getOrder()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $orders = $this-&gt;hasMany(Order::className,[&apos;customer_id&apos;=&gt;&apos;id&apos;])-&gt;asArray()-&gt;all();</span><br><span class=\"line\">    //用$this代替$customer                     ↑表结构↑</span><br><span class=\"line\">    return $orders;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>控制器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$customer = Customer::find()</span><br><span class=\"line\">        -&gt;where([&apos;name&apos;=&gt;&apos;zhangsan&apos;])</span><br><span class=\"line\">        -&gt;one();</span><br><span class=\"line\">$orders = $customer-&gt;getOrders();</span><br><span class=\"line\">//被封装，如果表出现变动，只需修改AR，消除了控制器和模型的耦合</span><br><span class=\"line\">//也可以这样，调用__get()，转化成getOrders()方法，并在最后生成-&gt;all()</span><br><span class=\"line\">//$orders = $customer-&gt;orders;//推荐写法</span><br><span class=\"line\">//所以需要删除getOrder()最后重复的-&gt;all()</span><br><span class=\"line\">print_r($orders);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"关联查询二\"><a href=\"#关联查询二\" class=\"headerlink\" title=\"关联查询二\"></a>关联查询二</h3><p>根据订单查询顾客（一查一）：<br>Order：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public function getCustomer()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return $this</span><br><span class=\"line\">    -&gt;hasOne(Customer::className,[&apos;id&apos;=&gt;&apos;customer_id&apos;])</span><br><span class=\"line\">    -&gt;asArray();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Controller：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$order = Order::find()-&gt;where([&apos;id&apos;=&gt;1])-&gt;one();</span><br><span class=\"line\">$customer = $order-&gt;getCustomer()-&gt;one();</span><br><span class=\"line\">//或者这么写：</span><br><span class=\"line\">$customer = $order-&gt;customer;</span><br><span class=\"line\">print_r($customer);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询结果缓存\"><a href=\"#查询结果缓存\" class=\"headerlink\" title=\"查询结果缓存\"></a>查询结果缓存</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$customer = $order-&gt;customer;//取值</span><br><span class=\"line\">unset($order-&gt;customer);    //清空</span><br><span class=\"line\">$customer = $order-&gt;customer;//再次取值</span><br></pre></td></tr></table></figure>\n<h3 id=\"多次查询优化\"><a href=\"#多次查询优化\" class=\"headerlink\" title=\"多次查询优化\"></a>多次查询优化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//select * from customer</span><br><span class=\"line\">//select * from order where customer_id in(...)</span><br><span class=\"line\">//加上with后，查询的是所有顾客id的集合，</span><br><span class=\"line\">$customers = Customer::find()-&gt;with(&apos;orders&apos;)-&gt;all();</span><br><span class=\"line\">foreach($customers as $customer)&#123;   //那么就不会调用下面的sql语句了，一共只进行2次查询</span><br><span class=\"line\">    $orders = $customer-&gt;orders;    //select * from order where customer_id = ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"博客系统实战","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n## 1.基础配置\n---\n### 1.1高级版：初始化-开发环境\n---\n### 1.2连接数据库\nbasic/config/db.php 或\nadvanced\\common\\config\\main-local.php\n\n<!-- more -->\n---\n### 1.3修改HOSTS、服务器配置\n```\n<VirtualHost *:80>\n\tServerName localhost\n\tDocumentRoot I:/ProgramFiles/wamp64/www\n\t<Directory  \"I:/ProgramFiles/wamp64/www/\">\n\t\tOptions +Indexes +Includes +FollowSymLinks +MultiViews\n\t\tAllowOverride All\n\t\t#使用.htaccess文件作为配置\n\t\tRequire local\n\t\t# Require all granted\n\t\t# 换上这句即可局域网访问\n\t</Directory>\n</VirtualHost>\n```\n---\n### 1.4路由配置优化\n1.去掉index.php\n将下面代码添加至`/web/.htaccess`中或添加至服务器路由配置`<Directory  \"\"></Directory>`中\n```\n# 开启 mod_rewrite 用于美化 URL 功能的支持（译注：对应 pretty URL 选项）\nRewriteEngine on\n# 如果请求的是真实存在的文件或目录，直接访问\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\n# 如果请求的不是真实文件或目录，分发请求至 index.php\nRewriteRule . index.php\n```\n2.路由优化\n将下面的代码添加至`frontend\\config\\main.php` `components`中\n```\n'urlManager'=>[\n\n             'enablePrettyUrl' => true, //对url进行美化\n\n             'showScriptName' => false,//隐藏index.php\n\n            //  'suffix' => '.html',//后缀\n\n            //  'enableStrictParsing'=>FALSE,//不要求网址严格匹配，则不需要输入rules\n\n            //  'rules' => []//网址匹配规则\n\n        ],\n```\n---\n### 1.5语言包配置\n注意大小写\n1.开启语言`frontend\\config\\main.php` `return[]`加入\n```'language' => 'zh-CN',//这时已经可以使用自带的部分翻译```\n2.添加自己的词库配置到`components`中\n```\n'i18n' => [\n            'translations' => [\n                '*' => [\n                    'class' => 'yii\\i18n\\PhpMessageSource',\n                    // 'basePath' => '/messages',//默认\n                    'fileMap' => [\n                        'common' => 'common.php',//有多个包可以并列下去\n                    ],\n                ],\n            ],\n        ],\n```\n3.创建自定义的语言包`frontend/messages/zh-CN/common.php`，名字和上面对应\n```\n<?php\nreturn[\n    'Blog'=>'博客',\n];\n```\n4.使用\n1:main视图中\n```\n['label' => 'Home', 'url' => ['/site/index']],\n//改成\n['label' =>Yii::t('yii','Home'), 'url' => ['/site/index']],\n//使用了yii自带的语言包，同理：\n['label' =>Yii::t('common','Home'), 'url' => ['/site/index']],\n//就使用了自定义的语言包\n```\n2:对于视图中`<?= $form->field($model, 'email') ?>`格式，在模型中添加翻译：\n```\npublic function attributeLabels()\n{\n    return[\n        'username'=>'用户名',\n        'email'=>\\Yii::t('common', 'Email'),\n    ];\n}\n```\n---\n### 1.6 独立的用户系统\n\n#### 1.6.1 模型的区分\n`models`分为`***Form.php`表单模型和`User.php`这种数据模型\n\n#### 1.6.2设计思路\n1. 前后台数据表分离：user&admin\n2. 代码调整\n 1. 表单模型放在前后台中，`数据模型`放在common（移动LoginForm.php到前后台修改命名空间）\n 2. 配置文件`config/main.php`\n 3. 修改`表单模型`里的数据模型对应\n 4. 前后台`站点控制器`的表单use的命名空间\n 5. 语言包\n\n---\n## 2. 前台开发\n---\n### 2.1 前台布局\n在main.php框架中：\n#### 2.1.1 菜单导航\n+ 删除修改导航栏目改成left/rightMenus\n+ 修改l/r相关代码\n#### 登陆显示\n+ 放入头像\n`'label' => '<img src =\"。。。\">',`\n为后期方便，位置调用参数显示，在config/params.php中加入\n```\n'avatar' => [\n        'small' => '/statics/images/avatar/small.jpg',\n    ]\n```\n+ 在对应的`Nav::widget()`中加入`'encodeLabels'=>false,`关闭代码过滤\n+ 修改对应样式css文件\n+ `linkOptions`：添加词缀，每个`'label'`是一个`<a>`。\n+ 添加`'items'`下拉框\n\n#### 2.1.2 引入font-awesome\n1. 放入文件夹到css下\n2. 在`assets/AppAsset.php`静态资源管理中添加min.css引用\n```\n$rightMenus[] = [\n    'label' => '<img src =\"'.Yii::$app->params['avatar']['small'].'\" alt=\"'.Yii::$app->user->identity->username.'\">',\n    'linkOptions' => ['class'=>'avatar'],\n    'items' => [\n        ['label' => '<i class=\"fa fa-sign-out\"></i> 退出','url' => ['/site/logout'],'linkOptions' => ['data-method'=>'post']],\n    ],\n];\n```\n---\n### 2.2 登录注册\n#### 2.2.1 重复密码&验证码\n+ SignupForm里加入对应字段、配置\n```\npublic $rePassword;\npublic $verifyCode;\n\npublic function rules()\n{\n    return [\n        ['username', 'match','pattern'=>'/^[(\\x{4E00}-\\x{9FA5})a-zA-Z]+[(\\x{4E00}-\\x{9FA5})a-zA-Z_\\d]*$/u','message'=>'用户名由字母，汉字，数字，下划线组成，且不能以数字和下划线开头。'],\n    \n        [['password','rePassword'], 'required'],\n        [['password','rePassword'], 'string', 'min' => 6],\n        ['rePassword','compare','compareAttribute'=>'password','message'=>\\Yii::t('common', 'Tow times the password is not consitent.')],\n    \n        ['verifyCode', 'captcha'],\n    ];\n}\npublic function attributeLabels()\n{\n    return[\n        'rePassword'=>'重复密码',\n        'verifyCode'=>'验证码',\n    ];\n}\n```\n+ 视图中加入对应输入框\n\n```\nuse yii\\captcha\\Captcha;\n//--------------------------\n<?= $form->field($model, 'rePassword')->passwordInput() ?>\n\n<?= $form->field($model, 'verifyCode')->widget(Captcha::ClassName()) ?>\n```\n---\n### 2.3创建文章控制器和数据表\n1. 设置前台控制器基类\n 1. 创建`base/BaseController.php`和`PostController`控制器\n 2. 使`SiteController`、`PostController`继承`BaseController`\n2. 创建`post/index.php`视图\n3. 创建数据表\n\n---\n### 2.4创建文章模型Form&Model\n1. Gii在common里创建数据模型`PostModel`(可以使用语言包)\n2. 设置公共数据模型基类\n 1. 创建`base\\BaseModel.php`\n 2. 其他Model`use`&`extends`基类模型\n3. 创建`PostForm`表单模型\n\n---\n### 2.5创建文章功能\n#### 2.5.1表单生成\n1. 在文章控制器`PostController`中加入创建文章`Create`操作\n2. `post`视图文件夹中创建`create`页面\n 1. 面包屑\n 2. 表单（字段限于`PostForm`中定义的）\n<br>\n\n#### 2.5.2分类表单\n1. 创建分类模型`CatModel`\n2. 获取分类数据\n 1. 修改模型继承\n 2. 创建取数据方法`getAllCats()`\n 3. 在控制器调用取数据方法并渲染\n<br>\n\n#### 2.5.3组件-标签图上传\n- 按说明下载安装图片上传拓展\n `http://www.yii-china.com/post/detail/15.html`\n<br>\n\n#### 2.5.4组件-富文本编辑器\n- 按说明下载安装拓展\n `http://www.yii-china.com/post/detail/3.html`\n<br>\n\n#### 2.5.5组件-标签\n- 从教程资源包中取出tags放入common\\widgets\n- 编辑`create`视图和样式\n<br>\n\n#### 2.5.6定义场景与文章创建逻辑\n创建应用：场景\n场景：不同场景能使用的列不同\n1. 在表单模型中创建场景：\n 1. 定义常量作为场景名`const SCENARIOS_UPDATE = 'update'；`\n 2. 重写`scenarios()`\n 3. 在`rules()`里`on`要应用的场景\n2. 在控制器的`create`行为中使用场景\n 1. 定义表单要使用的场景\n 2. 使用表单模型中的create事务\n <br>\n\n#### 2.5.7文章create事务方法\n事务：作为单个逻辑工作单元执行的一系列操作(数据库概念)\n在表单模型创建`create`事务：\n1. 表单模型use数据模型\n2. 给数据模型对象赋值\n3. save()\n4. 设计`_getSummary()`函数截取文章摘要\n<br>\n\n#### 2.5.8文章创建后-使用事件\n```\npublic function _eventAfterCreate($data)\n{\n    //向常量事件中添加(绑定)事件(事件名,[对象,方法],参数)\n    $this->on(self::EVENT_AFTER_CREATE,[$this,'_eventAddTag'],$data);\n    //触发事件\n    $this->trigger(self::EVENT_AFTER_CREATE);\n}\n```\n<br>\n\n#### 2.5.9标签功能\n1. 创建标签表单模型`TagForm`\n2. 生成文章-表单关系数据模型`RelationPostTagModel`\n3. 在文章表单`PostForm`code 添加标签`_eventAddTag`函数\n```\npublic function _eventAddTag($event)\n{\n    //保存标签\n\n    //删除原先的关联\n\n    //批量保存文章和标签的关联关系\n\n        //批量插入\n\n}\n```\n---\n### 2.6文章展示\n#### 2.6.1文章详情\n1. 控制器中加入`actionView($id)`\n2. 创建`views/post/view.php`\n3. `PostForm`添加`getViewById($id)`访问文章\n 1. 查询\n 2. 处理格式\n 3. 返回\n4. `PostModel`&`RelationPostTagModel`中添加`getRelate()`&`getTag()`\n\n#### 2.6.2文章统计\n1. 建表、`PostExtendModel`\n2. 在控制器-文章详情操作里添加`upCounter()`\n3. 在model中code`upCounter()`\n4. `PostForm`里添加查询关联`with('relate.tag', 'extend')`\n5. `PostModel`里添加`getExtend()`关联\n6. view添加浏览的数据`<?=isset($data['extend']['browser'])?$data['extend']['browser']:0?>`\n\n#### 2.6.3组件-文章列表\n小部件：通过封装组件实现功能\n部件调用表单，表单调用模型，在要使用的视图中use`yii\\base\\Widget;`和要使用的部件，在要展现的地方插入`<?=部件名::widget();?>`\n1. 创建挂件文件结构\n2. code文章列表组件`PostWidget`调用`PostForm`的`getList()`\n3. 在文章表单添加 获取文章列表`getList()`调用`_formatList`&`BaseModel`的`getPages()`\n\n---\n### 2.7博客首页\n#### 2.7.1组件-图片轮播\n1. 制作轮播组件`frontend\\widgets\\banner`\n2. 使用`<?=BannerWidget::widget()?>`\n\n#### 2.7.2组件-留言板\n1. 创建表和模型\n2. 创建表单，添加获取留言板数据`getList()`和添加留言`create()`函数\n3. 创建chat挂件\n4. 在`site/index.php`里添加chat组件\n4. 添加js（ajax），修改AppAsset\n5. 在SiteController里添加接收\n\n#### 2.7.3组件-热门浏览\n1. 制作轮播组件`frontend\\widgets\\hot`\n2. 使用`<?=HotWidget::widget()?>`\n\n#### 2.7.4标签云\n","source":"_posts/博客系统实战.md","raw":"---\ntitle: 博客系统实战\ndate: 2019-01-21 10:26:49\ntags: Yii\n---\n\n---\n## 1.基础配置\n---\n### 1.1高级版：初始化-开发环境\n---\n### 1.2连接数据库\nbasic/config/db.php 或\nadvanced\\common\\config\\main-local.php\n\n<!-- more -->\n---\n### 1.3修改HOSTS、服务器配置\n```\n<VirtualHost *:80>\n\tServerName localhost\n\tDocumentRoot I:/ProgramFiles/wamp64/www\n\t<Directory  \"I:/ProgramFiles/wamp64/www/\">\n\t\tOptions +Indexes +Includes +FollowSymLinks +MultiViews\n\t\tAllowOverride All\n\t\t#使用.htaccess文件作为配置\n\t\tRequire local\n\t\t# Require all granted\n\t\t# 换上这句即可局域网访问\n\t</Directory>\n</VirtualHost>\n```\n---\n### 1.4路由配置优化\n1.去掉index.php\n将下面代码添加至`/web/.htaccess`中或添加至服务器路由配置`<Directory  \"\"></Directory>`中\n```\n# 开启 mod_rewrite 用于美化 URL 功能的支持（译注：对应 pretty URL 选项）\nRewriteEngine on\n# 如果请求的是真实存在的文件或目录，直接访问\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\n# 如果请求的不是真实文件或目录，分发请求至 index.php\nRewriteRule . index.php\n```\n2.路由优化\n将下面的代码添加至`frontend\\config\\main.php` `components`中\n```\n'urlManager'=>[\n\n             'enablePrettyUrl' => true, //对url进行美化\n\n             'showScriptName' => false,//隐藏index.php\n\n            //  'suffix' => '.html',//后缀\n\n            //  'enableStrictParsing'=>FALSE,//不要求网址严格匹配，则不需要输入rules\n\n            //  'rules' => []//网址匹配规则\n\n        ],\n```\n---\n### 1.5语言包配置\n注意大小写\n1.开启语言`frontend\\config\\main.php` `return[]`加入\n```'language' => 'zh-CN',//这时已经可以使用自带的部分翻译```\n2.添加自己的词库配置到`components`中\n```\n'i18n' => [\n            'translations' => [\n                '*' => [\n                    'class' => 'yii\\i18n\\PhpMessageSource',\n                    // 'basePath' => '/messages',//默认\n                    'fileMap' => [\n                        'common' => 'common.php',//有多个包可以并列下去\n                    ],\n                ],\n            ],\n        ],\n```\n3.创建自定义的语言包`frontend/messages/zh-CN/common.php`，名字和上面对应\n```\n<?php\nreturn[\n    'Blog'=>'博客',\n];\n```\n4.使用\n1:main视图中\n```\n['label' => 'Home', 'url' => ['/site/index']],\n//改成\n['label' =>Yii::t('yii','Home'), 'url' => ['/site/index']],\n//使用了yii自带的语言包，同理：\n['label' =>Yii::t('common','Home'), 'url' => ['/site/index']],\n//就使用了自定义的语言包\n```\n2:对于视图中`<?= $form->field($model, 'email') ?>`格式，在模型中添加翻译：\n```\npublic function attributeLabels()\n{\n    return[\n        'username'=>'用户名',\n        'email'=>\\Yii::t('common', 'Email'),\n    ];\n}\n```\n---\n### 1.6 独立的用户系统\n\n#### 1.6.1 模型的区分\n`models`分为`***Form.php`表单模型和`User.php`这种数据模型\n\n#### 1.6.2设计思路\n1. 前后台数据表分离：user&admin\n2. 代码调整\n 1. 表单模型放在前后台中，`数据模型`放在common（移动LoginForm.php到前后台修改命名空间）\n 2. 配置文件`config/main.php`\n 3. 修改`表单模型`里的数据模型对应\n 4. 前后台`站点控制器`的表单use的命名空间\n 5. 语言包\n\n---\n## 2. 前台开发\n---\n### 2.1 前台布局\n在main.php框架中：\n#### 2.1.1 菜单导航\n+ 删除修改导航栏目改成left/rightMenus\n+ 修改l/r相关代码\n#### 登陆显示\n+ 放入头像\n`'label' => '<img src =\"。。。\">',`\n为后期方便，位置调用参数显示，在config/params.php中加入\n```\n'avatar' => [\n        'small' => '/statics/images/avatar/small.jpg',\n    ]\n```\n+ 在对应的`Nav::widget()`中加入`'encodeLabels'=>false,`关闭代码过滤\n+ 修改对应样式css文件\n+ `linkOptions`：添加词缀，每个`'label'`是一个`<a>`。\n+ 添加`'items'`下拉框\n\n#### 2.1.2 引入font-awesome\n1. 放入文件夹到css下\n2. 在`assets/AppAsset.php`静态资源管理中添加min.css引用\n```\n$rightMenus[] = [\n    'label' => '<img src =\"'.Yii::$app->params['avatar']['small'].'\" alt=\"'.Yii::$app->user->identity->username.'\">',\n    'linkOptions' => ['class'=>'avatar'],\n    'items' => [\n        ['label' => '<i class=\"fa fa-sign-out\"></i> 退出','url' => ['/site/logout'],'linkOptions' => ['data-method'=>'post']],\n    ],\n];\n```\n---\n### 2.2 登录注册\n#### 2.2.1 重复密码&验证码\n+ SignupForm里加入对应字段、配置\n```\npublic $rePassword;\npublic $verifyCode;\n\npublic function rules()\n{\n    return [\n        ['username', 'match','pattern'=>'/^[(\\x{4E00}-\\x{9FA5})a-zA-Z]+[(\\x{4E00}-\\x{9FA5})a-zA-Z_\\d]*$/u','message'=>'用户名由字母，汉字，数字，下划线组成，且不能以数字和下划线开头。'],\n    \n        [['password','rePassword'], 'required'],\n        [['password','rePassword'], 'string', 'min' => 6],\n        ['rePassword','compare','compareAttribute'=>'password','message'=>\\Yii::t('common', 'Tow times the password is not consitent.')],\n    \n        ['verifyCode', 'captcha'],\n    ];\n}\npublic function attributeLabels()\n{\n    return[\n        'rePassword'=>'重复密码',\n        'verifyCode'=>'验证码',\n    ];\n}\n```\n+ 视图中加入对应输入框\n\n```\nuse yii\\captcha\\Captcha;\n//--------------------------\n<?= $form->field($model, 'rePassword')->passwordInput() ?>\n\n<?= $form->field($model, 'verifyCode')->widget(Captcha::ClassName()) ?>\n```\n---\n### 2.3创建文章控制器和数据表\n1. 设置前台控制器基类\n 1. 创建`base/BaseController.php`和`PostController`控制器\n 2. 使`SiteController`、`PostController`继承`BaseController`\n2. 创建`post/index.php`视图\n3. 创建数据表\n\n---\n### 2.4创建文章模型Form&Model\n1. Gii在common里创建数据模型`PostModel`(可以使用语言包)\n2. 设置公共数据模型基类\n 1. 创建`base\\BaseModel.php`\n 2. 其他Model`use`&`extends`基类模型\n3. 创建`PostForm`表单模型\n\n---\n### 2.5创建文章功能\n#### 2.5.1表单生成\n1. 在文章控制器`PostController`中加入创建文章`Create`操作\n2. `post`视图文件夹中创建`create`页面\n 1. 面包屑\n 2. 表单（字段限于`PostForm`中定义的）\n<br>\n\n#### 2.5.2分类表单\n1. 创建分类模型`CatModel`\n2. 获取分类数据\n 1. 修改模型继承\n 2. 创建取数据方法`getAllCats()`\n 3. 在控制器调用取数据方法并渲染\n<br>\n\n#### 2.5.3组件-标签图上传\n- 按说明下载安装图片上传拓展\n `http://www.yii-china.com/post/detail/15.html`\n<br>\n\n#### 2.5.4组件-富文本编辑器\n- 按说明下载安装拓展\n `http://www.yii-china.com/post/detail/3.html`\n<br>\n\n#### 2.5.5组件-标签\n- 从教程资源包中取出tags放入common\\widgets\n- 编辑`create`视图和样式\n<br>\n\n#### 2.5.6定义场景与文章创建逻辑\n创建应用：场景\n场景：不同场景能使用的列不同\n1. 在表单模型中创建场景：\n 1. 定义常量作为场景名`const SCENARIOS_UPDATE = 'update'；`\n 2. 重写`scenarios()`\n 3. 在`rules()`里`on`要应用的场景\n2. 在控制器的`create`行为中使用场景\n 1. 定义表单要使用的场景\n 2. 使用表单模型中的create事务\n <br>\n\n#### 2.5.7文章create事务方法\n事务：作为单个逻辑工作单元执行的一系列操作(数据库概念)\n在表单模型创建`create`事务：\n1. 表单模型use数据模型\n2. 给数据模型对象赋值\n3. save()\n4. 设计`_getSummary()`函数截取文章摘要\n<br>\n\n#### 2.5.8文章创建后-使用事件\n```\npublic function _eventAfterCreate($data)\n{\n    //向常量事件中添加(绑定)事件(事件名,[对象,方法],参数)\n    $this->on(self::EVENT_AFTER_CREATE,[$this,'_eventAddTag'],$data);\n    //触发事件\n    $this->trigger(self::EVENT_AFTER_CREATE);\n}\n```\n<br>\n\n#### 2.5.9标签功能\n1. 创建标签表单模型`TagForm`\n2. 生成文章-表单关系数据模型`RelationPostTagModel`\n3. 在文章表单`PostForm`code 添加标签`_eventAddTag`函数\n```\npublic function _eventAddTag($event)\n{\n    //保存标签\n\n    //删除原先的关联\n\n    //批量保存文章和标签的关联关系\n\n        //批量插入\n\n}\n```\n---\n### 2.6文章展示\n#### 2.6.1文章详情\n1. 控制器中加入`actionView($id)`\n2. 创建`views/post/view.php`\n3. `PostForm`添加`getViewById($id)`访问文章\n 1. 查询\n 2. 处理格式\n 3. 返回\n4. `PostModel`&`RelationPostTagModel`中添加`getRelate()`&`getTag()`\n\n#### 2.6.2文章统计\n1. 建表、`PostExtendModel`\n2. 在控制器-文章详情操作里添加`upCounter()`\n3. 在model中code`upCounter()`\n4. `PostForm`里添加查询关联`with('relate.tag', 'extend')`\n5. `PostModel`里添加`getExtend()`关联\n6. view添加浏览的数据`<?=isset($data['extend']['browser'])?$data['extend']['browser']:0?>`\n\n#### 2.6.3组件-文章列表\n小部件：通过封装组件实现功能\n部件调用表单，表单调用模型，在要使用的视图中use`yii\\base\\Widget;`和要使用的部件，在要展现的地方插入`<?=部件名::widget();?>`\n1. 创建挂件文件结构\n2. code文章列表组件`PostWidget`调用`PostForm`的`getList()`\n3. 在文章表单添加 获取文章列表`getList()`调用`_formatList`&`BaseModel`的`getPages()`\n\n---\n### 2.7博客首页\n#### 2.7.1组件-图片轮播\n1. 制作轮播组件`frontend\\widgets\\banner`\n2. 使用`<?=BannerWidget::widget()?>`\n\n#### 2.7.2组件-留言板\n1. 创建表和模型\n2. 创建表单，添加获取留言板数据`getList()`和添加留言`create()`函数\n3. 创建chat挂件\n4. 在`site/index.php`里添加chat组件\n4. 添加js（ajax），修改AppAsset\n5. 在SiteController里添加接收\n\n#### 2.7.3组件-热门浏览\n1. 制作轮播组件`frontend\\widgets\\hot`\n2. 使用`<?=HotWidget::widget()?>`\n\n#### 2.7.4标签云\n","slug":"博客系统实战","published":1,"updated":"2019-01-21T06:34:04.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642pyh000yy0oo9daurhjg","content":"<hr>\n<h2 id=\"1-基础配置\"><a href=\"#1-基础配置\" class=\"headerlink\" title=\"1.基础配置\"></a>1.基础配置</h2><hr>\n<h3 id=\"1-1高级版：初始化-开发环境\"><a href=\"#1-1高级版：初始化-开发环境\" class=\"headerlink\" title=\"1.1高级版：初始化-开发环境\"></a>1.1高级版：初始化-开发环境</h3><hr>\n<h3 id=\"1-2连接数据库\"><a href=\"#1-2连接数据库\" class=\"headerlink\" title=\"1.2连接数据库\"></a>1.2连接数据库</h3><p>basic/config/db.php 或<br>advanced\\common\\config\\main-local.php</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h3 id=\"1-3修改HOSTS、服务器配置\"><a href=\"#1-3修改HOSTS、服务器配置\" class=\"headerlink\" title=\"1.3修改HOSTS、服务器配置\"></a>1.3修改HOSTS、服务器配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">\tServerName localhost</span><br><span class=\"line\">\tDocumentRoot I:/ProgramFiles/wamp64/www</span><br><span class=\"line\">\t&lt;Directory  &quot;I:/ProgramFiles/wamp64/www/&quot;&gt;</span><br><span class=\"line\">\t\tOptions +Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class=\"line\">\t\tAllowOverride All</span><br><span class=\"line\">\t\t#使用.htaccess文件作为配置</span><br><span class=\"line\">\t\tRequire local</span><br><span class=\"line\">\t\t# Require all granted</span><br><span class=\"line\">\t\t# 换上这句即可局域网访问</span><br><span class=\"line\">\t&lt;/Directory&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"1-4路由配置优化\"><a href=\"#1-4路由配置优化\" class=\"headerlink\" title=\"1.4路由配置优化\"></a>1.4路由配置优化</h3><p>1.去掉index.php<br>将下面代码添加至<code>/web/.htaccess</code>中或添加至服务器路由配置<code>&lt;Directory  &quot;&quot;&gt;&lt;/Directory&gt;</code>中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开启 mod_rewrite 用于美化 URL 功能的支持（译注：对应 pretty URL 选项）</span><br><span class=\"line\">RewriteEngine on</span><br><span class=\"line\"># 如果请求的是真实存在的文件或目录，直接访问</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class=\"line\"># 如果请求的不是真实文件或目录，分发请求至 index.php</span><br><span class=\"line\">RewriteRule . index.php</span><br></pre></td></tr></table></figure></p>\n<p>2.路由优化<br>将下面的代码添加至<code>frontend\\config\\main.php</code> <code>components</code>中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;urlManager&apos;=&gt;[</span><br><span class=\"line\"></span><br><span class=\"line\">             &apos;enablePrettyUrl&apos; =&gt; true, //对url进行美化</span><br><span class=\"line\"></span><br><span class=\"line\">             &apos;showScriptName&apos; =&gt; false,//隐藏index.php</span><br><span class=\"line\"></span><br><span class=\"line\">            //  &apos;suffix&apos; =&gt; &apos;.html&apos;,//后缀</span><br><span class=\"line\"></span><br><span class=\"line\">            //  &apos;enableStrictParsing&apos;=&gt;FALSE,//不要求网址严格匹配，则不需要输入rules</span><br><span class=\"line\"></span><br><span class=\"line\">            //  &apos;rules&apos; =&gt; []//网址匹配规则</span><br><span class=\"line\"></span><br><span class=\"line\">        ],</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"1-5语言包配置\"><a href=\"#1-5语言包配置\" class=\"headerlink\" title=\"1.5语言包配置\"></a>1.5语言包配置</h3><p>注意大小写<br>1.开启语言<code>frontend\\config\\main.php</code> <code>return[]</code>加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.添加自己的词库配置到`components`中</span><br></pre></td></tr></table></figure></p>\n<p>‘i18n’ =&gt; [<br>            ‘translations’ =&gt; [<br>                ‘*’ =&gt; [<br>                    ‘class’ =&gt; ‘yii\\i18n\\PhpMessageSource’,<br>                    // ‘basePath’ =&gt; ‘/messages’,//默认<br>                    ‘fileMap’ =&gt; [<br>                        ‘common’ =&gt; ‘common.php’,//有多个包可以并列下去<br>                    ],<br>                ],<br>            ],<br>        ],<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.创建自定义的语言包`frontend/messages/zh-CN/common.php`，名字和上面对应</span><br></pre></td></tr></table></figure></p>\n<p>&lt;?php<br>return[<br>    ‘Blog’=&gt;’博客’,<br>];<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.使用</span><br><span class=\"line\">1:main视图中</span><br></pre></td></tr></table></figure></p>\n<p>[‘label’ =&gt; ‘Home’, ‘url’ =&gt; [‘/site/index’]],<br>//改成<br>[‘label’ =&gt;Yii::t(‘yii’,’Home’), ‘url’ =&gt; [‘/site/index’]],<br>//使用了yii自带的语言包，同理：<br>[‘label’ =&gt;Yii::t(‘common’,’Home’), ‘url’ =&gt; [‘/site/index’]],<br>//就使用了自定义的语言包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2:对于视图中`&lt;?= $form-&gt;field($model, &apos;email&apos;) ?&gt;`格式，在模型中添加翻译：</span><br></pre></td></tr></table></figure></p>\n<p>public function attributeLabels()<br>{<br>    return[<br>        ‘username’=&gt;’用户名’,<br>        ‘email’=&gt;\\Yii::t(‘common’, ‘Email’),<br>    ];<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 1.6 独立的用户系统</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1.6.1 模型的区分</span><br><span class=\"line\">`models`分为`***Form.php`表单模型和`User.php`这种数据模型</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1.6.2设计思路</span><br><span class=\"line\">1. 前后台数据表分离：user&amp;admin</span><br><span class=\"line\">2. 代码调整</span><br><span class=\"line\"> 1. 表单模型放在前后台中，`数据模型`放在common（移动LoginForm.php到前后台修改命名空间）</span><br><span class=\"line\"> 2. 配置文件`config/main.php`</span><br><span class=\"line\"> 3. 修改`表单模型`里的数据模型对应</span><br><span class=\"line\"> 4. 前后台`站点控制器`的表单use的命名空间</span><br><span class=\"line\"> 5. 语言包</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">## 2. 前台开发</span><br><span class=\"line\">---</span><br><span class=\"line\">### 2.1 前台布局</span><br><span class=\"line\">在main.php框架中：</span><br><span class=\"line\">#### 2.1.1 菜单导航</span><br><span class=\"line\">+ 删除修改导航栏目改成left/rightMenus</span><br><span class=\"line\">+ 修改l/r相关代码</span><br><span class=\"line\">#### 登陆显示</span><br><span class=\"line\">+ 放入头像</span><br><span class=\"line\">`&apos;label&apos; =&gt; &apos;&lt;img src =&quot;。。。&quot;&gt;&apos;,`</span><br><span class=\"line\">为后期方便，位置调用参数显示，在config/params.php中加入</span><br></pre></td></tr></table></figure></p>\n<p>‘avatar’ =&gt; [<br>        ‘small’ =&gt; ‘/statics/images/avatar/small.jpg’,<br>    ]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 在对应的`Nav::widget()`中加入`&apos;encodeLabels&apos;=&gt;false,`关闭代码过滤</span><br><span class=\"line\">+ 修改对应样式css文件</span><br><span class=\"line\">+ `linkOptions`：添加词缀，每个`&apos;label&apos;`是一个`&lt;a&gt;`。</span><br><span class=\"line\">+ 添加`&apos;items&apos;`下拉框</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.1.2 引入font-awesome</span><br><span class=\"line\">1. 放入文件夹到css下</span><br><span class=\"line\">2. 在`assets/AppAsset.php`静态资源管理中添加min.css引用</span><br></pre></td></tr></table></figure></p>\n<p>$rightMenus[] = [<br>    ‘label’ =&gt; ‘<img src=\"'.Yii::$app->params['avatar']['small'].'\" alt=\"'.Yii::$app->user->identity->username.'\">‘,<br>    ‘linkOptions’ =&gt; [‘class’=&gt;’avatar’],<br>    ‘items’ =&gt; [<br>        [‘label’ =&gt; ‘<i class=\"fa fa-sign-out\"></i> 退出’,’url’ =&gt; [‘/site/logout’],’linkOptions’ =&gt; [‘data-method’=&gt;’post’]],<br>    ],<br>];<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 2.2 登录注册</span><br><span class=\"line\">#### 2.2.1 重复密码&amp;验证码</span><br><span class=\"line\">+ SignupForm里加入对应字段、配置</span><br></pre></td></tr></table></figure></p>\n<p>public $rePassword;<br>public $verifyCode;</p>\n<p>public function rules()<br>{<br>    return [<br>        [‘username’, ‘match’,’pattern’=&gt;’/^[(\\x{4E00}-\\x{9FA5})a-zA-Z]+[(\\x{4E00}-\\x{9FA5})a-zA-Z_\\d]*$/u’,’message’=&gt;’用户名由字母，汉字，数字，下划线组成，且不能以数字和下划线开头。’],</p>\n<pre><code>    [[&#39;password&#39;,&#39;rePassword&#39;], &#39;required&#39;],\n    [[&#39;password&#39;,&#39;rePassword&#39;], &#39;string&#39;, &#39;min&#39; =&gt; 6],\n    [&#39;rePassword&#39;,&#39;compare&#39;,&#39;compareAttribute&#39;=&gt;&#39;password&#39;,&#39;message&#39;=&gt;\\Yii::t(&#39;common&#39;, &#39;Tow times the password is not consitent.&#39;)],\n\n    [&#39;verifyCode&#39;, &#39;captcha&#39;],\n];\n</code></pre><p>}<br>public function attributeLabels()<br>{<br>    return[<br>        ‘rePassword’=&gt;’重复密码’,<br>        ‘verifyCode’=&gt;’验证码’,<br>    ];<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 视图中加入对应输入框</span><br></pre></td></tr></table></figure></p>\n<p>use yii\\captcha\\Captcha;<br>//—————————————<br>&lt;?= $form-&gt;field($model, ‘rePassword’)-&gt;passwordInput() ?&gt;</p>\n<p>&lt;?= $form-&gt;field($model, ‘verifyCode’)-&gt;widget(Captcha::ClassName()) ?&gt;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 2.3创建文章控制器和数据表</span><br><span class=\"line\">1. 设置前台控制器基类</span><br><span class=\"line\"> 1. 创建`base/BaseController.php`和`PostController`控制器</span><br><span class=\"line\"> 2. 使`SiteController`、`PostController`继承`BaseController`</span><br><span class=\"line\">2. 创建`post/index.php`视图</span><br><span class=\"line\">3. 创建数据表</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">### 2.4创建文章模型Form&amp;Model</span><br><span class=\"line\">1. Gii在common里创建数据模型`PostModel`(可以使用语言包)</span><br><span class=\"line\">2. 设置公共数据模型基类</span><br><span class=\"line\"> 1. 创建`base\\BaseModel.php`</span><br><span class=\"line\"> 2. 其他Model`use`&amp;`extends`基类模型</span><br><span class=\"line\">3. 创建`PostForm`表单模型</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">### 2.5创建文章功能</span><br><span class=\"line\">#### 2.5.1表单生成</span><br><span class=\"line\">1. 在文章控制器`PostController`中加入创建文章`Create`操作</span><br><span class=\"line\">2. `post`视图文件夹中创建`create`页面</span><br><span class=\"line\"> 1. 面包屑</span><br><span class=\"line\"> 2. 表单（字段限于`PostForm`中定义的）</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.2分类表单</span><br><span class=\"line\">1. 创建分类模型`CatModel`</span><br><span class=\"line\">2. 获取分类数据</span><br><span class=\"line\"> 1. 修改模型继承</span><br><span class=\"line\"> 2. 创建取数据方法`getAllCats()`</span><br><span class=\"line\"> 3. 在控制器调用取数据方法并渲染</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.3组件-标签图上传</span><br><span class=\"line\">- 按说明下载安装图片上传拓展</span><br><span class=\"line\"> `http://www.yii-china.com/post/detail/15.html`</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.4组件-富文本编辑器</span><br><span class=\"line\">- 按说明下载安装拓展</span><br><span class=\"line\"> `http://www.yii-china.com/post/detail/3.html`</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.5组件-标签</span><br><span class=\"line\">- 从教程资源包中取出tags放入common\\widgets</span><br><span class=\"line\">- 编辑`create`视图和样式</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.6定义场景与文章创建逻辑</span><br><span class=\"line\">创建应用：场景</span><br><span class=\"line\">场景：不同场景能使用的列不同</span><br><span class=\"line\">1. 在表单模型中创建场景：</span><br><span class=\"line\"> 1. 定义常量作为场景名`const SCENARIOS_UPDATE = &apos;update&apos;；`</span><br><span class=\"line\"> 2. 重写`scenarios()`</span><br><span class=\"line\"> 3. 在`rules()`里`on`要应用的场景</span><br><span class=\"line\">2. 在控制器的`create`行为中使用场景</span><br><span class=\"line\"> 1. 定义表单要使用的场景</span><br><span class=\"line\"> 2. 使用表单模型中的create事务</span><br><span class=\"line\"> &lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.7文章create事务方法</span><br><span class=\"line\">事务：作为单个逻辑工作单元执行的一系列操作(数据库概念)</span><br><span class=\"line\">在表单模型创建`create`事务：</span><br><span class=\"line\">1. 表单模型use数据模型</span><br><span class=\"line\">2. 给数据模型对象赋值</span><br><span class=\"line\">3. save()</span><br><span class=\"line\">4. 设计`_getSummary()`函数截取文章摘要</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.8文章创建后-使用事件</span><br></pre></td></tr></table></figure></p>\n<p>public function _eventAfterCreate($data)<br>{<br>    //向常量事件中添加(绑定)事件(事件名,[对象,方法],参数)<br>    $this-&gt;on(self::EVENT_AFTER_CREATE,[$this,’_eventAddTag’],$data);<br>    //触发事件<br>    $this-&gt;trigger(self::EVENT_AFTER_CREATE);<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.9标签功能</span><br><span class=\"line\">1. 创建标签表单模型`TagForm`</span><br><span class=\"line\">2. 生成文章-表单关系数据模型`RelationPostTagModel`</span><br><span class=\"line\">3. 在文章表单`PostForm`code 添加标签`_eventAddTag`函数</span><br></pre></td></tr></table></figure></p>\n<p>public function _eventAddTag($event)<br>{<br>    //保存标签</p>\n<pre><code>//删除原先的关联\n\n//批量保存文章和标签的关联关系\n\n    //批量插入\n</code></pre><p>}</p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"```\"></a>```</h2><h3 id=\"2-6文章展示\"><a href=\"#2-6文章展示\" class=\"headerlink\" title=\"2.6文章展示\"></a>2.6文章展示</h3><h4 id=\"2-6-1文章详情\"><a href=\"#2-6-1文章详情\" class=\"headerlink\" title=\"2.6.1文章详情\"></a>2.6.1文章详情</h4><ol>\n<li>控制器中加入<code>actionView($id)</code></li>\n<li>创建<code>views/post/view.php</code></li>\n<li><code>PostForm</code>添加<code>getViewById($id)</code>访问文章<ol>\n<li>查询</li>\n<li>处理格式</li>\n<li>返回</li>\n</ol>\n</li>\n<li><code>PostModel</code>&amp;<code>RelationPostTagModel</code>中添加<code>getRelate()</code>&amp;<code>getTag()</code></li>\n</ol>\n<h4 id=\"2-6-2文章统计\"><a href=\"#2-6-2文章统计\" class=\"headerlink\" title=\"2.6.2文章统计\"></a>2.6.2文章统计</h4><ol>\n<li>建表、<code>PostExtendModel</code></li>\n<li>在控制器-文章详情操作里添加<code>upCounter()</code></li>\n<li>在model中code<code>upCounter()</code></li>\n<li><code>PostForm</code>里添加查询关联<code>with(&#39;relate.tag&#39;, &#39;extend&#39;)</code></li>\n<li><code>PostModel</code>里添加<code>getExtend()</code>关联</li>\n<li>view添加浏览的数据<code>&lt;?=isset($data[&#39;extend&#39;][&#39;browser&#39;])?$data[&#39;extend&#39;][&#39;browser&#39;]:0?&gt;</code></li>\n</ol>\n<h4 id=\"2-6-3组件-文章列表\"><a href=\"#2-6-3组件-文章列表\" class=\"headerlink\" title=\"2.6.3组件-文章列表\"></a>2.6.3组件-文章列表</h4><p>小部件：通过封装组件实现功能<br>部件调用表单，表单调用模型，在要使用的视图中use<code>yii\\base\\Widget;</code>和要使用的部件，在要展现的地方插入<code>&lt;?=部件名::widget();?&gt;</code></p>\n<ol>\n<li>创建挂件文件结构</li>\n<li>code文章列表组件<code>PostWidget</code>调用<code>PostForm</code>的<code>getList()</code></li>\n<li>在文章表单添加 获取文章列表<code>getList()</code>调用<code>_formatList</code>&amp;<code>BaseModel</code>的<code>getPages()</code></li>\n</ol>\n<hr>\n<h3 id=\"2-7博客首页\"><a href=\"#2-7博客首页\" class=\"headerlink\" title=\"2.7博客首页\"></a>2.7博客首页</h3><h4 id=\"2-7-1组件-图片轮播\"><a href=\"#2-7-1组件-图片轮播\" class=\"headerlink\" title=\"2.7.1组件-图片轮播\"></a>2.7.1组件-图片轮播</h4><ol>\n<li>制作轮播组件<code>frontend\\widgets\\banner</code></li>\n<li>使用<code>&lt;?=BannerWidget::widget()?&gt;</code></li>\n</ol>\n<h4 id=\"2-7-2组件-留言板\"><a href=\"#2-7-2组件-留言板\" class=\"headerlink\" title=\"2.7.2组件-留言板\"></a>2.7.2组件-留言板</h4><ol>\n<li>创建表和模型</li>\n<li>创建表单，添加获取留言板数据<code>getList()</code>和添加留言<code>create()</code>函数</li>\n<li>创建chat挂件</li>\n<li>在<code>site/index.php</code>里添加chat组件</li>\n<li>添加js（ajax），修改AppAsset</li>\n<li>在SiteController里添加接收</li>\n</ol>\n<h4 id=\"2-7-3组件-热门浏览\"><a href=\"#2-7-3组件-热门浏览\" class=\"headerlink\" title=\"2.7.3组件-热门浏览\"></a>2.7.3组件-热门浏览</h4><ol>\n<li>制作轮播组件<code>frontend\\widgets\\hot</code></li>\n<li>使用<code>&lt;?=HotWidget::widget()?&gt;</code></li>\n</ol>\n<h4 id=\"2-7-4标签云\"><a href=\"#2-7-4标签云\" class=\"headerlink\" title=\"2.7.4标签云\"></a>2.7.4标签云</h4>","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"1-基础配置\"><a href=\"#1-基础配置\" class=\"headerlink\" title=\"1.基础配置\"></a>1.基础配置</h2><hr>\n<h3 id=\"1-1高级版：初始化-开发环境\"><a href=\"#1-1高级版：初始化-开发环境\" class=\"headerlink\" title=\"1.1高级版：初始化-开发环境\"></a>1.1高级版：初始化-开发环境</h3><hr>\n<h3 id=\"1-2连接数据库\"><a href=\"#1-2连接数据库\" class=\"headerlink\" title=\"1.2连接数据库\"></a>1.2连接数据库</h3><p>basic/config/db.php 或<br>advanced\\common\\config\\main-local.php</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><h3 id=\"1-3修改HOSTS、服务器配置\"><a href=\"#1-3修改HOSTS、服务器配置\" class=\"headerlink\" title=\"1.3修改HOSTS、服务器配置\"></a>1.3修改HOSTS、服务器配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">\tServerName localhost</span><br><span class=\"line\">\tDocumentRoot I:/ProgramFiles/wamp64/www</span><br><span class=\"line\">\t&lt;Directory  &quot;I:/ProgramFiles/wamp64/www/&quot;&gt;</span><br><span class=\"line\">\t\tOptions +Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class=\"line\">\t\tAllowOverride All</span><br><span class=\"line\">\t\t#使用.htaccess文件作为配置</span><br><span class=\"line\">\t\tRequire local</span><br><span class=\"line\">\t\t# Require all granted</span><br><span class=\"line\">\t\t# 换上这句即可局域网访问</span><br><span class=\"line\">\t&lt;/Directory&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"1-4路由配置优化\"><a href=\"#1-4路由配置优化\" class=\"headerlink\" title=\"1.4路由配置优化\"></a>1.4路由配置优化</h3><p>1.去掉index.php<br>将下面代码添加至<code>/web/.htaccess</code>中或添加至服务器路由配置<code>&lt;Directory  &quot;&quot;&gt;&lt;/Directory&gt;</code>中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开启 mod_rewrite 用于美化 URL 功能的支持（译注：对应 pretty URL 选项）</span><br><span class=\"line\">RewriteEngine on</span><br><span class=\"line\"># 如果请求的是真实存在的文件或目录，直接访问</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class=\"line\"># 如果请求的不是真实文件或目录，分发请求至 index.php</span><br><span class=\"line\">RewriteRule . index.php</span><br></pre></td></tr></table></figure></p>\n<p>2.路由优化<br>将下面的代码添加至<code>frontend\\config\\main.php</code> <code>components</code>中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;urlManager&apos;=&gt;[</span><br><span class=\"line\"></span><br><span class=\"line\">             &apos;enablePrettyUrl&apos; =&gt; true, //对url进行美化</span><br><span class=\"line\"></span><br><span class=\"line\">             &apos;showScriptName&apos; =&gt; false,//隐藏index.php</span><br><span class=\"line\"></span><br><span class=\"line\">            //  &apos;suffix&apos; =&gt; &apos;.html&apos;,//后缀</span><br><span class=\"line\"></span><br><span class=\"line\">            //  &apos;enableStrictParsing&apos;=&gt;FALSE,//不要求网址严格匹配，则不需要输入rules</span><br><span class=\"line\"></span><br><span class=\"line\">            //  &apos;rules&apos; =&gt; []//网址匹配规则</span><br><span class=\"line\"></span><br><span class=\"line\">        ],</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"1-5语言包配置\"><a href=\"#1-5语言包配置\" class=\"headerlink\" title=\"1.5语言包配置\"></a>1.5语言包配置</h3><p>注意大小写<br>1.开启语言<code>frontend\\config\\main.php</code> <code>return[]</code>加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.添加自己的词库配置到`components`中</span><br></pre></td></tr></table></figure></p>\n<p>‘i18n’ =&gt; [<br>            ‘translations’ =&gt; [<br>                ‘*’ =&gt; [<br>                    ‘class’ =&gt; ‘yii\\i18n\\PhpMessageSource’,<br>                    // ‘basePath’ =&gt; ‘/messages’,//默认<br>                    ‘fileMap’ =&gt; [<br>                        ‘common’ =&gt; ‘common.php’,//有多个包可以并列下去<br>                    ],<br>                ],<br>            ],<br>        ],<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.创建自定义的语言包`frontend/messages/zh-CN/common.php`，名字和上面对应</span><br></pre></td></tr></table></figure></p>\n<p>&lt;?php<br>return[<br>    ‘Blog’=&gt;’博客’,<br>];<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.使用</span><br><span class=\"line\">1:main视图中</span><br></pre></td></tr></table></figure></p>\n<p>[‘label’ =&gt; ‘Home’, ‘url’ =&gt; [‘/site/index’]],<br>//改成<br>[‘label’ =&gt;Yii::t(‘yii’,’Home’), ‘url’ =&gt; [‘/site/index’]],<br>//使用了yii自带的语言包，同理：<br>[‘label’ =&gt;Yii::t(‘common’,’Home’), ‘url’ =&gt; [‘/site/index’]],<br>//就使用了自定义的语言包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2:对于视图中`&lt;?= $form-&gt;field($model, &apos;email&apos;) ?&gt;`格式，在模型中添加翻译：</span><br></pre></td></tr></table></figure></p>\n<p>public function attributeLabels()<br>{<br>    return[<br>        ‘username’=&gt;’用户名’,<br>        ‘email’=&gt;\\Yii::t(‘common’, ‘Email’),<br>    ];<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 1.6 独立的用户系统</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1.6.1 模型的区分</span><br><span class=\"line\">`models`分为`***Form.php`表单模型和`User.php`这种数据模型</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1.6.2设计思路</span><br><span class=\"line\">1. 前后台数据表分离：user&amp;admin</span><br><span class=\"line\">2. 代码调整</span><br><span class=\"line\"> 1. 表单模型放在前后台中，`数据模型`放在common（移动LoginForm.php到前后台修改命名空间）</span><br><span class=\"line\"> 2. 配置文件`config/main.php`</span><br><span class=\"line\"> 3. 修改`表单模型`里的数据模型对应</span><br><span class=\"line\"> 4. 前后台`站点控制器`的表单use的命名空间</span><br><span class=\"line\"> 5. 语言包</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">## 2. 前台开发</span><br><span class=\"line\">---</span><br><span class=\"line\">### 2.1 前台布局</span><br><span class=\"line\">在main.php框架中：</span><br><span class=\"line\">#### 2.1.1 菜单导航</span><br><span class=\"line\">+ 删除修改导航栏目改成left/rightMenus</span><br><span class=\"line\">+ 修改l/r相关代码</span><br><span class=\"line\">#### 登陆显示</span><br><span class=\"line\">+ 放入头像</span><br><span class=\"line\">`&apos;label&apos; =&gt; &apos;&lt;img src =&quot;。。。&quot;&gt;&apos;,`</span><br><span class=\"line\">为后期方便，位置调用参数显示，在config/params.php中加入</span><br></pre></td></tr></table></figure></p>\n<p>‘avatar’ =&gt; [<br>        ‘small’ =&gt; ‘/statics/images/avatar/small.jpg’,<br>    ]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 在对应的`Nav::widget()`中加入`&apos;encodeLabels&apos;=&gt;false,`关闭代码过滤</span><br><span class=\"line\">+ 修改对应样式css文件</span><br><span class=\"line\">+ `linkOptions`：添加词缀，每个`&apos;label&apos;`是一个`&lt;a&gt;`。</span><br><span class=\"line\">+ 添加`&apos;items&apos;`下拉框</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.1.2 引入font-awesome</span><br><span class=\"line\">1. 放入文件夹到css下</span><br><span class=\"line\">2. 在`assets/AppAsset.php`静态资源管理中添加min.css引用</span><br></pre></td></tr></table></figure></p>\n<p>$rightMenus[] = [<br>    ‘label’ =&gt; ‘<img src=\"'.Yii::$app->params['avatar']['small'].'\" alt=\"'.Yii::$app->user->identity->username.'\">‘,<br>    ‘linkOptions’ =&gt; [‘class’=&gt;’avatar’],<br>    ‘items’ =&gt; [<br>        [‘label’ =&gt; ‘<i class=\"fa fa-sign-out\"></i> 退出’,’url’ =&gt; [‘/site/logout’],’linkOptions’ =&gt; [‘data-method’=&gt;’post’]],<br>    ],<br>];<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 2.2 登录注册</span><br><span class=\"line\">#### 2.2.1 重复密码&amp;验证码</span><br><span class=\"line\">+ SignupForm里加入对应字段、配置</span><br></pre></td></tr></table></figure></p>\n<p>public $rePassword;<br>public $verifyCode;</p>\n<p>public function rules()<br>{<br>    return [<br>        [‘username’, ‘match’,’pattern’=&gt;’/^[(\\x{4E00}-\\x{9FA5})a-zA-Z]+[(\\x{4E00}-\\x{9FA5})a-zA-Z_\\d]*$/u’,’message’=&gt;’用户名由字母，汉字，数字，下划线组成，且不能以数字和下划线开头。’],</p>\n<pre><code>    [[&#39;password&#39;,&#39;rePassword&#39;], &#39;required&#39;],\n    [[&#39;password&#39;,&#39;rePassword&#39;], &#39;string&#39;, &#39;min&#39; =&gt; 6],\n    [&#39;rePassword&#39;,&#39;compare&#39;,&#39;compareAttribute&#39;=&gt;&#39;password&#39;,&#39;message&#39;=&gt;\\Yii::t(&#39;common&#39;, &#39;Tow times the password is not consitent.&#39;)],\n\n    [&#39;verifyCode&#39;, &#39;captcha&#39;],\n];\n</code></pre><p>}<br>public function attributeLabels()<br>{<br>    return[<br>        ‘rePassword’=&gt;’重复密码’,<br>        ‘verifyCode’=&gt;’验证码’,<br>    ];<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 视图中加入对应输入框</span><br></pre></td></tr></table></figure></p>\n<p>use yii\\captcha\\Captcha;<br>//—————————————<br>&lt;?= $form-&gt;field($model, ‘rePassword’)-&gt;passwordInput() ?&gt;</p>\n<p>&lt;?= $form-&gt;field($model, ‘verifyCode’)-&gt;widget(Captcha::ClassName()) ?&gt;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 2.3创建文章控制器和数据表</span><br><span class=\"line\">1. 设置前台控制器基类</span><br><span class=\"line\"> 1. 创建`base/BaseController.php`和`PostController`控制器</span><br><span class=\"line\"> 2. 使`SiteController`、`PostController`继承`BaseController`</span><br><span class=\"line\">2. 创建`post/index.php`视图</span><br><span class=\"line\">3. 创建数据表</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">### 2.4创建文章模型Form&amp;Model</span><br><span class=\"line\">1. Gii在common里创建数据模型`PostModel`(可以使用语言包)</span><br><span class=\"line\">2. 设置公共数据模型基类</span><br><span class=\"line\"> 1. 创建`base\\BaseModel.php`</span><br><span class=\"line\"> 2. 其他Model`use`&amp;`extends`基类模型</span><br><span class=\"line\">3. 创建`PostForm`表单模型</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">### 2.5创建文章功能</span><br><span class=\"line\">#### 2.5.1表单生成</span><br><span class=\"line\">1. 在文章控制器`PostController`中加入创建文章`Create`操作</span><br><span class=\"line\">2. `post`视图文件夹中创建`create`页面</span><br><span class=\"line\"> 1. 面包屑</span><br><span class=\"line\"> 2. 表单（字段限于`PostForm`中定义的）</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.2分类表单</span><br><span class=\"line\">1. 创建分类模型`CatModel`</span><br><span class=\"line\">2. 获取分类数据</span><br><span class=\"line\"> 1. 修改模型继承</span><br><span class=\"line\"> 2. 创建取数据方法`getAllCats()`</span><br><span class=\"line\"> 3. 在控制器调用取数据方法并渲染</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.3组件-标签图上传</span><br><span class=\"line\">- 按说明下载安装图片上传拓展</span><br><span class=\"line\"> `http://www.yii-china.com/post/detail/15.html`</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.4组件-富文本编辑器</span><br><span class=\"line\">- 按说明下载安装拓展</span><br><span class=\"line\"> `http://www.yii-china.com/post/detail/3.html`</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.5组件-标签</span><br><span class=\"line\">- 从教程资源包中取出tags放入common\\widgets</span><br><span class=\"line\">- 编辑`create`视图和样式</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.6定义场景与文章创建逻辑</span><br><span class=\"line\">创建应用：场景</span><br><span class=\"line\">场景：不同场景能使用的列不同</span><br><span class=\"line\">1. 在表单模型中创建场景：</span><br><span class=\"line\"> 1. 定义常量作为场景名`const SCENARIOS_UPDATE = &apos;update&apos;；`</span><br><span class=\"line\"> 2. 重写`scenarios()`</span><br><span class=\"line\"> 3. 在`rules()`里`on`要应用的场景</span><br><span class=\"line\">2. 在控制器的`create`行为中使用场景</span><br><span class=\"line\"> 1. 定义表单要使用的场景</span><br><span class=\"line\"> 2. 使用表单模型中的create事务</span><br><span class=\"line\"> &lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.7文章create事务方法</span><br><span class=\"line\">事务：作为单个逻辑工作单元执行的一系列操作(数据库概念)</span><br><span class=\"line\">在表单模型创建`create`事务：</span><br><span class=\"line\">1. 表单模型use数据模型</span><br><span class=\"line\">2. 给数据模型对象赋值</span><br><span class=\"line\">3. save()</span><br><span class=\"line\">4. 设计`_getSummary()`函数截取文章摘要</span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.8文章创建后-使用事件</span><br></pre></td></tr></table></figure></p>\n<p>public function _eventAfterCreate($data)<br>{<br>    //向常量事件中添加(绑定)事件(事件名,[对象,方法],参数)<br>    $this-&gt;on(self::EVENT_AFTER_CREATE,[$this,’_eventAddTag’],$data);<br>    //触发事件<br>    $this-&gt;trigger(self::EVENT_AFTER_CREATE);<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.5.9标签功能</span><br><span class=\"line\">1. 创建标签表单模型`TagForm`</span><br><span class=\"line\">2. 生成文章-表单关系数据模型`RelationPostTagModel`</span><br><span class=\"line\">3. 在文章表单`PostForm`code 添加标签`_eventAddTag`函数</span><br></pre></td></tr></table></figure></p>\n<p>public function _eventAddTag($event)<br>{<br>    //保存标签</p>\n<pre><code>//删除原先的关联\n\n//批量保存文章和标签的关联关系\n\n    //批量插入\n</code></pre><p>}</p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"```\"></a>```</h2><h3 id=\"2-6文章展示\"><a href=\"#2-6文章展示\" class=\"headerlink\" title=\"2.6文章展示\"></a>2.6文章展示</h3><h4 id=\"2-6-1文章详情\"><a href=\"#2-6-1文章详情\" class=\"headerlink\" title=\"2.6.1文章详情\"></a>2.6.1文章详情</h4><ol>\n<li>控制器中加入<code>actionView($id)</code></li>\n<li>创建<code>views/post/view.php</code></li>\n<li><code>PostForm</code>添加<code>getViewById($id)</code>访问文章<ol>\n<li>查询</li>\n<li>处理格式</li>\n<li>返回</li>\n</ol>\n</li>\n<li><code>PostModel</code>&amp;<code>RelationPostTagModel</code>中添加<code>getRelate()</code>&amp;<code>getTag()</code></li>\n</ol>\n<h4 id=\"2-6-2文章统计\"><a href=\"#2-6-2文章统计\" class=\"headerlink\" title=\"2.6.2文章统计\"></a>2.6.2文章统计</h4><ol>\n<li>建表、<code>PostExtendModel</code></li>\n<li>在控制器-文章详情操作里添加<code>upCounter()</code></li>\n<li>在model中code<code>upCounter()</code></li>\n<li><code>PostForm</code>里添加查询关联<code>with(&#39;relate.tag&#39;, &#39;extend&#39;)</code></li>\n<li><code>PostModel</code>里添加<code>getExtend()</code>关联</li>\n<li>view添加浏览的数据<code>&lt;?=isset($data[&#39;extend&#39;][&#39;browser&#39;])?$data[&#39;extend&#39;][&#39;browser&#39;]:0?&gt;</code></li>\n</ol>\n<h4 id=\"2-6-3组件-文章列表\"><a href=\"#2-6-3组件-文章列表\" class=\"headerlink\" title=\"2.6.3组件-文章列表\"></a>2.6.3组件-文章列表</h4><p>小部件：通过封装组件实现功能<br>部件调用表单，表单调用模型，在要使用的视图中use<code>yii\\base\\Widget;</code>和要使用的部件，在要展现的地方插入<code>&lt;?=部件名::widget();?&gt;</code></p>\n<ol>\n<li>创建挂件文件结构</li>\n<li>code文章列表组件<code>PostWidget</code>调用<code>PostForm</code>的<code>getList()</code></li>\n<li>在文章表单添加 获取文章列表<code>getList()</code>调用<code>_formatList</code>&amp;<code>BaseModel</code>的<code>getPages()</code></li>\n</ol>\n<hr>\n<h3 id=\"2-7博客首页\"><a href=\"#2-7博客首页\" class=\"headerlink\" title=\"2.7博客首页\"></a>2.7博客首页</h3><h4 id=\"2-7-1组件-图片轮播\"><a href=\"#2-7-1组件-图片轮播\" class=\"headerlink\" title=\"2.7.1组件-图片轮播\"></a>2.7.1组件-图片轮播</h4><ol>\n<li>制作轮播组件<code>frontend\\widgets\\banner</code></li>\n<li>使用<code>&lt;?=BannerWidget::widget()?&gt;</code></li>\n</ol>\n<h4 id=\"2-7-2组件-留言板\"><a href=\"#2-7-2组件-留言板\" class=\"headerlink\" title=\"2.7.2组件-留言板\"></a>2.7.2组件-留言板</h4><ol>\n<li>创建表和模型</li>\n<li>创建表单，添加获取留言板数据<code>getList()</code>和添加留言<code>create()</code>函数</li>\n<li>创建chat挂件</li>\n<li>在<code>site/index.php</code>里添加chat组件</li>\n<li>添加js（ajax），修改AppAsset</li>\n<li>在SiteController里添加接收</li>\n</ol>\n<h4 id=\"2-7-3组件-热门浏览\"><a href=\"#2-7-3组件-热门浏览\" class=\"headerlink\" title=\"2.7.3组件-热门浏览\"></a>2.7.3组件-热门浏览</h4><ol>\n<li>制作轮播组件<code>frontend\\widgets\\hot</code></li>\n<li>使用<code>&lt;?=HotWidget::widget()?&gt;</code></li>\n</ol>\n<h4 id=\"2-7-4标签云\"><a href=\"#2-7-4标签云\" class=\"headerlink\" title=\"2.7.4标签云\"></a>2.7.4标签云</h4>"},{"title":"实战的思路、技术整理","date":"2019-01-21T02:26:49.000Z","_content":"\n---\n## 1. 基础配置\n---\n### 1.1 高级版：初始化-开发环境\n---\n### 1.2 连接数据库\nbasic/config/db.php 或\nadvanced\\common\\config\\main-local.php\n\n<!-- more -->\n---\n### 1.3 修改HOSTS、服务器配置模板\n```\n<VirtualHost *:80>\n\tServerName localhost\n\tDocumentRoot I:/ProgramFiles/wamp64/www\n\t<Directory  \"I:/ProgramFiles/wamp64/www/\">\n\t\tOptions +Indexes +Includes +FollowSymLinks +MultiViews\n\t\tAllowOverride All#使用.htaccess文件作为配置\n\t\tRequire local\n\t\t# Require all granted# 换上这句即可局域网访问\n\t</Directory>\n</VirtualHost>\n```\n---\n### 1.4 路由配置优化\n1.去掉index.php\n将下面代码添加至`/web/.htaccess`中或添加至服务器路由配置`<Directory  \"\"></Directory>`中\n```\n# 开启 mod_rewrite 用于美化 URL 功能的支持（译注：对应 pretty URL 选项）\nRewriteEngine on\n# 如果请求的是真实存在的文件或目录，直接访问\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\n# 如果请求的不是真实文件或目录，分发请求至 index.php\nRewriteRule . index.php\n```\n2.路由优化\n将下面的代码添加至`frontend\\config\\main.php` `components`中\n```\n'urlManager'=>[\n\n             'enablePrettyUrl' => true, //对url进行美化\n\n             'showScriptName' => false,//隐藏index.php\n\n            //  'suffix' => '.html',//后缀\n\n            //  'enableStrictParsing'=>FALSE,//不要求网址严格匹配，则不需要输入rules\n\n            //  'rules' => []//网址匹配规则\n\n        ],\n```\n---\n### 1.5 语言包配置(选)\n注意大小写\n1.开启语言`frontend\\config\\main.php` `return[]`加入\n```'language' => 'zh-CN',//这时已经可以使用自带的部分翻译```\n2.添加自己的词库配置到`components`中\n```\n'i18n' => [\n            'translations' => [\n                '*' => [\n                    'class' => 'yii\\i18n\\PhpMessageSource',\n                    // 'basePath' => '/messages',//默认\n                    'fileMap' => [\n                        'common' => 'common.php',//有多个包可以并列下去\n                    ],\n                ],\n            ],\n        ],\n```\n3.创建自定义的语言包`frontend/messages/zh-CN/common.php`，名字和上面对应\n```\n<?php\nreturn[\n    'Blog'=>'博客',\n];\n```\n4.使用\n1:main视图中\n```\n['label' => 'Home', 'url' => ['/site/index']],\n//改成\n['label' =>Yii::t('yii','Home'), 'url' => ['/site/index']],\n//使用了yii自带的语言包，同理：\n['label' =>Yii::t('common','Home'), 'url' => ['/site/index']],\n//就使用了自定义的语言包\n```\n2:对于视图中`<?= $form->field($model, 'email') ?>`格式，在模型中添加翻译：\n```\npublic function attributeLabels()\n{\n    return[\n        'username'=>'用户名',\n        'email'=>\\Yii::t('common', 'Email'),\n    ];\n}\n```\n---\n### 1.6 独立的用户系统\n\n#### 1.6.1 模型的区分\n`models`分为`***Form.php`表单模型和`User.php`这种数据模型\n\n#### 1.6.2 设计思路\n1. 前后台数据表分离：user&admin\n2. 代码调整\n 1. 表单模型放在前后台中，`数据模型`放在common（移动LoginForm.php到前后台修改命名空间）\n 2. 配置文件`config/main.php`\n 3. 修改`表单模型`里的对应数据模型的使用\n 4. 前后台`站点控制器`的表单use的命名空间\n 5. 语言包\n\n---\n## 2. 技术点\n---\n### 2.1 部件的使用\n\n---\n### 2.2 查询方法\n#### 2.2.1 Query\n#### 2.2.2 *Model::find()\n\n---\n### 2.3 params的使用\n```\n//params.php中\nreturn [\n    'avatar' => [\n        'small' => '/statics/images/avatar/small.jpg',\n    ]\n];\n//view中\n<img src =\"'.Yii::$app->params['avatar']['small'].'\" alt=\"'.Yii::$app->user->identity->username.'\">\n```\n---\n### 2.4 禁用自带的 Yii、JQuery 和 Bootstrap 脚本\n- 去除 Yii.js 相关脚本\n编辑 `frontend\\asset\\AppAsset.php` 文件，注释掉变量 `$depends` 里的 `yii\\web\\YiiAsset` 值。\n编辑 `frontend\\config\\main.php` 文件，在字段 `components` 下面添加配置：\n```\n'assetManager' => [\n 'bundles' => [\n     'yii\\web\\YiiAsset' => [\n         'js' => [],  // 去除 yii.js\n         'sourcePath' => null,  // 防止在 frontend/web/asset 下生产文件\n     ],\n                        \n     'yii\\widgets\\ActiveFormAsset' => [\n         'js' => [],  // 去除 yii.activeForm.js\n         'sourcePath' => null,  // 防止在 frontend/web/asset 下生产文件\n     ],\n        \n     'yii\\validators\\ValidationAsset' => [\n         'js' => [],  // 去除 yii.validation.js\n         'sourcePath' => null,  // 防止在 frontend/web/asset 下生产文件\n     ],\n ],\n],\n```\n- 去除 JQuery 脚本\n编辑 frontend\\config\\main.php 文件，在字段 'components' 下面添加配置：\n```\n'assetManager' => [\n    'bundles' => [\n        'yii\\web\\JqueryAsset' => [\n            'js' => [],  // 去除 jquery.js\n            'sourcePath' => null,  // 防止在 frontend/web/asset 下生产文件\n        ],\n    ],\n],\n```\n- 去除 Bootstrap 库\n编辑 `frontend\\asset\\AppAsset.php` 文件，注释掉变量 `$depends` 里的 `yii\\bootstrap\\BootstrapAsset` 值。\n编辑 `frontend\\config\\main.php` 文件，在字段 `components` 下面添加配置：\n```\n'assetManager' => [\n 'bundles' => [\n     'yii\\bootstrap\\BootstrapAsset' => [\n         'css' => [],  // 去除 bootstrap.css\n         'sourcePath' => null, // 防止在 frontend/web/asset 下生产文件\n     ],\n     'yii\\bootstrap\\BootstrapPluginAsset' => [\n         'js' => [],  // 去除 bootstrap.js\n         'sourcePath' => null,  // 防止在 frontend/web/asset 下生产文件\n     ],\n ],\n],\n```\n---\n### 2.5 AppAsset前端资源使用\ntips:\n1. 如果在其他地方注册资源包，应提供视图对象，如在 小部件 类中注册资源包， 可以通过 $this->view 获取视图对象。\n2. 代码块用registerJs，代码文件用registerJsFile\n3. @web是可省的\n法一：资源包\n```\n/***************AppAsset中***************/\npublic $basePath = '@webroot';  //类指定资源文件放在 @webroot 目录下\npublic $baseUrl = '@web';       //对应的URL为 @web\npublic $css = [\n    'css/site.css',             //资源包中包含一个CSS文件 css/site.css\n];\npublic $js = [                  //没有JavaScript文件\n];\npublic $depends = [             //依赖其他两个包\n    'yii\\web\\YiiAsset',\n    'yii\\bootstrap\\BootstrapAsset',\n];\n\n/***************视图中使用***************/\nuse frontend\\assets\\AppAsset;    //别忘了use\nAppAsset::register($this);      //按AppAsset注册\n```\n\n法二：自定方法\n```\n/***************AppAsset中***************/\n//自定方法，然后在视图中注册\npublic static function addScript($view, $jsfile) {\n    $view->registerJsFile($jsfile, [AppAsset::className(), 'depends' => 'frontend\\assets\\AppAsset', 'position'=>\\yii\\web\\View::POS_END]);\n    \n//如果不加depends，自定方法的渲染优先级高于AppAsset，so会先于jq渲染，so必加\n//二参的position指明加载位置\n}\n\n/***************视图中使用***************/\nuse frontend\\assets\\AppAsset;\nAppAsset::addScript($this,'@web/statics/js/ui.js');//使用自定方法注册\n```\n\n法三：registerCssFile\n```\n//会先于AppAsset渲染\n$this->registerCssFile('/statics/css/denglu.css');\n```\n\n法四：嵌入式\n```\n//嵌入式的优先级最低，代码最后渲染\n$this->registerJs('\n    $(document).ready(function(){//直接使用\n    });\n');\n```\n\n法五：元素块-不建议\n```\n<div id=\"mybutton\">点我弹出OK</div>\n\n<?php $this->beginBlock('test') ?>  \n    $(function($) {\n      $('#mybutton').click(function() {\n        alert('OK');\n      });\n    });\n<?php $this->endBlock() ?>\n<?php $this->registerJs($this->blocks['test'], \\yii\\web\\View::POS_END); ?>\n\nPOS_HEAD——head结束标签之前：$this->registerJs('alert(4)',View::POS_HEAD);\nPOS_BEGIN——body开始标签之后：$this->registerJs('alert(4)',View::POS_BEGIN);\nPOS_END——body结束标签之前：$this->registerJs('alert(4)',View::POS_END);\nPOS_READY POS_LOAD：$this->registerJs('alert(4)', View::POS_READY);\n```\n\n法六：等同于直接写\n```\n<?= Html::jsFile('@web/js/main.js'); ?>\n<?= Html::script('alert(\"Hello!\");', ['defer' => true]);\n<?= Html::cssFile('@web/css/ie5.css', ['condition' => 'IE 5']) ?>//<!--[if IE 5]><![endif]-->\n<?= Html::style('.danger { color: #f00; }') ?>\n```\n---\n### 2.6 init() run()函数略解\n```\n如在插件中：\nclass TopMenu extends Widget{\n    public function init(){\n        parent::init();\n        echo '<ul>'；\n    }\n    public funtion run(){\n        return '</ul>';\n    }\n    public function addMenu($menuName){\n        return '<li>'.$menuName.'</li>';\n    }\n}\n\n视图中：\n<?php $menu = TopMenu::begin();?>\n//输出<ul>\n<?=$menu->addMenu('menu1');?>\n<?=$menu->addMenu('menu12');?>\n<?php TopMenu::begin();?>\n//输出</ul>\n```\n---\n## 3. 基本流程\n---\n### 3.1 活动记录（数据模型）和控制器设置基类\n```\n//---------------base/BaseModel.php-------------------\n<?php\nnamespace common\\models\\base;\n/**\n*基础模型\n*/\nuse yii\\db\\ActiveRecord;\n\nclass BaseModel extends ActiveRecord\n{}\n\n//------------base/BaseController.php---------------------\n<?php\nnamespace frontend\\controllers\\base;\n/**\n*基础控制器\n*/\nuse yii\\web\\Controller;\n\nclass BaseController extends Controller\n{\n    public function beforeAction($action)\n    {\n        //检测-如果父级的beforeAction返回的是不通过\n        if (!parent::beforeAction($action)) {\n            return false;\n        }\n        return true;\n    }\n}\n```\n### 3.2 创建数据库&数据模型\nuse Gii\n### 3.3 创建表单模型\n+ 字段\n+ 规则`rules()`\n+ 字段名称（标签属性）`attributeLabels()`\n\n### 3.4 创建控制器\n+ 创建行为action\n + new表单对象\n + 渲染视图`return $this->render('create',['model'=>$model]);`\n\n### 3.5 创建视图view\n","source":"_posts/实战的思路、技术整理.md","raw":"---\ntitle: 实战的思路、技术整理\ndate: 2019-01-21 10:26:49\ntags: Yii\n---\n\n---\n## 1. 基础配置\n---\n### 1.1 高级版：初始化-开发环境\n---\n### 1.2 连接数据库\nbasic/config/db.php 或\nadvanced\\common\\config\\main-local.php\n\n<!-- more -->\n---\n### 1.3 修改HOSTS、服务器配置模板\n```\n<VirtualHost *:80>\n\tServerName localhost\n\tDocumentRoot I:/ProgramFiles/wamp64/www\n\t<Directory  \"I:/ProgramFiles/wamp64/www/\">\n\t\tOptions +Indexes +Includes +FollowSymLinks +MultiViews\n\t\tAllowOverride All#使用.htaccess文件作为配置\n\t\tRequire local\n\t\t# Require all granted# 换上这句即可局域网访问\n\t</Directory>\n</VirtualHost>\n```\n---\n### 1.4 路由配置优化\n1.去掉index.php\n将下面代码添加至`/web/.htaccess`中或添加至服务器路由配置`<Directory  \"\"></Directory>`中\n```\n# 开启 mod_rewrite 用于美化 URL 功能的支持（译注：对应 pretty URL 选项）\nRewriteEngine on\n# 如果请求的是真实存在的文件或目录，直接访问\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\n# 如果请求的不是真实文件或目录，分发请求至 index.php\nRewriteRule . index.php\n```\n2.路由优化\n将下面的代码添加至`frontend\\config\\main.php` `components`中\n```\n'urlManager'=>[\n\n             'enablePrettyUrl' => true, //对url进行美化\n\n             'showScriptName' => false,//隐藏index.php\n\n            //  'suffix' => '.html',//后缀\n\n            //  'enableStrictParsing'=>FALSE,//不要求网址严格匹配，则不需要输入rules\n\n            //  'rules' => []//网址匹配规则\n\n        ],\n```\n---\n### 1.5 语言包配置(选)\n注意大小写\n1.开启语言`frontend\\config\\main.php` `return[]`加入\n```'language' => 'zh-CN',//这时已经可以使用自带的部分翻译```\n2.添加自己的词库配置到`components`中\n```\n'i18n' => [\n            'translations' => [\n                '*' => [\n                    'class' => 'yii\\i18n\\PhpMessageSource',\n                    // 'basePath' => '/messages',//默认\n                    'fileMap' => [\n                        'common' => 'common.php',//有多个包可以并列下去\n                    ],\n                ],\n            ],\n        ],\n```\n3.创建自定义的语言包`frontend/messages/zh-CN/common.php`，名字和上面对应\n```\n<?php\nreturn[\n    'Blog'=>'博客',\n];\n```\n4.使用\n1:main视图中\n```\n['label' => 'Home', 'url' => ['/site/index']],\n//改成\n['label' =>Yii::t('yii','Home'), 'url' => ['/site/index']],\n//使用了yii自带的语言包，同理：\n['label' =>Yii::t('common','Home'), 'url' => ['/site/index']],\n//就使用了自定义的语言包\n```\n2:对于视图中`<?= $form->field($model, 'email') ?>`格式，在模型中添加翻译：\n```\npublic function attributeLabels()\n{\n    return[\n        'username'=>'用户名',\n        'email'=>\\Yii::t('common', 'Email'),\n    ];\n}\n```\n---\n### 1.6 独立的用户系统\n\n#### 1.6.1 模型的区分\n`models`分为`***Form.php`表单模型和`User.php`这种数据模型\n\n#### 1.6.2 设计思路\n1. 前后台数据表分离：user&admin\n2. 代码调整\n 1. 表单模型放在前后台中，`数据模型`放在common（移动LoginForm.php到前后台修改命名空间）\n 2. 配置文件`config/main.php`\n 3. 修改`表单模型`里的对应数据模型的使用\n 4. 前后台`站点控制器`的表单use的命名空间\n 5. 语言包\n\n---\n## 2. 技术点\n---\n### 2.1 部件的使用\n\n---\n### 2.2 查询方法\n#### 2.2.1 Query\n#### 2.2.2 *Model::find()\n\n---\n### 2.3 params的使用\n```\n//params.php中\nreturn [\n    'avatar' => [\n        'small' => '/statics/images/avatar/small.jpg',\n    ]\n];\n//view中\n<img src =\"'.Yii::$app->params['avatar']['small'].'\" alt=\"'.Yii::$app->user->identity->username.'\">\n```\n---\n### 2.4 禁用自带的 Yii、JQuery 和 Bootstrap 脚本\n- 去除 Yii.js 相关脚本\n编辑 `frontend\\asset\\AppAsset.php` 文件，注释掉变量 `$depends` 里的 `yii\\web\\YiiAsset` 值。\n编辑 `frontend\\config\\main.php` 文件，在字段 `components` 下面添加配置：\n```\n'assetManager' => [\n 'bundles' => [\n     'yii\\web\\YiiAsset' => [\n         'js' => [],  // 去除 yii.js\n         'sourcePath' => null,  // 防止在 frontend/web/asset 下生产文件\n     ],\n                        \n     'yii\\widgets\\ActiveFormAsset' => [\n         'js' => [],  // 去除 yii.activeForm.js\n         'sourcePath' => null,  // 防止在 frontend/web/asset 下生产文件\n     ],\n        \n     'yii\\validators\\ValidationAsset' => [\n         'js' => [],  // 去除 yii.validation.js\n         'sourcePath' => null,  // 防止在 frontend/web/asset 下生产文件\n     ],\n ],\n],\n```\n- 去除 JQuery 脚本\n编辑 frontend\\config\\main.php 文件，在字段 'components' 下面添加配置：\n```\n'assetManager' => [\n    'bundles' => [\n        'yii\\web\\JqueryAsset' => [\n            'js' => [],  // 去除 jquery.js\n            'sourcePath' => null,  // 防止在 frontend/web/asset 下生产文件\n        ],\n    ],\n],\n```\n- 去除 Bootstrap 库\n编辑 `frontend\\asset\\AppAsset.php` 文件，注释掉变量 `$depends` 里的 `yii\\bootstrap\\BootstrapAsset` 值。\n编辑 `frontend\\config\\main.php` 文件，在字段 `components` 下面添加配置：\n```\n'assetManager' => [\n 'bundles' => [\n     'yii\\bootstrap\\BootstrapAsset' => [\n         'css' => [],  // 去除 bootstrap.css\n         'sourcePath' => null, // 防止在 frontend/web/asset 下生产文件\n     ],\n     'yii\\bootstrap\\BootstrapPluginAsset' => [\n         'js' => [],  // 去除 bootstrap.js\n         'sourcePath' => null,  // 防止在 frontend/web/asset 下生产文件\n     ],\n ],\n],\n```\n---\n### 2.5 AppAsset前端资源使用\ntips:\n1. 如果在其他地方注册资源包，应提供视图对象，如在 小部件 类中注册资源包， 可以通过 $this->view 获取视图对象。\n2. 代码块用registerJs，代码文件用registerJsFile\n3. @web是可省的\n法一：资源包\n```\n/***************AppAsset中***************/\npublic $basePath = '@webroot';  //类指定资源文件放在 @webroot 目录下\npublic $baseUrl = '@web';       //对应的URL为 @web\npublic $css = [\n    'css/site.css',             //资源包中包含一个CSS文件 css/site.css\n];\npublic $js = [                  //没有JavaScript文件\n];\npublic $depends = [             //依赖其他两个包\n    'yii\\web\\YiiAsset',\n    'yii\\bootstrap\\BootstrapAsset',\n];\n\n/***************视图中使用***************/\nuse frontend\\assets\\AppAsset;    //别忘了use\nAppAsset::register($this);      //按AppAsset注册\n```\n\n法二：自定方法\n```\n/***************AppAsset中***************/\n//自定方法，然后在视图中注册\npublic static function addScript($view, $jsfile) {\n    $view->registerJsFile($jsfile, [AppAsset::className(), 'depends' => 'frontend\\assets\\AppAsset', 'position'=>\\yii\\web\\View::POS_END]);\n    \n//如果不加depends，自定方法的渲染优先级高于AppAsset，so会先于jq渲染，so必加\n//二参的position指明加载位置\n}\n\n/***************视图中使用***************/\nuse frontend\\assets\\AppAsset;\nAppAsset::addScript($this,'@web/statics/js/ui.js');//使用自定方法注册\n```\n\n法三：registerCssFile\n```\n//会先于AppAsset渲染\n$this->registerCssFile('/statics/css/denglu.css');\n```\n\n法四：嵌入式\n```\n//嵌入式的优先级最低，代码最后渲染\n$this->registerJs('\n    $(document).ready(function(){//直接使用\n    });\n');\n```\n\n法五：元素块-不建议\n```\n<div id=\"mybutton\">点我弹出OK</div>\n\n<?php $this->beginBlock('test') ?>  \n    $(function($) {\n      $('#mybutton').click(function() {\n        alert('OK');\n      });\n    });\n<?php $this->endBlock() ?>\n<?php $this->registerJs($this->blocks['test'], \\yii\\web\\View::POS_END); ?>\n\nPOS_HEAD——head结束标签之前：$this->registerJs('alert(4)',View::POS_HEAD);\nPOS_BEGIN——body开始标签之后：$this->registerJs('alert(4)',View::POS_BEGIN);\nPOS_END——body结束标签之前：$this->registerJs('alert(4)',View::POS_END);\nPOS_READY POS_LOAD：$this->registerJs('alert(4)', View::POS_READY);\n```\n\n法六：等同于直接写\n```\n<?= Html::jsFile('@web/js/main.js'); ?>\n<?= Html::script('alert(\"Hello!\");', ['defer' => true]);\n<?= Html::cssFile('@web/css/ie5.css', ['condition' => 'IE 5']) ?>//<!--[if IE 5]><![endif]-->\n<?= Html::style('.danger { color: #f00; }') ?>\n```\n---\n### 2.6 init() run()函数略解\n```\n如在插件中：\nclass TopMenu extends Widget{\n    public function init(){\n        parent::init();\n        echo '<ul>'；\n    }\n    public funtion run(){\n        return '</ul>';\n    }\n    public function addMenu($menuName){\n        return '<li>'.$menuName.'</li>';\n    }\n}\n\n视图中：\n<?php $menu = TopMenu::begin();?>\n//输出<ul>\n<?=$menu->addMenu('menu1');?>\n<?=$menu->addMenu('menu12');?>\n<?php TopMenu::begin();?>\n//输出</ul>\n```\n---\n## 3. 基本流程\n---\n### 3.1 活动记录（数据模型）和控制器设置基类\n```\n//---------------base/BaseModel.php-------------------\n<?php\nnamespace common\\models\\base;\n/**\n*基础模型\n*/\nuse yii\\db\\ActiveRecord;\n\nclass BaseModel extends ActiveRecord\n{}\n\n//------------base/BaseController.php---------------------\n<?php\nnamespace frontend\\controllers\\base;\n/**\n*基础控制器\n*/\nuse yii\\web\\Controller;\n\nclass BaseController extends Controller\n{\n    public function beforeAction($action)\n    {\n        //检测-如果父级的beforeAction返回的是不通过\n        if (!parent::beforeAction($action)) {\n            return false;\n        }\n        return true;\n    }\n}\n```\n### 3.2 创建数据库&数据模型\nuse Gii\n### 3.3 创建表单模型\n+ 字段\n+ 规则`rules()`\n+ 字段名称（标签属性）`attributeLabels()`\n\n### 3.4 创建控制器\n+ 创建行为action\n + new表单对象\n + 渲染视图`return $this->render('create',['model'=>$model]);`\n\n### 3.5 创建视图view\n","slug":"实战的思路、技术整理","published":1,"updated":"2019-01-21T06:37:55.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr642pyi0010y0oo2hx92fq3","content":"<hr>\n<h2 id=\"1-基础配置\"><a href=\"#1-基础配置\" class=\"headerlink\" title=\"1. 基础配置\"></a>1. 基础配置</h2><hr>\n<h3 id=\"1-1-高级版：初始化-开发环境\"><a href=\"#1-1-高级版：初始化-开发环境\" class=\"headerlink\" title=\"1.1 高级版：初始化-开发环境\"></a>1.1 高级版：初始化-开发环境</h3><hr>\n<h3 id=\"1-2-连接数据库\"><a href=\"#1-2-连接数据库\" class=\"headerlink\" title=\"1.2 连接数据库\"></a>1.2 连接数据库</h3><p>basic/config/db.php 或<br>advanced\\common\\config\\main-local.php</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h3 id=\"1-3-修改HOSTS、服务器配置模板\"><a href=\"#1-3-修改HOSTS、服务器配置模板\" class=\"headerlink\" title=\"1.3 修改HOSTS、服务器配置模板\"></a>1.3 修改HOSTS、服务器配置模板</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">\tServerName localhost</span><br><span class=\"line\">\tDocumentRoot I:/ProgramFiles/wamp64/www</span><br><span class=\"line\">\t&lt;Directory  &quot;I:/ProgramFiles/wamp64/www/&quot;&gt;</span><br><span class=\"line\">\t\tOptions +Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class=\"line\">\t\tAllowOverride All#使用.htaccess文件作为配置</span><br><span class=\"line\">\t\tRequire local</span><br><span class=\"line\">\t\t# Require all granted# 换上这句即可局域网访问</span><br><span class=\"line\">\t&lt;/Directory&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"1-4-路由配置优化\"><a href=\"#1-4-路由配置优化\" class=\"headerlink\" title=\"1.4 路由配置优化\"></a>1.4 路由配置优化</h3><p>1.去掉index.php<br>将下面代码添加至<code>/web/.htaccess</code>中或添加至服务器路由配置<code>&lt;Directory  &quot;&quot;&gt;&lt;/Directory&gt;</code>中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开启 mod_rewrite 用于美化 URL 功能的支持（译注：对应 pretty URL 选项）</span><br><span class=\"line\">RewriteEngine on</span><br><span class=\"line\"># 如果请求的是真实存在的文件或目录，直接访问</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class=\"line\"># 如果请求的不是真实文件或目录，分发请求至 index.php</span><br><span class=\"line\">RewriteRule . index.php</span><br></pre></td></tr></table></figure></p>\n<p>2.路由优化<br>将下面的代码添加至<code>frontend\\config\\main.php</code> <code>components</code>中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;urlManager&apos;=&gt;[</span><br><span class=\"line\"></span><br><span class=\"line\">             &apos;enablePrettyUrl&apos; =&gt; true, //对url进行美化</span><br><span class=\"line\"></span><br><span class=\"line\">             &apos;showScriptName&apos; =&gt; false,//隐藏index.php</span><br><span class=\"line\"></span><br><span class=\"line\">            //  &apos;suffix&apos; =&gt; &apos;.html&apos;,//后缀</span><br><span class=\"line\"></span><br><span class=\"line\">            //  &apos;enableStrictParsing&apos;=&gt;FALSE,//不要求网址严格匹配，则不需要输入rules</span><br><span class=\"line\"></span><br><span class=\"line\">            //  &apos;rules&apos; =&gt; []//网址匹配规则</span><br><span class=\"line\"></span><br><span class=\"line\">        ],</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"1-5-语言包配置-选\"><a href=\"#1-5-语言包配置-选\" class=\"headerlink\" title=\"1.5 语言包配置(选)\"></a>1.5 语言包配置(选)</h3><p>注意大小写<br>1.开启语言<code>frontend\\config\\main.php</code> <code>return[]</code>加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.添加自己的词库配置到`components`中</span><br></pre></td></tr></table></figure></p>\n<p>‘i18n’ =&gt; [<br>            ‘translations’ =&gt; [<br>                ‘*’ =&gt; [<br>                    ‘class’ =&gt; ‘yii\\i18n\\PhpMessageSource’,<br>                    // ‘basePath’ =&gt; ‘/messages’,//默认<br>                    ‘fileMap’ =&gt; [<br>                        ‘common’ =&gt; ‘common.php’,//有多个包可以并列下去<br>                    ],<br>                ],<br>            ],<br>        ],<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.创建自定义的语言包`frontend/messages/zh-CN/common.php`，名字和上面对应</span><br></pre></td></tr></table></figure></p>\n<p>&lt;?php<br>return[<br>    ‘Blog’=&gt;’博客’,<br>];<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.使用</span><br><span class=\"line\">1:main视图中</span><br></pre></td></tr></table></figure></p>\n<p>[‘label’ =&gt; ‘Home’, ‘url’ =&gt; [‘/site/index’]],<br>//改成<br>[‘label’ =&gt;Yii::t(‘yii’,’Home’), ‘url’ =&gt; [‘/site/index’]],<br>//使用了yii自带的语言包，同理：<br>[‘label’ =&gt;Yii::t(‘common’,’Home’), ‘url’ =&gt; [‘/site/index’]],<br>//就使用了自定义的语言包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2:对于视图中`&lt;?= $form-&gt;field($model, &apos;email&apos;) ?&gt;`格式，在模型中添加翻译：</span><br></pre></td></tr></table></figure></p>\n<p>public function attributeLabels()<br>{<br>    return[<br>        ‘username’=&gt;’用户名’,<br>        ‘email’=&gt;\\Yii::t(‘common’, ‘Email’),<br>    ];<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 1.6 独立的用户系统</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1.6.1 模型的区分</span><br><span class=\"line\">`models`分为`***Form.php`表单模型和`User.php`这种数据模型</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1.6.2 设计思路</span><br><span class=\"line\">1. 前后台数据表分离：user&amp;admin</span><br><span class=\"line\">2. 代码调整</span><br><span class=\"line\"> 1. 表单模型放在前后台中，`数据模型`放在common（移动LoginForm.php到前后台修改命名空间）</span><br><span class=\"line\"> 2. 配置文件`config/main.php`</span><br><span class=\"line\"> 3. 修改`表单模型`里的对应数据模型的使用</span><br><span class=\"line\"> 4. 前后台`站点控制器`的表单use的命名空间</span><br><span class=\"line\"> 5. 语言包</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">## 2. 技术点</span><br><span class=\"line\">---</span><br><span class=\"line\">### 2.1 部件的使用</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">### 2.2 查询方法</span><br><span class=\"line\">#### 2.2.1 Query</span><br><span class=\"line\">#### 2.2.2 *Model::find()</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">### 2.3 params的使用</span><br></pre></td></tr></table></figure></p>\n<p>//params.php中<br>return [<br>    ‘avatar’ =&gt; [<br>        ‘small’ =&gt; ‘/statics/images/avatar/small.jpg’,<br>    ]<br>];<br>//view中<br><img src=\"'.Yii::$app->params['avatar']['small'].'\" alt=\"'.Yii::$app->user->identity->username.'\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 2.4 禁用自带的 Yii、JQuery 和 Bootstrap 脚本</span><br><span class=\"line\">- 去除 Yii.js 相关脚本</span><br><span class=\"line\">编辑 `frontend\\asset\\AppAsset.php` 文件，注释掉变量 `$depends` 里的 `yii\\web\\YiiAsset` 值。</span><br><span class=\"line\">编辑 `frontend\\config\\main.php` 文件，在字段 `components` 下面添加配置：</span><br></pre></td></tr></table></figure></p>\n<p>‘assetManager’ =&gt; [<br> ‘bundles’ =&gt; [<br>     ‘yii\\web\\YiiAsset’ =&gt; [<br>         ‘js’ =&gt; [],  // 去除 yii.js<br>         ‘sourcePath’ =&gt; null,  // 防止在 frontend/web/asset 下生产文件<br>     ],</p>\n<pre><code> &#39;yii\\widgets\\ActiveFormAsset&#39; =&gt; [\n     &#39;js&#39; =&gt; [],  // 去除 yii.activeForm.js\n     &#39;sourcePath&#39; =&gt; null,  // 防止在 frontend/web/asset 下生产文件\n ],\n\n &#39;yii\\validators\\ValidationAsset&#39; =&gt; [\n     &#39;js&#39; =&gt; [],  // 去除 yii.validation.js\n     &#39;sourcePath&#39; =&gt; null,  // 防止在 frontend/web/asset 下生产文件\n ],\n</code></pre><p> ],<br>],<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 去除 JQuery 脚本</span><br><span class=\"line\">编辑 frontend\\config\\main.php 文件，在字段 &apos;components&apos; 下面添加配置：</span><br></pre></td></tr></table></figure></p>\n<p>‘assetManager’ =&gt; [<br>    ‘bundles’ =&gt; [<br>        ‘yii\\web\\JqueryAsset’ =&gt; [<br>            ‘js’ =&gt; [],  // 去除 jquery.js<br>            ‘sourcePath’ =&gt; null,  // 防止在 frontend/web/asset 下生产文件<br>        ],<br>    ],<br>],<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 去除 Bootstrap 库</span><br><span class=\"line\">编辑 `frontend\\asset\\AppAsset.php` 文件，注释掉变量 `$depends` 里的 `yii\\bootstrap\\BootstrapAsset` 值。</span><br><span class=\"line\">编辑 `frontend\\config\\main.php` 文件，在字段 `components` 下面添加配置：</span><br></pre></td></tr></table></figure></p>\n<p>‘assetManager’ =&gt; [<br> ‘bundles’ =&gt; [<br>     ‘yii\\bootstrap\\BootstrapAsset’ =&gt; [<br>         ‘css’ =&gt; [],  // 去除 bootstrap.css<br>         ‘sourcePath’ =&gt; null, // 防止在 frontend/web/asset 下生产文件<br>     ],<br>     ‘yii\\bootstrap\\BootstrapPluginAsset’ =&gt; [<br>         ‘js’ =&gt; [],  // 去除 bootstrap.js<br>         ‘sourcePath’ =&gt; null,  // 防止在 frontend/web/asset 下生产文件<br>     ],<br> ],<br>],<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 2.5 AppAsset前端资源使用</span><br><span class=\"line\">tips:</span><br><span class=\"line\">1. 如果在其他地方注册资源包，应提供视图对象，如在 小部件 类中注册资源包， 可以通过 $this-&gt;view 获取视图对象。</span><br><span class=\"line\">2. 代码块用registerJs，代码文件用registerJsFile</span><br><span class=\"line\">3. @web是可省的</span><br><span class=\"line\">法一：资源包</span><br></pre></td></tr></table></figure></p>\n<p>/<strong><strong><strong><em>*</em></strong></strong></strong>AppAsset中<strong><strong><strong><em>*</em></strong></strong></strong>/<br>public $basePath = ‘@webroot’;  //类指定资源文件放在 @webroot 目录下<br>public $baseUrl = ‘@web’;       //对应的URL为 @web<br>public $css = [<br>    ‘css/site.css’,             //资源包中包含一个CSS文件 css/site.css<br>];<br>public $js = [                  //没有JavaScript文件<br>];<br>public $depends = [             //依赖其他两个包<br>    ‘yii\\web\\YiiAsset’,<br>    ‘yii\\bootstrap\\BootstrapAsset’,<br>];</p>\n<p>/<strong><strong><strong><em>*</em></strong></strong></strong>视图中使用<strong><strong><strong><em>*</em></strong></strong></strong>/<br>use frontend\\assets\\AppAsset;    //别忘了use<br>AppAsset::register($this);      //按AppAsset注册<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">法二：自定方法</span><br></pre></td></tr></table></figure></p>\n<p>/<strong><strong><strong><em>*</em></strong></strong></strong>AppAsset中<strong><strong><strong><em>*</em></strong></strong></strong>/<br>//自定方法，然后在视图中注册<br>public static function addScript($view, $jsfile) {<br>    $view-&gt;registerJsFile($jsfile, [AppAsset::className(), ‘depends’ =&gt; ‘frontend\\assets\\AppAsset’, ‘position’=&gt;\\yii\\web\\View::POS_END]);</p>\n<p>//如果不加depends，自定方法的渲染优先级高于AppAsset，so会先于jq渲染，so必加<br>//二参的position指明加载位置<br>}</p>\n<p>/<strong><strong><strong><em>*</em></strong></strong></strong>视图中使用<strong><strong><strong><em>*</em></strong></strong></strong>/<br>use frontend\\assets\\AppAsset;<br>AppAsset::addScript($this,’@web/statics/js/ui.js’);//使用自定方法注册<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">法三：registerCssFile</span><br></pre></td></tr></table></figure></p>\n<p>//会先于AppAsset渲染<br>$this-&gt;registerCssFile(‘/statics/css/denglu.css’);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">法四：嵌入式</span><br></pre></td></tr></table></figure></p>\n<p>//嵌入式的优先级最低，代码最后渲染<br>$this-&gt;registerJs(‘<br>    $(document).ready(function(){//直接使用<br>    });<br>‘);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">法五：元素块-不建议</span><br></pre></td></tr></table></figure></p>\n<div id=\"mybutton\">点我弹出OK</div>\n\n<p>&lt;?php $this-&gt;beginBlock(‘test’) ?&gt;<br>    $(function($) {<br>      $(‘#mybutton’).click(function() {<br>        alert(‘OK’);<br>      });<br>    });<br>&lt;?php $this-&gt;endBlock() ?&gt;<br>&lt;?php $this-&gt;registerJs($this-&gt;blocks[‘test’], \\yii\\web\\View::POS_END); ?&gt;</p>\n<p>POS_HEAD——head结束标签之前：$this-&gt;registerJs(‘alert(4)’,View::POS_HEAD);<br>POS_BEGIN——body开始标签之后：$this-&gt;registerJs(‘alert(4)’,View::POS_BEGIN);<br>POS_END——body结束标签之前：$this-&gt;registerJs(‘alert(4)’,View::POS_END);<br>POS_READY POS_LOAD：$this-&gt;registerJs(‘alert(4)’, View::POS_READY);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">法六：等同于直接写</span><br></pre></td></tr></table></figure></p>\n<p>&lt;?= Html::jsFile(‘@web/js/main.js’); ?&gt;<br>&lt;?= Html::script(‘alert(“Hello!”);’, [‘defer’ =&gt; true]);<br>&lt;?= Html::cssFile(‘@web/css/ie5.css’, [‘condition’ =&gt; ‘IE 5’]) ?&gt;//<!--[if IE 5]><![endif]--><br>&lt;?= Html::style(‘.danger { color: #f00; }’) ?&gt;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 2.6 init() run()函数略解</span><br></pre></td></tr></table></figure></p>\n<p>如在插件中：<br>class TopMenu extends Widget{<br>    public function init(){<br>        parent::init();<br>        echo ‘<ul>'；\n    }\n    public funtion run(){\n        return '</ul>‘;<br>    }<br>    public function addMenu($menuName){<br>        return ‘<li>'.$menuName.'</li>‘;<br>    }<br>}</p>\n<p>视图中：<br>&lt;?php $menu = TopMenu::begin();?&gt;<br>//输出<ul>\n<?=$menu->addMenu('menu1');?>\n<?=$menu->addMenu('menu12');?>\n<?php TopMenu::begin();?>\n//输出</ul><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">## 3. 基本流程</span><br><span class=\"line\">---</span><br><span class=\"line\">### 3.1 活动记录（数据模型）和控制器设置基类</span><br></pre></td></tr></table></figure></p>\n<p>//———————-base/BaseModel.php—————————-<br>&lt;?php<br>namespace common\\models\\base;<br>/<em>*\n</em>基础模型<br>*/<br>use yii\\db\\ActiveRecord;</p>\n<p>class BaseModel extends ActiveRecord<br>{}</p>\n<p>//——————base/BaseController.php——————————-<br>&lt;?php<br>namespace frontend\\controllers\\base;<br>/<em>*\n</em>基础控制器<br>*/<br>use yii\\web\\Controller;</p>\n<p>class BaseController extends Controller<br>{<br>    public function beforeAction($action)<br>    {<br>        //检测-如果父级的beforeAction返回的是不通过<br>        if (!parent::beforeAction($action)) {<br>            return false;<br>        }<br>        return true;<br>    }<br>}<br>```</p>\n<h3 id=\"3-2-创建数据库-amp-数据模型\"><a href=\"#3-2-创建数据库-amp-数据模型\" class=\"headerlink\" title=\"3.2 创建数据库&amp;数据模型\"></a>3.2 创建数据库&amp;数据模型</h3><p>use Gii</p>\n<h3 id=\"3-3-创建表单模型\"><a href=\"#3-3-创建表单模型\" class=\"headerlink\" title=\"3.3 创建表单模型\"></a>3.3 创建表单模型</h3><ul>\n<li>字段</li>\n<li>规则<code>rules()</code></li>\n<li>字段名称（标签属性）<code>attributeLabels()</code></li>\n</ul>\n<h3 id=\"3-4-创建控制器\"><a href=\"#3-4-创建控制器\" class=\"headerlink\" title=\"3.4 创建控制器\"></a>3.4 创建控制器</h3><ul>\n<li>创建行为action<ul>\n<li>new表单对象</li>\n<li>渲染视图<code>return $this-&gt;render(&#39;create&#39;,[&#39;model&#39;=&gt;$model]);</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-5-创建视图view\"><a href=\"#3-5-创建视图view\" class=\"headerlink\" title=\"3.5 创建视图view\"></a>3.5 创建视图view</h3>","site":{"data":{}},"excerpt":"<hr>\n<h2 id=\"1-基础配置\"><a href=\"#1-基础配置\" class=\"headerlink\" title=\"1. 基础配置\"></a>1. 基础配置</h2><hr>\n<h3 id=\"1-1-高级版：初始化-开发环境\"><a href=\"#1-1-高级版：初始化-开发环境\" class=\"headerlink\" title=\"1.1 高级版：初始化-开发环境\"></a>1.1 高级版：初始化-开发环境</h3><hr>\n<h3 id=\"1-2-连接数据库\"><a href=\"#1-2-连接数据库\" class=\"headerlink\" title=\"1.2 连接数据库\"></a>1.2 连接数据库</h3><p>basic/config/db.php 或<br>advanced\\common\\config\\main-local.php</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><h3 id=\"1-3-修改HOSTS、服务器配置模板\"><a href=\"#1-3-修改HOSTS、服务器配置模板\" class=\"headerlink\" title=\"1.3 修改HOSTS、服务器配置模板\"></a>1.3 修改HOSTS、服务器配置模板</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">\tServerName localhost</span><br><span class=\"line\">\tDocumentRoot I:/ProgramFiles/wamp64/www</span><br><span class=\"line\">\t&lt;Directory  &quot;I:/ProgramFiles/wamp64/www/&quot;&gt;</span><br><span class=\"line\">\t\tOptions +Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class=\"line\">\t\tAllowOverride All#使用.htaccess文件作为配置</span><br><span class=\"line\">\t\tRequire local</span><br><span class=\"line\">\t\t# Require all granted# 换上这句即可局域网访问</span><br><span class=\"line\">\t&lt;/Directory&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"1-4-路由配置优化\"><a href=\"#1-4-路由配置优化\" class=\"headerlink\" title=\"1.4 路由配置优化\"></a>1.4 路由配置优化</h3><p>1.去掉index.php<br>将下面代码添加至<code>/web/.htaccess</code>中或添加至服务器路由配置<code>&lt;Directory  &quot;&quot;&gt;&lt;/Directory&gt;</code>中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开启 mod_rewrite 用于美化 URL 功能的支持（译注：对应 pretty URL 选项）</span><br><span class=\"line\">RewriteEngine on</span><br><span class=\"line\"># 如果请求的是真实存在的文件或目录，直接访问</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class=\"line\"># 如果请求的不是真实文件或目录，分发请求至 index.php</span><br><span class=\"line\">RewriteRule . index.php</span><br></pre></td></tr></table></figure></p>\n<p>2.路由优化<br>将下面的代码添加至<code>frontend\\config\\main.php</code> <code>components</code>中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;urlManager&apos;=&gt;[</span><br><span class=\"line\"></span><br><span class=\"line\">             &apos;enablePrettyUrl&apos; =&gt; true, //对url进行美化</span><br><span class=\"line\"></span><br><span class=\"line\">             &apos;showScriptName&apos; =&gt; false,//隐藏index.php</span><br><span class=\"line\"></span><br><span class=\"line\">            //  &apos;suffix&apos; =&gt; &apos;.html&apos;,//后缀</span><br><span class=\"line\"></span><br><span class=\"line\">            //  &apos;enableStrictParsing&apos;=&gt;FALSE,//不要求网址严格匹配，则不需要输入rules</span><br><span class=\"line\"></span><br><span class=\"line\">            //  &apos;rules&apos; =&gt; []//网址匹配规则</span><br><span class=\"line\"></span><br><span class=\"line\">        ],</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"1-5-语言包配置-选\"><a href=\"#1-5-语言包配置-选\" class=\"headerlink\" title=\"1.5 语言包配置(选)\"></a>1.5 语言包配置(选)</h3><p>注意大小写<br>1.开启语言<code>frontend\\config\\main.php</code> <code>return[]</code>加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.添加自己的词库配置到`components`中</span><br></pre></td></tr></table></figure></p>\n<p>‘i18n’ =&gt; [<br>            ‘translations’ =&gt; [<br>                ‘*’ =&gt; [<br>                    ‘class’ =&gt; ‘yii\\i18n\\PhpMessageSource’,<br>                    // ‘basePath’ =&gt; ‘/messages’,//默认<br>                    ‘fileMap’ =&gt; [<br>                        ‘common’ =&gt; ‘common.php’,//有多个包可以并列下去<br>                    ],<br>                ],<br>            ],<br>        ],<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.创建自定义的语言包`frontend/messages/zh-CN/common.php`，名字和上面对应</span><br></pre></td></tr></table></figure></p>\n<p>&lt;?php<br>return[<br>    ‘Blog’=&gt;’博客’,<br>];<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.使用</span><br><span class=\"line\">1:main视图中</span><br></pre></td></tr></table></figure></p>\n<p>[‘label’ =&gt; ‘Home’, ‘url’ =&gt; [‘/site/index’]],<br>//改成<br>[‘label’ =&gt;Yii::t(‘yii’,’Home’), ‘url’ =&gt; [‘/site/index’]],<br>//使用了yii自带的语言包，同理：<br>[‘label’ =&gt;Yii::t(‘common’,’Home’), ‘url’ =&gt; [‘/site/index’]],<br>//就使用了自定义的语言包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2:对于视图中`&lt;?= $form-&gt;field($model, &apos;email&apos;) ?&gt;`格式，在模型中添加翻译：</span><br></pre></td></tr></table></figure></p>\n<p>public function attributeLabels()<br>{<br>    return[<br>        ‘username’=&gt;’用户名’,<br>        ‘email’=&gt;\\Yii::t(‘common’, ‘Email’),<br>    ];<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 1.6 独立的用户系统</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1.6.1 模型的区分</span><br><span class=\"line\">`models`分为`***Form.php`表单模型和`User.php`这种数据模型</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1.6.2 设计思路</span><br><span class=\"line\">1. 前后台数据表分离：user&amp;admin</span><br><span class=\"line\">2. 代码调整</span><br><span class=\"line\"> 1. 表单模型放在前后台中，`数据模型`放在common（移动LoginForm.php到前后台修改命名空间）</span><br><span class=\"line\"> 2. 配置文件`config/main.php`</span><br><span class=\"line\"> 3. 修改`表单模型`里的对应数据模型的使用</span><br><span class=\"line\"> 4. 前后台`站点控制器`的表单use的命名空间</span><br><span class=\"line\"> 5. 语言包</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">## 2. 技术点</span><br><span class=\"line\">---</span><br><span class=\"line\">### 2.1 部件的使用</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">### 2.2 查询方法</span><br><span class=\"line\">#### 2.2.1 Query</span><br><span class=\"line\">#### 2.2.2 *Model::find()</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">### 2.3 params的使用</span><br></pre></td></tr></table></figure></p>\n<p>//params.php中<br>return [<br>    ‘avatar’ =&gt; [<br>        ‘small’ =&gt; ‘/statics/images/avatar/small.jpg’,<br>    ]<br>];<br>//view中<br><img src=\"'.Yii::$app->params['avatar']['small'].'\" alt=\"'.Yii::$app->user->identity->username.'\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 2.4 禁用自带的 Yii、JQuery 和 Bootstrap 脚本</span><br><span class=\"line\">- 去除 Yii.js 相关脚本</span><br><span class=\"line\">编辑 `frontend\\asset\\AppAsset.php` 文件，注释掉变量 `$depends` 里的 `yii\\web\\YiiAsset` 值。</span><br><span class=\"line\">编辑 `frontend\\config\\main.php` 文件，在字段 `components` 下面添加配置：</span><br></pre></td></tr></table></figure></p>\n<p>‘assetManager’ =&gt; [<br> ‘bundles’ =&gt; [<br>     ‘yii\\web\\YiiAsset’ =&gt; [<br>         ‘js’ =&gt; [],  // 去除 yii.js<br>         ‘sourcePath’ =&gt; null,  // 防止在 frontend/web/asset 下生产文件<br>     ],</p>\n<pre><code> &#39;yii\\widgets\\ActiveFormAsset&#39; =&gt; [\n     &#39;js&#39; =&gt; [],  // 去除 yii.activeForm.js\n     &#39;sourcePath&#39; =&gt; null,  // 防止在 frontend/web/asset 下生产文件\n ],\n\n &#39;yii\\validators\\ValidationAsset&#39; =&gt; [\n     &#39;js&#39; =&gt; [],  // 去除 yii.validation.js\n     &#39;sourcePath&#39; =&gt; null,  // 防止在 frontend/web/asset 下生产文件\n ],\n</code></pre><p> ],<br>],<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 去除 JQuery 脚本</span><br><span class=\"line\">编辑 frontend\\config\\main.php 文件，在字段 &apos;components&apos; 下面添加配置：</span><br></pre></td></tr></table></figure></p>\n<p>‘assetManager’ =&gt; [<br>    ‘bundles’ =&gt; [<br>        ‘yii\\web\\JqueryAsset’ =&gt; [<br>            ‘js’ =&gt; [],  // 去除 jquery.js<br>            ‘sourcePath’ =&gt; null,  // 防止在 frontend/web/asset 下生产文件<br>        ],<br>    ],<br>],<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 去除 Bootstrap 库</span><br><span class=\"line\">编辑 `frontend\\asset\\AppAsset.php` 文件，注释掉变量 `$depends` 里的 `yii\\bootstrap\\BootstrapAsset` 值。</span><br><span class=\"line\">编辑 `frontend\\config\\main.php` 文件，在字段 `components` 下面添加配置：</span><br></pre></td></tr></table></figure></p>\n<p>‘assetManager’ =&gt; [<br> ‘bundles’ =&gt; [<br>     ‘yii\\bootstrap\\BootstrapAsset’ =&gt; [<br>         ‘css’ =&gt; [],  // 去除 bootstrap.css<br>         ‘sourcePath’ =&gt; null, // 防止在 frontend/web/asset 下生产文件<br>     ],<br>     ‘yii\\bootstrap\\BootstrapPluginAsset’ =&gt; [<br>         ‘js’ =&gt; [],  // 去除 bootstrap.js<br>         ‘sourcePath’ =&gt; null,  // 防止在 frontend/web/asset 下生产文件<br>     ],<br> ],<br>],<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 2.5 AppAsset前端资源使用</span><br><span class=\"line\">tips:</span><br><span class=\"line\">1. 如果在其他地方注册资源包，应提供视图对象，如在 小部件 类中注册资源包， 可以通过 $this-&gt;view 获取视图对象。</span><br><span class=\"line\">2. 代码块用registerJs，代码文件用registerJsFile</span><br><span class=\"line\">3. @web是可省的</span><br><span class=\"line\">法一：资源包</span><br></pre></td></tr></table></figure></p>\n<p>/<strong><strong><strong><em>*</em></strong></strong></strong>AppAsset中<strong><strong><strong><em>*</em></strong></strong></strong>/<br>public $basePath = ‘@webroot’;  //类指定资源文件放在 @webroot 目录下<br>public $baseUrl = ‘@web’;       //对应的URL为 @web<br>public $css = [<br>    ‘css/site.css’,             //资源包中包含一个CSS文件 css/site.css<br>];<br>public $js = [                  //没有JavaScript文件<br>];<br>public $depends = [             //依赖其他两个包<br>    ‘yii\\web\\YiiAsset’,<br>    ‘yii\\bootstrap\\BootstrapAsset’,<br>];</p>\n<p>/<strong><strong><strong><em>*</em></strong></strong></strong>视图中使用<strong><strong><strong><em>*</em></strong></strong></strong>/<br>use frontend\\assets\\AppAsset;    //别忘了use<br>AppAsset::register($this);      //按AppAsset注册<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">法二：自定方法</span><br></pre></td></tr></table></figure></p>\n<p>/<strong><strong><strong><em>*</em></strong></strong></strong>AppAsset中<strong><strong><strong><em>*</em></strong></strong></strong>/<br>//自定方法，然后在视图中注册<br>public static function addScript($view, $jsfile) {<br>    $view-&gt;registerJsFile($jsfile, [AppAsset::className(), ‘depends’ =&gt; ‘frontend\\assets\\AppAsset’, ‘position’=&gt;\\yii\\web\\View::POS_END]);</p>\n<p>//如果不加depends，自定方法的渲染优先级高于AppAsset，so会先于jq渲染，so必加<br>//二参的position指明加载位置<br>}</p>\n<p>/<strong><strong><strong><em>*</em></strong></strong></strong>视图中使用<strong><strong><strong><em>*</em></strong></strong></strong>/<br>use frontend\\assets\\AppAsset;<br>AppAsset::addScript($this,’@web/statics/js/ui.js’);//使用自定方法注册<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">法三：registerCssFile</span><br></pre></td></tr></table></figure></p>\n<p>//会先于AppAsset渲染<br>$this-&gt;registerCssFile(‘/statics/css/denglu.css’);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">法四：嵌入式</span><br></pre></td></tr></table></figure></p>\n<p>//嵌入式的优先级最低，代码最后渲染<br>$this-&gt;registerJs(‘<br>    $(document).ready(function(){//直接使用<br>    });<br>‘);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">法五：元素块-不建议</span><br></pre></td></tr></table></figure></p>\n<div id=\"mybutton\">点我弹出OK</div>\n\n<p>&lt;?php $this-&gt;beginBlock(‘test’) ?&gt;<br>    $(function($) {<br>      $(‘#mybutton’).click(function() {<br>        alert(‘OK’);<br>      });<br>    });<br>&lt;?php $this-&gt;endBlock() ?&gt;<br>&lt;?php $this-&gt;registerJs($this-&gt;blocks[‘test’], \\yii\\web\\View::POS_END); ?&gt;</p>\n<p>POS_HEAD——head结束标签之前：$this-&gt;registerJs(‘alert(4)’,View::POS_HEAD);<br>POS_BEGIN——body开始标签之后：$this-&gt;registerJs(‘alert(4)’,View::POS_BEGIN);<br>POS_END——body结束标签之前：$this-&gt;registerJs(‘alert(4)’,View::POS_END);<br>POS_READY POS_LOAD：$this-&gt;registerJs(‘alert(4)’, View::POS_READY);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">法六：等同于直接写</span><br></pre></td></tr></table></figure></p>\n<p>&lt;?= Html::jsFile(‘@web/js/main.js’); ?&gt;<br>&lt;?= Html::script(‘alert(“Hello!”);’, [‘defer’ =&gt; true]);<br>&lt;?= Html::cssFile(‘@web/css/ie5.css’, [‘condition’ =&gt; ‘IE 5’]) ?&gt;//<!--[if IE 5]><![endif]--><br>&lt;?= Html::style(‘.danger { color: #f00; }’) ?&gt;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">### 2.6 init() run()函数略解</span><br></pre></td></tr></table></figure></p>\n<p>如在插件中：<br>class TopMenu extends Widget{<br>    public function init(){<br>        parent::init();<br>        echo ‘<ul>'；\n    }\n    public funtion run(){\n        return '</ul>‘;<br>    }<br>    public function addMenu($menuName){<br>        return ‘<li>'.$menuName.'</li>‘;<br>    }<br>}</p>\n<p>视图中：<br>&lt;?php $menu = TopMenu::begin();?&gt;<br>//输出<ul>\n<?=$menu->addMenu('menu1');?>\n<?=$menu->addMenu('menu12');?>\n<?php TopMenu::begin();?>\n//输出</ul><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">## 3. 基本流程</span><br><span class=\"line\">---</span><br><span class=\"line\">### 3.1 活动记录（数据模型）和控制器设置基类</span><br></pre></td></tr></table></figure></p>\n<p>//———————-base/BaseModel.php—————————-<br>&lt;?php<br>namespace common\\models\\base;<br>/<em>*\n</em>基础模型<br>*/<br>use yii\\db\\ActiveRecord;</p>\n<p>class BaseModel extends ActiveRecord<br>{}</p>\n<p>//——————base/BaseController.php——————————-<br>&lt;?php<br>namespace frontend\\controllers\\base;<br>/<em>*\n</em>基础控制器<br>*/<br>use yii\\web\\Controller;</p>\n<p>class BaseController extends Controller<br>{<br>    public function beforeAction($action)<br>    {<br>        //检测-如果父级的beforeAction返回的是不通过<br>        if (!parent::beforeAction($action)) {<br>            return false;<br>        }<br>        return true;<br>    }<br>}<br>```</p>\n<h3 id=\"3-2-创建数据库-amp-数据模型\"><a href=\"#3-2-创建数据库-amp-数据模型\" class=\"headerlink\" title=\"3.2 创建数据库&amp;数据模型\"></a>3.2 创建数据库&amp;数据模型</h3><p>use Gii</p>\n<h3 id=\"3-3-创建表单模型\"><a href=\"#3-3-创建表单模型\" class=\"headerlink\" title=\"3.3 创建表单模型\"></a>3.3 创建表单模型</h3><ul>\n<li>字段</li>\n<li>规则<code>rules()</code></li>\n<li>字段名称（标签属性）<code>attributeLabels()</code></li>\n</ul>\n<h3 id=\"3-4-创建控制器\"><a href=\"#3-4-创建控制器\" class=\"headerlink\" title=\"3.4 创建控制器\"></a>3.4 创建控制器</h3><ul>\n<li>创建行为action<ul>\n<li>new表单对象</li>\n<li>渲染视图<code>return $this-&gt;render(&#39;create&#39;,[&#39;model&#39;=&gt;$model]);</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-5-创建视图view\"><a href=\"#3-5-创建视图view\" class=\"headerlink\" title=\"3.5 创建视图view\"></a>3.5 创建视图view</h3>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjr642pxf0000y0oou3wpj8jw","tag_id":"cjr642pxn0002y0oo80mpzbyq","_id":"cjr642pxx0007y0oozzn3smck"},{"post_id":"cjr642pxk0001y0ooyexkkhr1","tag_id":"cjr642pxw0006y0ooa8zoxppl","_id":"cjr642py1000cy0ooqyvep6l7"},{"post_id":"cjr642pxs0003y0oouzkcob8c","tag_id":"cjr642pxz000ay0oo6uj52hjj","_id":"cjr642py3000fy0oob4srb0tp"},{"post_id":"cjr642pxt0004y0oo2umihdvk","tag_id":"cjr642py2000ey0oonfyuonp9","_id":"cjr642py5000hy0oo8vgts3uc"},{"post_id":"cjr642pxu0005y0oojil6i4gy","tag_id":"cjr642py2000ey0oonfyuonp9","_id":"cjr642py6000jy0ooia7kgxuw"},{"post_id":"cjr642pxy0009y0oo13ade40u","tag_id":"cjr642py5000iy0oowijbyyu9","_id":"cjr642py6000ly0oo8ljavc8p"},{"post_id":"cjr642py0000by0oo0pmfelv9","tag_id":"cjr642py6000ky0oou8e2gdun","_id":"cjr642py7000ny0oo7d4ym0jr"},{"post_id":"cjr642py1000dy0oopg3wucld","tag_id":"cjr642py6000ky0oou8e2gdun","_id":"cjr642py7000oy0oofkb6aei6"},{"post_id":"cjr642pyb000py0ooyrsgehxh","tag_id":"cjr642pxw0006y0ooa8zoxppl","_id":"cjr642pyd000ry0oodo3v03ck"},{"post_id":"cjr642pyc000qy0ooxjy7x0v4","tag_id":"cjr642pxw0006y0ooa8zoxppl","_id":"cjr642pyf000ty0oooa4ox577"},{"post_id":"cjr642pyf000uy0oozkqv63x7","tag_id":"cjr642pxw0006y0ooa8zoxppl","_id":"cjr642pyh000xy0oomhb75pb9"},{"post_id":"cjr642pyg000wy0oodpim0boe","tag_id":"cjr642py2000ey0oonfyuonp9","_id":"cjr642pyi000zy0oodu8rw6mo"},{"post_id":"cjr642pyh000yy0oo9daurhjg","tag_id":"cjr642py2000ey0oonfyuonp9","_id":"cjr642pyj0011y0oo19rsrmtn"},{"post_id":"cjr642pye000sy0ooitv6ief8","tag_id":"cjr642pyg000vy0oog8al3564","_id":"cjr642pyk0012y0oo503g8250"},{"post_id":"cjr642pyi0010y0oo2hx92fq3","tag_id":"cjr642py2000ey0oonfyuonp9","_id":"cjr642pyk0013y0ooc6fwgj2q"}],"Tag":[{"name":"翻墙","_id":"cjr642pxn0002y0oo80mpzbyq"},{"name":"JS","_id":"cjr642pxw0006y0ooa8zoxppl"},{"name":"JAVA-Web","_id":"cjr642pxz000ay0oo6uj52hjj"},{"name":"Yii","_id":"cjr642py2000ey0oonfyuonp9"},{"name":"JAVA","_id":"cjr642py5000iy0oowijbyyu9"},{"name":"数学","_id":"cjr642py6000ky0oou8e2gdun"},{"name":"PHP","_id":"cjr642pyg000vy0oog8al3564"}]}}